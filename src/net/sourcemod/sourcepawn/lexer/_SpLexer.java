/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.sourcemod.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;

import static net.sourcemod.sourcepawn.lexer.SpTokenTypes.*;

import java.util.function.IntConsumer;
import java.util.NoSuchElementException;

import java.util.Map;
import java.util.HashMap;
import java.util.PrimitiveIterator;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpLexer.flex</tt>
 */
class _SpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_CASE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\65\1\26\1\27\1\0\1\101\1\67\1\25\1\72"+
    "\1\73\1\7\1\100\1\103\1\23\1\21\1\10\1\14\1\11\1\57\1\56\1\60\1\12\1\55\1"+
    "\12\1\54\1\5\1\30\1\104\1\70\1\64\1\71\1\0\1\6\6\13\24\4\1\76\1\24\1\77\1"+
    "\102\1\16\1\0\1\35\1\15\1\41\1\46\1\22\1\34\1\53\1\45\1\43\1\62\1\44\1\36"+
    "\1\47\1\40\1\17\1\50\1\42\1\32\1\37\1\31\1\33\1\61\1\52\1\20\1\51\1\63\1\74"+
    "\1\66\1\75\1\105\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\5\1\4\1\11\1\4\1\12\1\4\1\13"+
    "\1\14\1\15\1\16\1\17\20\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\1"+
    "\3\0\1\42\1\5\1\0\1\43\1\44\1\45\1\46"+
    "\3\5\3\4\1\47\2\4\1\50\3\4\1\51\1\52"+
    "\2\14\2\15\2\16\1\0\1\53\14\4\1\54\16\4"+
    "\1\55\1\56\1\4\1\57\13\4\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\2\0\1\76\1\77\1\100\1\44"+
    "\1\101\3\4\1\102\2\4\1\103\4\4\1\0\1\16"+
    "\1\4\1\104\11\4\1\105\5\4\1\106\7\4\1\107"+
    "\10\4\1\110\17\4\1\111\2\4\1\112\1\113\1\114"+
    "\2\0\2\101\5\4\1\115\1\4\1\116\1\117\1\120"+
    "\2\4\1\121\24\4\1\122\6\4\1\123\1\4\1\124"+
    "\2\4\1\125\1\126\10\4\1\127\5\4\1\130\1\4"+
    "\1\131\1\4\1\132\3\4\1\133\1\100\1\0\1\44"+
    "\1\0\1\134\5\4\1\135\1\136\5\4\1\137\1\140"+
    "\1\4\1\141\1\142\6\4\1\143\4\4\1\144\2\4"+
    "\1\145\5\4\1\146\1\4\1\147\1\4\1\150\1\4"+
    "\1\151\1\152\13\4\1\153\6\4\1\154\2\4\1\155"+
    "\2\4\1\156\1\4\1\157\1\160\1\161\6\4\1\162"+
    "\1\4\1\163\1\164\1\165\1\166\1\167\1\170\5\4"+
    "\1\171\1\4\1\172\2\4\1\173\3\4\1\174\5\4"+
    "\1\175\3\4\1\176\1\177\1\4\1\200\1\201\1\4"+
    "\1\202\1\4\1\203\1\204\2\4\1\205\1\206\2\4"+
    "\1\207\1\210\2\4\1\211\1\212\1\4\1\213\1\214"+
    "\1\215\1\4\1\216\1\217\1\220\1\221\1\222\1\4"+
    "\1\223\1\4\1\224\2\4\1\225\1\4\1\226\1\227"+
    "\1\230\1\231\2\4\1\232";

  private static int [] zzUnpackAction() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u0118"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64"+
    "\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0c4e\0\u0c94\0\u0cda\0\u0118"+
    "\0\u0118\0\u0118\0\u0d20\0\u0d66\0\u0dac\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0118\0\u0f0a\0\u0f50\0\u0118\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u0118\0\u0118\0\u1324\0\u0118\0\u136a"+
    "\0\u0118\0\u13b0\0\u0118\0\u13f6\0\u0118\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8"+
    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u01ea\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42"+
    "\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u1f72\0\u0118"+
    "\0\u1fb8\0\u0118\0\u0118\0\u0118\0\u0118\0\u1ffe\0\u0d20\0\u0118"+
    "\0\u0118\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u0118"+
    "\0\u21e8\0\u222e\0\u0118\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c"+
    "\0\u23d2\0\u2418\0\u01ea\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u01ea\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u01ea\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa"+
    "\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda"+
    "\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u0118\0\u0118"+
    "\0\u31c4\0\u320a\0\u3250\0\u3296\0\u0118\0\u32dc\0\u3322\0\u3368"+
    "\0\u33ae\0\u33f4\0\u01ea\0\u343a\0\u01ea\0\u01ea\0\u01ea\0\u3480"+
    "\0\u34c6\0\u01ea\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a"+
    "\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a"+
    "\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u01ea\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u01ea\0\u3c28\0\u01ea"+
    "\0\u3c6e\0\u3cb4\0\u01ea\0\u01ea\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc"+
    "\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u01ea\0\u3f2a\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u01ea\0\u4088\0\u01ea\0\u40ce\0\u01ea\0\u4114"+
    "\0\u415a\0\u41a0\0\u0118\0\u41e6\0\u41e6\0\u0118\0\u422c\0\u01ea"+
    "\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u01ea\0\u01ea\0\u43d0"+
    "\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u01ea\0\u01ea\0\u452e\0\u01ea"+
    "\0\u01ea\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u01ea"+
    "\0\u4718\0\u475e\0\u47a4\0\u47ea\0\u01ea\0\u4830\0\u4876\0\u01ea"+
    "\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4\0\u01ea\0\u4a1a\0\u01ea"+
    "\0\u4a60\0\u01ea\0\u4aa6\0\u01ea\0\u01ea\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u01ea\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u01ea"+
    "\0\u4f92\0\u4fd8\0\u01ea\0\u501e\0\u5064\0\u01ea\0\u50aa\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e"+
    "\0\u01ea\0\u5294\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u01ea\0\u5438\0\u01ea"+
    "\0\u547e\0\u54c4\0\u01ea\0\u550a\0\u5550\0\u5596\0\u01ea\0\u55dc"+
    "\0\u5622\0\u5668\0\u56ae\0\u56f4\0\u01ea\0\u573a\0\u5780\0\u57c6"+
    "\0\u01ea\0\u01ea\0\u580c\0\u01ea\0\u01ea\0\u5852\0\u01ea\0\u5898"+
    "\0\u01ea\0\u01ea\0\u58de\0\u5924\0\u01ea\0\u01ea\0\u596a\0\u59b0"+
    "\0\u01ea\0\u01ea\0\u59f6\0\u5a3c\0\u01ea\0\u01ea\0\u5a82\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u5ac8\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u01ea"+
    "\0\u5b0e\0\u01ea\0\u5b54\0\u01ea\0\u5b9a\0\u5be0\0\u01ea\0\u5c26"+
    "\0\u01ea\0\u01ea\0\u01ea\0\u01ea\0\u5c6c\0\u5cb2\0\u01ea";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\12\1\11\1\16\1\17\1\20\1\21\1\11"+
    "\1\22\1\23\1\24\1\5\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\11\1\42\2\11\1\43\1\44\1\45\1\11"+
    "\1\46\1\47\5\12\1\50\2\11\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\4\5"+
    "\1\73\1\5\1\74\4\5\1\73\1\5\1\73\1\74"+
    "\2\73\1\5\1\73\6\5\23\73\5\5\3\73\22\5"+
    "\4\0\1\75\1\0\1\76\4\0\1\75\1\0\1\75"+
    "\1\76\2\75\1\0\1\75\6\0\23\75\5\0\3\75"+
    "\52\0\1\77\164\0\1\6\107\0\1\10\106\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\33\11\27\0"+
    "\1\101\3\0\2\101\1\0\1\101\1\0\1\101\2\0"+
    "\1\102\32\0\5\101\31\0\3\11\2\0\10\11\1\0"+
    "\1\11\6\0\33\11\106\0\1\103\30\0\1\104\1\105"+
    "\53\0\1\106\26\0\1\101\3\0\2\101\1\0\1\101"+
    "\1\107\1\101\1\110\1\111\1\102\32\0\5\101\31\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\11"+
    "\1\112\1\113\30\11\26\0\3\11\2\0\5\11\1\114"+
    "\2\11\1\0\1\11\5\0\1\115\33\11\26\0\3\11"+
    "\2\0\4\11\1\116\3\11\1\0\1\11\5\0\1\100"+
    "\17\11\1\117\13\11\43\0\1\120\70\0\3\11\2\0"+
    "\7\11\1\121\1\0\1\11\5\0\1\100\5\11\1\122"+
    "\1\11\1\123\23\11\45\0\1\124\40\0\1\125\21\0"+
    "\2\25\2\0\20\25\1\126\1\127\60\25\2\26\2\0"+
    "\20\26\1\130\1\26\1\131\57\26\2\27\1\132\1\133"+
    "\20\27\1\134\61\27\30\0\1\135\61\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\1\11\1\136\2\11"+
    "\1\137\7\11\1\140\3\11\1\141\12\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\142\5\0\1\100\33\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\6\11"+
    "\1\143\1\144\2\11\1\145\20\11\26\0\3\11\2\0"+
    "\6\11\1\146\1\11\1\0\1\11\5\0\1\100\2\11"+
    "\1\147\1\11\1\150\5\11\1\151\20\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\6\11\1\152"+
    "\1\11\1\153\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\154\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\155\5\0\1\100\1\156\4\11\1\157\4\11"+
    "\1\160\6\11\1\161\11\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\162\5\0\1\100\2\11\1\163\1\11\1\164"+
    "\26\11\26\0\3\11\2\0\6\11\1\165\1\11\1\0"+
    "\1\166\5\0\1\100\4\11\1\167\7\11\1\170\16\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\3\11\1\171\3\11\1\172\6\11\1\173\14\11\26\0"+
    "\3\11\2\0\6\11\1\174\1\11\1\0\1\175\5\0"+
    "\1\100\33\11\26\0\3\11\2\0\10\11\1\0\1\176"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\11\1\177\1\200\1\11\1\201"+
    "\26\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\12\11\1\202\1\11\1\203\16\11\26\0\3\11"+
    "\2\0\6\11\1\204\1\11\1\0\1\11\5\0\1\100"+
    "\33\11\26\0\3\11\2\0\6\11\1\205\1\11\1\0"+
    "\1\11\5\0\1\100\4\11\1\206\5\11\1\207\20\11"+
    "\106\0\1\210\105\0\1\211\105\0\1\212\1\0\1\213"+
    "\103\0\1\214\2\0\1\215\102\0\1\216\3\0\1\217"+
    "\101\0\1\220\4\0\1\221\100\0\1\222\13\0\1\223"+
    "\71\0\1\224\105\0\1\225\22\0\1\226\2\0\3\227"+
    "\2\0\10\227\1\0\1\227\5\0\1\230\33\227\26\0"+
    "\3\227\2\0\10\227\1\0\1\227\6\0\33\227\26\0"+
    "\3\75\2\0\10\75\1\0\1\75\6\0\33\75\23\0"+
    "\1\77\134\0\1\231\62\0\1\101\3\0\2\101\1\0"+
    "\1\101\1\0\1\101\35\0\5\101\32\0\1\232\3\0"+
    "\2\232\1\0\1\232\37\0\5\232\25\0\7\233\1\234"+
    "\76\233\2\105\2\0\102\105\11\0\1\107\2\0\1\107"+
    "\1\0\1\107\100\0\2\110\1\0\1\110\1\0\1\110"+
    "\36\0\4\110\32\0\1\111\3\0\6\111\3\0\1\111"+
    "\11\0\2\111\3\0\1\111\4\0\1\111\5\0\5\111"+
    "\31\0\3\11\2\0\10\11\1\0\1\235\5\0\1\100"+
    "\33\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\12\11\1\236\20\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\7\11\1\237\23\11\52\0"+
    "\1\240\61\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\31\11\1\241\1\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\242\5\0\1\100\33\11\43\0\1\243\70\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\12\11"+
    "\1\244\4\11\1\245\13\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\6\11\1\246\24\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\2\11"+
    "\1\247\30\11\22\0\2\25\2\0\102\25\2\26\2\0"+
    "\102\26\3\0\1\133\103\0\1\250\1\251\1\27\106\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\2\11"+
    "\1\252\15\11\1\253\12\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\22\11\1\254\10\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\11"+
    "\1\255\10\11\1\256\20\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\17\11\1\257\13\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\260"+
    "\3\11\1\261\26\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\12\11\1\262\20\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\12\11\1\263"+
    "\20\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\7\11\1\264\23\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\1\11\1\265\31\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\7\11"+
    "\1\266\23\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\5\11\1\267\25\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\7\11\1\270\23\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\6\11\1\271\24\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\11\11\1\272\21\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\273\32\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\4\11\1\274\26\11\26\0\3\11\2\0\6\11\1\275"+
    "\1\11\1\0\1\11\5\0\1\100\1\11\1\276\2\11"+
    "\1\277\26\11\26\0\3\11\2\0\10\11\1\0\1\300"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\32\11\1\301\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\12\11\1\302\20\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\21\11\1\303\11\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\5\11\1\304\25\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\305\15\11"+
    "\1\306\14\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\7\11\1\307\23\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\5\11\1\310\25\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\311\5\11\1\312\24\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\4\11\1\313\26\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\314"+
    "\32\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\17\11\1\315\13\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\2\11\1\316\30\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\3\11"+
    "\1\317\1\11\1\320\2\11\1\321\22\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\322\32\11"+
    "\26\0\3\11\2\0\6\11\1\323\1\11\1\0\1\11"+
    "\5\0\1\100\12\11\1\324\20\11\26\0\3\11\2\0"+
    "\4\11\1\325\3\11\1\0\1\11\5\0\1\100\33\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\10\11\1\326\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\327\32\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\12\11\1\330\20\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\331\32\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\5\11\1\332\4\11\1\333\20\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\11"+
    "\1\334\31\11\26\0\3\11\2\0\10\11\1\0\1\335"+
    "\5\0\1\100\1\11\1\336\31\11\106\0\1\337\105\0"+
    "\1\340\4\0\1\341\15\0\1\226\26\0\1\230\77\0"+
    "\1\342\63\0\7\233\1\343\76\233\7\344\1\234\1\345"+
    "\75\344\4\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\4\11\1\346\26\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\5\11\1\347\25\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\2\11"+
    "\1\350\30\11\26\0\3\11\2\0\10\11\1\0\1\351"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\11\1\352\31\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\353\32\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\5\11\1\354\25\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\355\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\16\11\1\356\14\11\24\0"+
    "\1\251\1\27\102\0\2\27\1\132\21\27\1\134\61\27"+
    "\4\0\3\11\2\0\10\11\1\0\1\357\5\0\1\100"+
    "\33\11\26\0\3\11\2\0\6\11\1\360\1\11\1\0"+
    "\1\11\5\0\1\100\33\11\26\0\3\11\2\0\6\11"+
    "\1\361\1\11\1\0\1\11\5\0\1\100\33\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\6\11"+
    "\1\362\24\11\26\0\3\11\2\0\10\11\1\0\1\363"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\2\11\1\364\30\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\15\11\1\365"+
    "\15\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\7\11\1\366\23\11\26\0\3\11\2\0\6\11"+
    "\1\367\1\11\1\0\1\11\5\0\1\100\33\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\370"+
    "\32\11\26\0\3\11\2\0\10\11\1\0\1\371\5\0"+
    "\1\100\21\11\1\372\11\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\10\11\1\373\22\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\6\11"+
    "\1\374\24\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\4\11\1\375\26\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\376\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\2\11\1\377"+
    "\30\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\5\11\1\u0100\25\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\10\11\1\u0101\22\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\2\11"+
    "\1\u0102\30\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\u0103\32\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\u0104\5\0\1\100\33\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\u0105\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\u0106\32\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\5\11\1\u0107\25\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\12\11\1\u0108\20\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\u0109\5\0\1\100\33\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\u010a"+
    "\5\11\1\u010b\24\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\5\11\1\u010c\25\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\10\11\1\u010d"+
    "\22\11\26\0\3\11\2\0\10\11\1\0\1\u010e\5\0"+
    "\1\100\1\u010f\32\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\11\1\u0110\31\11\26\0\3\11"+
    "\2\0\1\u0111\7\11\1\0\1\u0112\5\0\1\100\7\11"+
    "\1\u0113\13\11\1\u0114\1\u0115\1\u0116\5\11\26\0\3\11"+
    "\2\0\6\11\1\u0117\1\11\1\0\1\11\5\0\1\100"+
    "\5\11\1\u0118\25\11\26\0\3\11\2\0\4\11\1\u0119"+
    "\3\11\1\0\1\11\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\4\11\1\u011a"+
    "\5\11\1\u011b\20\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\u011c\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\5\11\1\u011d\25\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\14\11"+
    "\1\u011e\16\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\u011f\32\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\30\11\1\u0120\2\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\5\11"+
    "\1\u0121\25\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\13\11\1\u0122\17\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\14\11\1\u0123\16\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\5\11\1\u0124\25\11\26\0\3\11\2\0\6\11\1\u0125"+
    "\1\11\1\0\1\11\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\4\11\1\u0126"+
    "\26\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\15\11\1\u0127\15\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\12\11\1\u0128\20\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\21\11"+
    "\1\u0129\11\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\u012a\32\11\106\0\1\u012b\26\0\1\u012c"+
    "\3\0\2\u012c\1\0\1\u012c\6\0\1\u012d\30\0\5\u012c"+
    "\25\0\7\233\1\343\1\u012e\75\233\7\344\1\u012f\76\344"+
    "\4\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\13\11\1\u0130\17\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\u0131\32\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\5\11\1\u0132\25\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\10\11\1\u0133\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\4\11\1\u0134\26\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\12\11\1\u0135"+
    "\20\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\3\11\1\u0136\27\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\21\11\1\u0137\11\11\26\0"+
    "\3\11\2\0\6\11\1\u0138\1\11\1\0\1\11\5\0"+
    "\1\100\6\11\1\u0139\6\11\1\u013a\15\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\11\1\u013b"+
    "\31\11\26\0\3\11\2\0\6\11\1\u013c\1\11\1\0"+
    "\1\11\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\22\11\1\u013d\10\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\7\11"+
    "\1\u013e\23\11\26\0\3\11\2\0\1\u013f\7\11\1\0"+
    "\1\11\5\0\1\100\7\11\1\u0140\13\11\1\u0141\1\u0142"+
    "\1\u0143\5\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\4\11\1\u0144\26\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\4\11\1\u0145\26\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\u0146\5\0\1\100"+
    "\1\u0147\32\11\26\0\3\11\2\0\10\11\1\0\1\u0148"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\5\11\1\u0149\25\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\11\1\u014a"+
    "\31\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\12\11\1\u014b\20\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\u014c\5\0\1\100\33\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\13\11\1\u014d\17\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\10\11\1\u014e\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\12\11\1\u014f\20\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\17\11\1\u0150"+
    "\13\11\26\0\3\11\2\0\6\11\1\u0151\1\11\1\0"+
    "\1\11\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\10\11\1\u0152\22\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\30\11"+
    "\1\u0153\2\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\6\11\1\u0154\24\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\12\11\1\u0155\20\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\u0156\32\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\6\11\1\u0157\24\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\14\11\1\u0158\16\11"+
    "\26\0\3\11\2\0\5\11\1\u0159\2\11\1\0\1\11"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\24\11\1\u015a\6\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\11\1\u015b"+
    "\31\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\27\11\1\u015c\3\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\26\11\1\u015d\4\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\11"+
    "\1\u015e\31\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\12\11\1\u015f\20\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\5\11\1\u0160\25\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\2\11\1\u0161\30\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\7\11\1\u0162\23\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\u0163\32\11"+
    "\26\0\3\11\2\0\6\11\1\u0164\1\11\1\0\1\11"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\u0165\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\4\11\1\u0166\26\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\12\11"+
    "\1\u0167\20\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\4\11\1\u0168\26\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\u0169\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\u016a\32\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\4\11\1\u016b\26\11\26\0\3\11\2\0\5\11\1\u016c"+
    "\2\11\1\0\1\11\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\2\11\1\u016d"+
    "\30\11\27\0\1\u012c\3\0\2\u012c\1\0\1\u012c\37\0"+
    "\5\u012c\25\0\7\344\1\u012f\1\345\75\344\4\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\12\11\1\u016e"+
    "\20\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\5\11\1\u016f\25\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\1\u0170\32\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\1\u0171\32\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\10\11\1\u0172\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\3\11\1\u0173\27\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\u0174\5\0\1\100\33\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\u0175\5\0\1\100\33\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\7\11\1\u0176\23\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\7\11\1\u0177\23\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\24\11\1\u0178"+
    "\6\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\27\11\1\u0179\3\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\26\11\1\u017a\4\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\10\11"+
    "\1\u017b\22\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\11\1\u017c\31\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\7\11\1\u017d\23\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\4\11\1\u017e\5\11\1\u017f\20\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\5\11\1\u0180\25\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\u0181\32\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\11\1\u0182\31\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\15\11\1\u0183\15\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\u0184\32\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\10\11\1\u0185\22\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\3\11\1\u0186\27\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\14\11\1\u0187\16\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\u0188\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\17\11\1\u0189\13\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\7\11"+
    "\1\u018a\23\11\26\0\3\11\2\0\6\11\1\u018b\1\11"+
    "\1\0\1\11\5\0\1\100\33\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\1\u018c\32\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\3\11"+
    "\1\u018d\27\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\u018e\32\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\10\11\1\u018f\22\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\u0190\5\0\1\100\33\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\5\11\1\u0191\25\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\u0192\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\u0193\5\0\1\100\33\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\15\11\1\u0194\15\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\10\11\1\u0195\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\u0196\32\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\10\11\1\u0197\22\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\22\11\1\u0198\10\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\12\11\1\u0199\20\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\7\11\1\u019a"+
    "\23\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\4\11\1\u019b\26\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\4\11\1\u019c\26\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\7\11"+
    "\1\u019d\23\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\4\11\1\u019e\26\11\26\0\3\11\2\0"+
    "\6\11\1\u019f\1\11\1\0\1\11\5\0\1\100\33\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\12\11\1\u01a0\20\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\1\u01a1\32\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\3\11\1\u01a2\27\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\5\11\1\u01a3\25\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\14\11\1\u01a4\16\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\15\11\1\u01a5"+
    "\15\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\2\11\1\u01a6\30\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\22\11\1\u01a7\10\11\26\0"+
    "\3\11\2\0\6\11\1\u01a8\1\11\1\0\1\11\5\0"+
    "\1\100\33\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\20\11\1\u01a9\12\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\u01aa\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\4\11\1\u01ab"+
    "\26\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\2\11\1\u01ac\30\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\3\11\1\u01ad\27\11\26\0"+
    "\3\11\2\0\6\11\1\u01ae\1\11\1\0\1\11\5\0"+
    "\1\100\33\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\4\11\1\u01af\26\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\12\11\1\u01b0\20\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\u01b1\32\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\15\11\1\u01b2\15\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\16\11\1\u01b3\14\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\1\u01b4\32\11\26\0\3\11\2\0\10\11\1\0\1\u01b5"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\u01b6\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\5\11\1\u01b7\25\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\u01b8"+
    "\32\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\6\11\1\u01b9\24\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\5\11\1\u01ba\25\11\26\0"+
    "\3\11\2\0\4\11\1\u01bb\3\11\1\0\1\11\5\0"+
    "\1\100\33\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\1\11\1\u01bc\31\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\1\u01bd\32\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\20\11"+
    "\1\u01be\12\11\26\0\3\11\2\0\10\11\1\0\1\11"+
    "\5\0\1\100\16\11\1\u01bf\14\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\11\5\0\1\100\7\11\1\u01c0\23\11"+
    "\26\0\3\11\2\0\10\11\1\0\1\11\5\0\1\100"+
    "\10\11\1\u01c1\22\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\u01c2\5\0\1\100\33\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\11\5\0\1\100\10\11\1\u01c3\22\11\26\0"+
    "\3\11\2\0\10\11\1\0\1\11\5\0\1\100\1\u01c4"+
    "\32\11\26\0\3\11\2\0\10\11\1\0\1\11\5\0"+
    "\1\100\4\11\1\u01c5\26\11\26\0\3\11\2\0\10\11"+
    "\1\0\1\u01c6\5\0\1\100\33\11\26\0\3\11\2\0"+
    "\10\11\1\0\1\u01c7\5\0\1\100\33\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\5\11\1\u01c8"+
    "\25\11\26\0\3\11\2\0\10\11\1\0\1\u01c9\5\0"+
    "\1\100\33\11\26\0\3\11\2\0\10\11\1\0\1\u01ca"+
    "\5\0\1\100\33\11\26\0\3\11\2\0\10\11\1\0"+
    "\1\11\5\0\1\100\17\11\1\u01cb\13\11\26\0\3\11"+
    "\2\0\10\11\1\0\1\11\5\0\1\100\15\11\1\u01cc"+
    "\15\11\26\0\3\11\2\0\10\11\1\0\1\u01cd\5\0"+
    "\1\100\33\11\26\0\3\11\2\0\5\11\1\u01ce\2\11"+
    "\1\0\1\11\5\0\1\100\33\11\26\0\3\11\2\0"+
    "\5\11\1\u01cf\2\11\1\0\1\11\5\0\1\100\33\11"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\46\1\6\11\3\1\3\11"+
    "\3\1\1\0\3\1\1\0\1\11\2\1\1\11\15\1"+
    "\2\11\1\1\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\11\52\1\7\11\1\1\1\11\1\1\4\11\2\0"+
    "\2\11\6\1\1\11\2\1\1\11\4\1\1\0\66\1"+
    "\2\11\1\1\2\0\1\1\1\11\105\1\1\11\1\1"+
    "\1\0\1\11\1\0\240\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[463];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    str.codePoints().iterator().forEachRemaining(new IntConsumer() {
      @Override
      public void accept(int ch) {
        int charCount = Character.charCount(ch);
        if (ch > 31 && ch < 127) {
          builder.append((char) ch);
        } else if (charCount == 1) {
          builder.append(String.format("\\u%04X", ch));
        } else {
          builder.append(String.format("\\U%06X", ch));
        }
      }
    });

    return builder.toString();
  }

  public _SpLexer() {
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 155: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { yybegin(YYINITIAL); return WHITE_SPACE; }");
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          case 156: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [100] { yybegin(YYINITIAL); return NEW_LINE; }");
            { yybegin(YYINITIAL); return NEW_LINE;
            }
          case 157: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { yybegin(YYINITIAL); return IDENTIFIER; }");
            { yybegin(YYINITIAL); return IDENTIFIER;
            }
          case 158: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { yybegin(YYINITIAL); return NUMBER_LITERAL; }");
            { yybegin(YYINITIAL); return NUMBER_LITERAL;
            }
          case 159: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { yybegin(YYINITIAL); return AT_SIGN; }");
            { yybegin(YYINITIAL); return AT_SIGN;
            }
          case 160: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { yybegin(YYINITIAL); return ASTERISK; }");
            { yybegin(YYINITIAL); return ASTERISK;
            }
          case 161: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [266] { yybegin(YYINITIAL); return SLASH; }");
            { yybegin(YYINITIAL); return SLASH;
            }
          case 162: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { yybegin(YYINITIAL); return UNDERSCORE; }");
            { yybegin(YYINITIAL); return UNDERSCORE;
            }
          case 163: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { yybegin(YYINITIAL); return PERIOD; }");
            { yybegin(YYINITIAL); return PERIOD;
            }
          case 164: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { yybegin(YYINITIAL); return MINUS; }");
            { yybegin(YYINITIAL); return MINUS;
            }
          case 165: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { yybegin(YYINITIAL); return CHARACTER_LITERAL; }");
            { yybegin(YYINITIAL); return CHARACTER_LITERAL;
            }
          case 166: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { yybegin(YYINITIAL); return STRING_LITERAL; }");
            { yybegin(YYINITIAL); return STRING_LITERAL;
            }
          case 167: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { yybegin(YYINITIAL); return PREPROCESSOR; }");
            { yybegin(YYINITIAL); return PREPROCESSOR;
            }
          case 168: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { yybegin(YYINITIAL); return COLON; }");
            { yybegin(YYINITIAL); return COLON;
            }
          case 169: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { yybegin(YYINITIAL); return ASSIGN; }");
            { yybegin(YYINITIAL); return ASSIGN;
            }
          case 170: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { yybegin(YYINITIAL); return EXCLAMATION; }");
            { yybegin(YYINITIAL); return EXCLAMATION;
            }
          case 171: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { yybegin(YYINITIAL); return VERTICAL_BAR; }");
            { yybegin(YYINITIAL); return VERTICAL_BAR;
            }
          case 172: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { yybegin(YYINITIAL); return AMPERSAND; }");
            { yybegin(YYINITIAL); return AMPERSAND;
            }
          case 173: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { yybegin(YYINITIAL); return LT; }");
            { yybegin(YYINITIAL); return LT;
            }
          case 174: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { yybegin(YYINITIAL); return GT; }");
            { yybegin(YYINITIAL); return GT;
            }
          case 175: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { yybegin(YYINITIAL); return LPAREN; }");
            { yybegin(YYINITIAL); return LPAREN;
            }
          case 176: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { yybegin(YYINITIAL); return RPAREN; }");
            { yybegin(YYINITIAL); return RPAREN;
            }
          case 177: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { yybegin(YYINITIAL); return LBRACE; }");
            { yybegin(YYINITIAL); return LBRACE;
            }
          case 178: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { yybegin(YYINITIAL); return RBRACE; }");
            { yybegin(YYINITIAL); return RBRACE;
            }
          case 179: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { yybegin(YYINITIAL); return LBRACKET; }");
            { yybegin(YYINITIAL); return LBRACKET;
            }
          case 180: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { yybegin(YYINITIAL); return RBRACKET; }");
            { yybegin(YYINITIAL); return RBRACKET;
            }
          case 181: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { yybegin(YYINITIAL); return PLUS; }");
            { yybegin(YYINITIAL); return PLUS;
            }
          case 182: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { yybegin(YYINITIAL); return PERCENT; }");
            { yybegin(YYINITIAL); return PERCENT;
            }
          case 183: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { yybegin(YYINITIAL); return CARET; }");
            { yybegin(YYINITIAL); return CARET;
            }
          case 184: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { yybegin(YYINITIAL); return COMMA; }");
            { yybegin(YYINITIAL); return COMMA;
            }
          case 185: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { yybegin(YYINITIAL); return SEMICOLON; }");
            { yybegin(YYINITIAL); return SEMICOLON;
            }
          case 186: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { yybegin(YYINITIAL); return TILDE; }");
            { yybegin(YYINITIAL); return TILDE;
            }
          case 187: break;
          case 34: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { yybegin(YYINITIAL); return TAG; }");
            { yybegin(YYINITIAL); return TAG;
            }
          case 188: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { yybegin(YYINITIAL); return MULEQ; }");
            { yybegin(YYINITIAL); return MULEQ;
            }
          case 189: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { yybegin(YYINITIAL); return C_STYLE_COMMENT; }");
            { yybegin(YYINITIAL); return C_STYLE_COMMENT;
            }
          case 190: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { yybegin(YYINITIAL); return END_OF_LINE_COMMENT; }");
            { yybegin(YYINITIAL); return END_OF_LINE_COMMENT;
            }
          case 191: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { yybegin(YYINITIAL); return DIVEQ; }");
            { yybegin(YYINITIAL); return DIVEQ;
            }
          case 192: break;
          case 39: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { yybegin(YYINITIAL); return TAG; }");
            { yybegin(YYINITIAL); return TAG;
            }
          case 193: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [269] { yybegin(YYINITIAL); return RANGE; }");
            { yybegin(YYINITIAL); return RANGE;
            }
          case 194: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { yybegin(YYINITIAL); return DECREMENT; }");
            { yybegin(YYINITIAL); return DECREMENT;
            }
          case 195: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { yybegin(YYINITIAL); return SUBEQ; }");
            { yybegin(YYINITIAL); return SUBEQ;
            }
          case 196: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [270] { yybegin(YYINITIAL); return SCOPE_RESOLUTION; }");
            { yybegin(YYINITIAL); return SCOPE_RESOLUTION;
            }
          case 197: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { yybegin(YYINITIAL); return AS; }");
            { yybegin(YYINITIAL); return AS;
            }
          case 198: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { yybegin(YYINITIAL); return IF; }");
            { yybegin(YYINITIAL); return IF;
            }
          case 199: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { yybegin(YYINITIAL); return IN; }");
            { yybegin(YYINITIAL); return IN;
            }
          case 200: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { yybegin(YYINITIAL); return DO; }");
            { yybegin(YYINITIAL); return DO;
            }
          case 201: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { yybegin(YYINITIAL); return EQUALTO; }");
            { yybegin(YYINITIAL); return EQUALTO;
            }
          case 202: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { yybegin(YYINITIAL); return NEQUALTO; }");
            { yybegin(YYINITIAL); return NEQUALTO;
            }
          case 203: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { yybegin(YYINITIAL); return OREQ; }");
            { yybegin(YYINITIAL); return OREQ;
            }
          case 204: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { yybegin(YYINITIAL); return OR; }");
            { yybegin(YYINITIAL); return OR;
            }
          case 205: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { yybegin(YYINITIAL); return ANDEQ; }");
            { yybegin(YYINITIAL); return ANDEQ;
            }
          case 206: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { yybegin(YYINITIAL); return AND; }");
            { yybegin(YYINITIAL); return AND;
            }
          case 207: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { yybegin(YYINITIAL); return LTEQ; }");
            { yybegin(YYINITIAL); return LTEQ;
            }
          case 208: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { yybegin(YYINITIAL); return SL; }");
            { yybegin(YYINITIAL); return SL;
            }
          case 209: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { yybegin(YYINITIAL); return GTEQ; }");
            { yybegin(YYINITIAL); return GTEQ;
            }
          case 210: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { yybegin(YYINITIAL); return SRA; }");
            { yybegin(YYINITIAL); return SRA;
            }
          case 211: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { yybegin(YYINITIAL); return ADDEQ; }");
            { yybegin(YYINITIAL); return ADDEQ;
            }
          case 212: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { yybegin(YYINITIAL); return INCREMENT; }");
            { yybegin(YYINITIAL); return INCREMENT;
            }
          case 213: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { yybegin(YYINITIAL); return MODEQ; }");
            { yybegin(YYINITIAL); return MODEQ;
            }
          case 214: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { yybegin(YYINITIAL); return XOREQ; }");
            { yybegin(YYINITIAL); return XOREQ;
            }
          case 215: break;
          case 62: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 2;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 3;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { yybegin(YYINITIAL); return LABEL; }");
            { yybegin(YYINITIAL); return LABEL;
            }
          case 216: break;
          case 63: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { yybegin(YYINITIAL); return IDENTIFIER; }");
            { yybegin(YYINITIAL); return IDENTIFIER;
            }
          case 217: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { yybegin(YYINITIAL); return RATIONAL_LITERAL; }");
            { yybegin(YYINITIAL); return RATIONAL_LITERAL;
            }
          case 218: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { yybegin(YYINITIAL); return DOC_COMMENT; }");
            { yybegin(YYINITIAL); return DOC_COMMENT;
            }
          case 219: break;
          case 66: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { yybegin(YYINITIAL); return UNDERSCORE; }");
            { yybegin(YYINITIAL); return UNDERSCORE;
            }
          case 220: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { yybegin(YYINITIAL); return ELLIPSIS; }");
            { yybegin(YYINITIAL); return ELLIPSIS;
            }
          case 221: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { yybegin(YYINITIAL); return TRY; }");
            { yybegin(YYINITIAL); return TRY;
            }
          case 222: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { yybegin(YYINITIAL); return FOR; }");
            { yybegin(YYINITIAL); return FOR;
            }
          case 223: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { yybegin(YYINITIAL); return LET; }");
            { yybegin(YYINITIAL); return LET;
            }
          case 224: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { yybegin(YYINITIAL); return NEW; }");
            { yybegin(YYINITIAL); return NEW;
            }
          case 225: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { yybegin(YYINITIAL); return INT; }");
            { yybegin(YYINITIAL); return INT;
            }
          case 226: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { yybegin(YYINITIAL); return VAR; }");
            { yybegin(YYINITIAL); return VAR;
            }
          case 227: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { yybegin(YYINITIAL); return SLEQ; }");
            { yybegin(YYINITIAL); return SLEQ;
            }
          case 228: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { yybegin(YYINITIAL); return SRAEQ; }");
            { yybegin(YYINITIAL); return SRAEQ;
            }
          case 229: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { yybegin(YYINITIAL); return SRL; }");
            { yybegin(YYINITIAL); return SRL;
            }
          case 230: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { yybegin(YYINITIAL); return EXIT; }");
            { yybegin(YYINITIAL); return EXIT;
            }
          case 231: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { yybegin(YYINITIAL); return ELSE; }");
            { yybegin(YYINITIAL); return ELSE;
            }
          case 232: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { yybegin(YYINITIAL); return ENUM; }");
            { yybegin(YYINITIAL); return ENUM;
            }
          case 233: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { yybegin(YYINITIAL); return TRUE; }");
            { yybegin(YYINITIAL); return TRUE;
            }
          case 234: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { yybegin(YYINITIAL); return THIS; }");
            { yybegin(YYINITIAL); return THIS;
            }
          case 235: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { yybegin(YYINITIAL); return NULL; }");
            { yybegin(YYINITIAL); return NULL;
            }
          case 236: break;
          case 83: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { yybegin(IN_CASE);   return CASE; }");
            { yybegin(IN_CASE);   return CASE;
            }
          case 237: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { yybegin(YYINITIAL); return CHAR; }");
            { yybegin(YYINITIAL); return CHAR;
            }
          case 238: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { yybegin(YYINITIAL); return INTN; }");
            { yybegin(YYINITIAL); return INTN;
            }
          case 239: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { yybegin(YYINITIAL); return INT8; }");
            { yybegin(YYINITIAL); return INT8;
            }
          case 240: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { yybegin(YYINITIAL); return DECL; }");
            { yybegin(YYINITIAL); return DECL;
            }
          case 241: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { yybegin(YYINITIAL); return WITH; }");
            { yybegin(YYINITIAL); return WITH;
            }
          case 242: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { yybegin(YYINITIAL); return GOTO; }");
            { yybegin(YYINITIAL); return GOTO;
            }
          case 243: break;
          case 90: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { yybegin(YYINITIAL); return VOID; }");
            { yybegin(YYINITIAL); return VOID;
            }
          case 244: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { yybegin(YYINITIAL); return SRLEQ; }");
            { yybegin(YYINITIAL); return SRLEQ;
            }
          case 245: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { yybegin(YYINITIAL); return BREAK; }");
            { yybegin(YYINITIAL); return BREAK;
            }
          case 246: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { yybegin(YYINITIAL); return TAGOF; }");
            { yybegin(YYINITIAL); return TAGOF;
            }
          case 247: break;
          case 94: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { yybegin(YYINITIAL); return THROW; }");
            { yybegin(YYINITIAL); return THROW;
            }
          case 248: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { yybegin(YYINITIAL); return USING; }");
            { yybegin(YYINITIAL); return USING;
            }
          case 249: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { yybegin(YYINITIAL); return UNION; }");
            { yybegin(YYINITIAL); return UNION;
            }
          case 250: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { yybegin(YYINITIAL); return UINTN; }");
            { yybegin(YYINITIAL); return UINTN;
            }
          case 251: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { yybegin(YYINITIAL); return UINT8; }");
            { yybegin(YYINITIAL); return UINT8;
            }
          case 252: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { yybegin(YYINITIAL); return FALSE; }");
            { yybegin(YYINITIAL); return FALSE;
            }
          case 253: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { yybegin(YYINITIAL); return STOCK; }");
            { yybegin(YYINITIAL); return STOCK;
            }
          case 254: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { yybegin(YYINITIAL); return SLEEP; }");
            { yybegin(YYINITIAL); return SLEEP;
            }
          case 255: break;
          case 102: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { yybegin(YYINITIAL); return CONST; }");
            { yybegin(YYINITIAL); return CONST;
            }
          case 256: break;
          case 103: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { yybegin(YYINITIAL); return CATCH; }");
            { yybegin(YYINITIAL); return CATCH;
            }
          case 257: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { yybegin(YYINITIAL); return INT16; }");
            { yybegin(YYINITIAL); return INT16;
            }
          case 258: break;
          case 105: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { yybegin(YYINITIAL); return INT64; }");
            { yybegin(YYINITIAL); return INT64;
            }
          case 259: break;
          case 106: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { yybegin(YYINITIAL); return INT32; }");
            { yybegin(YYINITIAL); return INT32;
            }
          case 260: break;
          case 107: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { yybegin(YYINITIAL); return WHILE; }");
            { yybegin(YYINITIAL); return WHILE;
            }
          case 261: break;
          case 108: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { yybegin(YYINITIAL); return OBJECT; }");
            { yybegin(YYINITIAL); return OBJECT;
            }
          case 262: break;
          case 109: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { yybegin(YYINITIAL); return TYPEOF; }");
            { yybegin(YYINITIAL); return TYPEOF;
            }
          case 263: break;
          case 110: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { yybegin(YYINITIAL); return RETURN; }");
            { yybegin(YYINITIAL); return RETURN;
            }
          case 264: break;
          case 111: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { yybegin(YYINITIAL); return UINT16; }");
            { yybegin(YYINITIAL); return UINT16;
            }
          case 265: break;
          case 112: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { yybegin(YYINITIAL); return UINT64; }");
            { yybegin(YYINITIAL); return UINT64;
            }
          case 266: break;
          case 113: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { yybegin(YYINITIAL); return UINT32; }");
            { yybegin(YYINITIAL); return UINT32;
            }
          case 267: break;
          case 114: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { yybegin(YYINITIAL); return ASSERT; }");
            { yybegin(YYINITIAL); return ASSERT;
            }
          case 268: break;
          case 115: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { yybegin(YYINITIAL); return SEALED; }");
            { yybegin(YYINITIAL); return SEALED;
            }
          case 269: break;
          case 116: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { yybegin(YYINITIAL); return STRUCT; }");
            { yybegin(YYINITIAL); return STRUCT;
            }
          case 270: break;
          case 117: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { yybegin(YYINITIAL); return STATIC; }");
            { yybegin(YYINITIAL); return STATIC;
            }
          case 271: break;
          case 118: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [177] { yybegin(YYINITIAL); return SIZEOF; }");
            { yybegin(YYINITIAL); return SIZEOF;
            }
          case 272: break;
          case 119: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { yybegin(YYINITIAL); return SWITCH; }");
            { yybegin(YYINITIAL); return SWITCH;
            }
          case 273: break;
          case 120: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { yybegin(YYINITIAL); return NATIVE; }");
            { yybegin(YYINITIAL); return NATIVE;
            }
          case 274: break;
          case 121: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { yybegin(YYINITIAL); return IMPORT; }");
            { yybegin(YYINITIAL); return IMPORT;
            }
          case 275: break;
          case 122: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { yybegin(YYINITIAL); return DOUBLE; }");
            { yybegin(YYINITIAL); return DOUBLE;
            }
          case 276: break;
          case 123: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { yybegin(YYINITIAL); return DELETE; }");
            { yybegin(YYINITIAL); return DELETE;
            }
          case 277: break;
          case 124: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { yybegin(YYINITIAL); return PUBLIC; }");
            { yybegin(YYINITIAL); return PUBLIC;
            }
          case 278: break;
          case 125: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { yybegin(YYINITIAL); return BUILTIN; }");
            { yybegin(YYINITIAL); return BUILTIN;
            }
          case 279: break;
          case 126: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { yybegin(YYINITIAL); return TYPESET; }");
            { yybegin(YYINITIAL); return TYPESET;
            }
          case 280: break;
          case 127: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { yybegin(YYINITIAL); return TYPEDEF; }");
            { yybegin(YYINITIAL); return TYPEDEF;
            }
          case 281: break;
          case 128: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { yybegin(YYINITIAL); return FOREACH; }");
            { yybegin(YYINITIAL); return FOREACH;
            }
          case 282: break;
          case 129: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { yybegin(YYINITIAL); return FORWARD; }");
            { yybegin(YYINITIAL); return FORWARD;
            }
          case 283: break;
          case 130: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { yybegin(YYINITIAL); return FUNCTAG; }");
            { yybegin(YYINITIAL); return FUNCTAG;
            }
          case 284: break;
          case 131: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { yybegin(YYINITIAL); return FINALLY; }");
            { yybegin(YYINITIAL); return FINALLY;
            }
          case 285: break;
          case 132: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { yybegin(YYINITIAL); return ACQUIRE; }");
            { yybegin(YYINITIAL); return ACQUIRE;
            }
          case 286: break;
          case 133: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { yybegin(YYINITIAL); return CELLSOF; }");
            { yybegin(YYINITIAL); return CELLSOF;
            }
          case 287: break;
          case 134: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { yybegin(YYINITIAL); return CAST_TO; }");
            { yybegin(YYINITIAL); return CAST_TO;
            }
          case 288: break;
          case 135: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { yybegin(YYINITIAL); return DEFAULT; }");
            { yybegin(YYINITIAL); return DEFAULT;
            }
          case 289: break;
          case 136: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { yybegin(YYINITIAL); return DEFINED; }");
            { yybegin(YYINITIAL); return DEFINED;
            }
          case 290: break;
          case 137: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { yybegin(YYINITIAL); return PRIVATE; }");
            { yybegin(YYINITIAL); return PRIVATE;
            }
          case 291: break;
          case 138: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { yybegin(YYINITIAL); return PACKAGE; }");
            { yybegin(YYINITIAL); return PACKAGE;
            }
          case 292: break;
          case 139: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [199] { yybegin(YYINITIAL); return VARIANT; }");
            { yybegin(YYINITIAL); return VARIANT;
            }
          case 293: break;
          case 140: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { yybegin(YYINITIAL); return VIEW_AS; }");
            { yybegin(YYINITIAL); return VIEW_AS;
            }
          case 294: break;
          case 141: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { yybegin(YYINITIAL); return VIRTUAL; }");
            { yybegin(YYINITIAL); return VIRTUAL;
            }
          case 295: break;
          case 142: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { yybegin(YYINITIAL); return OPERATOR; }");
            { yybegin(YYINITIAL); return OPERATOR;
            }
          case 296: break;
          case 143: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { yybegin(YYINITIAL); return EXPLICIT; }");
            { yybegin(YYINITIAL); return EXPLICIT;
            }
          case 297: break;
          case 144: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { yybegin(YYINITIAL); return READONLY; }");
            { yybegin(YYINITIAL); return READONLY;
            }
          case 298: break;
          case 145: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { yybegin(YYINITIAL); return FUNCENUM; }");
            { yybegin(YYINITIAL); return FUNCENUM;
            }
          case 299: break;
          case 146: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { yybegin(YYINITIAL); return FUNCTION; }");
            { yybegin(YYINITIAL); return FUNCTION;
            }
          case 300: break;
          case 147: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { yybegin(YYINITIAL); return CONTINUE; }");
            { yybegin(YYINITIAL); return CONTINUE;
            }
          case 301: break;
          case 148: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { yybegin(YYINITIAL); return IMPLICIT; }");
            { yybegin(YYINITIAL); return IMPLICIT;
            }
          case 302: break;
          case 149: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { yybegin(YYINITIAL); return VOLATILE; }");
            { yybegin(YYINITIAL); return VOLATILE;
            }
          case 303: break;
          case 150: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { yybegin(YYINITIAL); return NAMESPACE; }");
            { yybegin(YYINITIAL); return NAMESPACE;
            }
          case 304: break;
          case 151: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { yybegin(YYINITIAL); return INTERFACE; }");
            { yybegin(YYINITIAL); return INTERFACE;
            }
          case 305: break;
          case 152: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { yybegin(YYINITIAL); return METHODMAP; }");
            { yybegin(YYINITIAL); return METHODMAP;
            }
          case 306: break;
          case 153: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { yybegin(YYINITIAL); return PROTECTED; }");
            { yybegin(YYINITIAL); return PROTECTED;
            }
          case 307: break;
          case 154: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { yybegin(YYINITIAL); return NULLABLE; }");
            { yybegin(YYINITIAL); return NULLABLE;
            }
          case 308: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _SpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _SpLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _SpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
