/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.sourcemod.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;

import static net.sourcemod.sourcepawn.lexer.SpTokenTypes.*;

import java.io.Reader;
import java.util.function.IntConsumer;
import java.util.NoSuchElementException;

import java.util.Map;
import java.util.HashMap;
import java.util.PrimitiveIterator;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpLexer.flex</tt>
 */
public class _SpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BAD_WORD = 2;
  public static final int LOOKING_FOR_PATTERN = 4;
  public static final int INITIAL = 6;
  public static final int IN_PREPROCESSOR = 8;
  public static final int IN_PREPROCESSOR_STRING_PRE = 10;
  public static final int IN_PREPROCESSOR_STRING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\47\1\3\22\0\1\1\2\0\1\23\15\0\1\5\1\43\1\42\1\44\1\0\1\41"+
    "\1\0\1\40\43\0\1\4\2\0\1\21\1\0\1\16\1\6\1\24\1\32\1\14\1\15\1\37\1\31\1\26"+
    "\1\45\1\27\1\17\1\33\1\30\1\7\1\34\1\25\1\12\1\20\1\11\1\13\1\22\1\36\1\10"+
    "\1\35\1\46\12\0\1\47\242\0\2\47\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\15\6\1\11\10\6\12\12\1\13\1\14\1\13"+
    "\2\2\2\15\1\2\4\0\1\7\22\0\1\16\17\0"+
    "\1\17\1\20\4\0\1\21\20\0\1\22\4\0\1\14"+
    "\1\0\1\2\1\0\2\23\6\0\1\24\15\0\1\25"+
    "\4\0\1\26\12\0\1\27\7\0\1\30\2\0\1\31"+
    "\32\0\1\2\6\0\1\32\6\0\1\33\1\0\1\34"+
    "\1\35\17\0\1\36\10\0\1\37\1\40\2\0\1\41"+
    "\1\42\4\0\1\43\6\0\1\44\5\0\1\45\1\0"+
    "\1\46\3\0\1\47\2\0\1\50\1\0\1\51\3\0"+
    "\2\52\1\53\3\0\1\54\1\55\5\0\1\56\1\0"+
    "\1\57\1\60\2\0\1\61\10\0\1\62\3\0\1\63"+
    "\10\0\1\64\1\0\1\65\1\0\1\66\1\0\1\67"+
    "\1\70\15\0\1\71\1\0\1\72\1\73\2\0\1\74"+
    "\6\0\1\75\1\0\1\76\2\0\1\77\1\0\1\100"+
    "\1\101\1\102\7\0\1\103\1\0\1\104\1\105\1\106"+
    "\1\107\1\110\11\0\1\111\1\0\1\112\1\0\1\113"+
    "\2\0\1\114\3\0\1\115\2\0\1\116\2\0\1\117"+
    "\1\0\1\120\1\121\1\122\1\0\1\123\1\124\2\0"+
    "\1\125\1\126\1\127\2\0\1\130\1\131\2\0\1\132"+
    "\1\133\1\134\1\0\1\135\1\136\3\0\1\137\1\140"+
    "\2\0\1\141\1\142\3\0\1\143\1\144\1\145\1\146"+
    "\1\147\1\150\1\0\1\151\1\152\1\0\1\153\5\0"+
    "\1\154\1\0\1\155\1\156\1\157\1\160\1\0\1\161"+
    "\1\0\1\162\1\0\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0168\0\u0190\0\u01b8\0\u0168\0\u0168\0\u01e0"+
    "\0\u0168\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8"+
    "\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0168"+
    "\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550"+
    "\0\u0168\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668"+
    "\0\u0690\0\u06b8\0\u0168\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0168"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0230\0\u0848\0\u0870"+
    "\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30"+
    "\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70"+
    "\0\u0d98\0\u0168\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88"+
    "\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8"+
    "\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8\0\u10e0\0\u1108"+
    "\0\u0168\0\u1130\0\u1158\0\u1180\0\u0708\0\u11a8\0\u11d0\0\u11f8"+
    "\0\u1220\0\u1248\0\u1270\0\u07d0\0\u0168\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u0168\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400"+
    "\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540"+
    "\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u0168\0\u1608\0\u1630\0\u1658"+
    "\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798"+
    "\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8"+
    "\0\u1900\0\u1928\0\u0168\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0"+
    "\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30"+
    "\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70"+
    "\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d38\0\u1d60\0\u1d88"+
    "\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u0168\0\u1e50\0\u1e78\0\u1ea0"+
    "\0\u1ec8\0\u1ef0\0\u1f18\0\u0168\0\u1f40\0\u0168\0\u0168\0\u1f68"+
    "\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080\0\u20a8"+
    "\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198\0\u0168\0\u21c0"+
    "\0\u21e8\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u0168"+
    "\0\u0168\0\u2300\0\u2328\0\u0168\0\u0168\0\u2350\0\u2378\0\u23a0"+
    "\0\u23c8\0\u0168\0\u23f0\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8"+
    "\0\u0168\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580\0\u0168\0\u25a8"+
    "\0\u0168\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698\0\u0168"+
    "\0\u26c0\0\u0168\0\u26e8\0\u2710\0\u2738\0\u2760\0\u2788\0\u0168"+
    "\0\u27b0\0\u27d8\0\u2800\0\u0168\0\u0168\0\u2828\0\u2850\0\u2878"+
    "\0\u28a0\0\u28c8\0\u0168\0\u28f0\0\u0168\0\u0168\0\u2918\0\u2940"+
    "\0\u0168\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58"+
    "\0\u2a80\0\u0168\0\u2aa8\0\u2ad0\0\u2af8\0\u0168\0\u2b20\0\u2b48"+
    "\0\u2b70\0\u2b98\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u0168\0\u2c60"+
    "\0\u0168\0\u2c88\0\u0168\0\u2cb0\0\u0168\0\u0168\0\u2cd8\0\u2d00"+
    "\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8\0\u2df0\0\u2e18\0\u2e40"+
    "\0\u2e68\0\u2e90\0\u2eb8\0\u0168\0\u2ee0\0\u0168\0\u0168\0\u2f08"+
    "\0\u2f30\0\u0168\0\u2f58\0\u2f80\0\u2fa8\0\u2fd0\0\u2ff8\0\u3020"+
    "\0\u0168\0\u3048\0\u0168\0\u3070\0\u3098\0\u0168\0\u30c0\0\u0168"+
    "\0\u0168\0\u0168\0\u30e8\0\u3110\0\u3138\0\u3160\0\u3188\0\u31b0"+
    "\0\u31d8\0\u0168\0\u3200\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168"+
    "\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0\0\u3318\0\u3340"+
    "\0\u3368\0\u0168\0\u3390\0\u0168\0\u33b8\0\u0168\0\u33e0\0\u3408"+
    "\0\u0168\0\u3430\0\u3458\0\u3480\0\u0168\0\u34a8\0\u34d0\0\u0168"+
    "\0\u34f8\0\u3520\0\u0168\0\u3548\0\u0168\0\u0168\0\u0168\0\u3570"+
    "\0\u0168\0\u0168\0\u3598\0\u35c0\0\u0168\0\u0168\0\u0168\0\u35e8"+
    "\0\u3610\0\u0168\0\u0168\0\u3638\0\u3660\0\u0168\0\u0168\0\u0168"+
    "\0\u3688\0\u0168\0\u0168\0\u36b0\0\u36d8\0\u3700\0\u0168\0\u0168"+
    "\0\u3728\0\u3750\0\u0168\0\u0168\0\u3778\0\u37a0\0\u37c8\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u0168\0\u37f0\0\u0168\0\u0168"+
    "\0\u3818\0\u0168\0\u3840\0\u3868\0\u3890\0\u38b8\0\u38e0\0\u0168"+
    "\0\u3908\0\u0168\0\u0168\0\u0168\0\u0168\0\u3930\0\u0168\0\u3958"+
    "\0\u0168\0\u3980\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\50\12\1\13\3\14\44\13\1\15\3\16\44\15\1\17"+
    "\1\20\1\21\1\22\1\23\1\17\1\24\1\25\1\17"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\17\1\42\1\17\1\43"+
    "\1\17\1\44\1\45\1\46\1\17\1\47\1\50\10\17"+
    "\11\51\1\52\1\51\1\53\1\54\1\55\1\56\1\57"+
    "\6\51\1\60\3\51\1\61\1\51\1\62\13\51\1\63"+
    "\1\64\2\63\1\65\43\63\1\66\1\67\1\70\1\71"+
    "\1\72\42\66\1\13\2\73\2\0\43\73\2\0\1\11"+
    "\1\74\1\75\115\0\3\14\44\0\1\15\3\0\44\15"+
    "\1\0\1\20\2\0\1\76\45\0\1\21\46\0\1\76"+
    "\1\20\1\77\56\0\1\100\1\101\42\0\1\102\25\0"+
    "\1\103\25\0\1\104\3\0\1\105\12\0\1\106\3\0"+
    "\1\107\26\0\1\110\53\0\1\111\5\0\1\112\1\0"+
    "\1\113\27\0\1\114\6\0\1\115\10\0\1\116\26\0"+
    "\1\117\3\0\1\120\12\0\1\121\41\0\1\122\3\0"+
    "\1\123\37\0\1\124\44\0\1\125\2\0\1\126\2\0"+
    "\1\127\6\0\1\130\7\0\1\131\32\0\1\132\35\0"+
    "\1\133\6\0\1\134\7\0\1\135\30\0\1\136\4\0"+
    "\1\137\1\0\1\140\12\0\1\141\33\0\1\142\12\0"+
    "\1\143\2\0\1\144\27\0\1\145\1\146\1\0\1\147"+
    "\40\0\1\150\4\0\1\151\47\0\1\152\45\0\1\153"+
    "\1\154\2\0\1\155\57\0\1\156\2\0\1\157\25\0"+
    "\1\160\52\0\1\161\65\0\1\162\31\0\1\163\4\0"+
    "\1\164\10\0\1\165\45\0\1\166\41\0\1\167\55\0"+
    "\1\170\36\0\1\171\12\0\1\172\33\0\1\173\45\0"+
    "\1\174\36\0\1\64\2\0\1\175\44\0\1\175\1\64"+
    "\1\176\45\0\1\177\46\0\1\13\1\200\1\70\1\71"+
    "\43\13\3\0\1\70\46\0\1\201\1\202\1\203\45\0"+
    "\1\204\47\0\1\75\1\0\1\75\1\205\44\0\1\75"+
    "\2\0\1\205\44\0\2\20\1\0\1\76\57\0\1\206"+
    "\61\0\1\207\66\0\1\210\16\0\1\211\70\0\1\212"+
    "\51\0\1\213\22\0\1\214\13\0\1\215\55\0\1\216"+
    "\24\0\1\217\4\0\1\220\57\0\1\221\51\0\1\222"+
    "\45\0\1\223\47\0\1\224\5\0\1\225\33\0\1\226"+
    "\42\0\1\227\46\0\1\230\65\0\1\231\47\0\1\232"+
    "\37\0\1\233\54\0\1\234\33\0\1\235\45\0\1\236"+
    "\2\0\1\237\3\0\1\240\47\0\1\241\45\0\1\242"+
    "\101\0\1\243\27\0\1\244\51\0\1\245\36\0\1\246"+
    "\6\0\1\247\33\0\1\250\47\0\1\251\1\0\1\252"+
    "\63\0\1\253\36\0\1\254\41\0\1\255\6\0\1\256"+
    "\45\0\1\257\42\0\1\260\72\0\1\261\32\0\1\262"+
    "\66\0\1\263\22\0\1\264\21\0\1\265\27\0\1\266"+
    "\51\0\1\267\1\0\1\270\4\0\1\271\34\0\1\272"+
    "\45\0\1\273\16\0\1\274\27\0\1\275\65\0\1\276"+
    "\34\0\1\277\64\0\1\300\32\0\1\301\73\0\1\302"+
    "\44\0\1\303\27\0\1\304\55\0\1\305\61\0\1\306"+
    "\34\0\1\307\50\0\1\310\57\0\1\311\43\0\1\312"+
    "\40\0\1\313\50\0\1\314\32\0\2\64\1\0\1\175"+
    "\44\0\1\177\2\0\1\315\43\0\1\13\1\200\1\70"+
    "\1\71\1\316\42\13\2\0\1\201\1\202\1\203\1\315"+
    "\44\0\1\202\47\0\2\202\63\0\1\317\50\0\1\320"+
    "\44\0\1\321\45\0\1\322\44\0\1\323\47\0\1\324"+
    "\60\0\1\325\43\0\1\326\46\0\1\327\66\0\1\330"+
    "\45\0\1\331\30\0\1\332\45\0\1\333\51\0\1\334"+
    "\55\0\1\335\44\0\1\336\66\0\1\337\30\0\1\340"+
    "\21\0\1\341\35\0\1\342\41\0\1\343\45\0\1\344"+
    "\46\0\1\345\60\0\1\346\36\0\1\347\45\0\1\350"+
    "\55\0\1\351\44\0\1\352\47\0\1\353\44\0\1\354"+
    "\51\0\1\355\52\0\1\356\63\0\1\357\43\0\1\360"+
    "\32\0\1\361\74\0\1\362\22\0\1\363\6\0\1\364"+
    "\46\0\1\365\54\0\1\366\34\0\1\367\2\0\1\370"+
    "\45\0\1\371\42\0\1\372\6\0\1\373\13\0\1\374"+
    "\7\0\1\375\1\376\1\377\14\0\1\u0100\7\0\1\u0101"+
    "\47\0\1\u0102\56\0\1\u0103\35\0\1\u0104\41\0\1\u0105"+
    "\57\0\1\u0106\7\0\1\u0107\35\0\1\u0108\52\0\1\u0109"+
    "\61\0\1\u010a\27\0\1\u010b\60\0\1\u010c\44\0\1\u010d"+
    "\57\0\1\u010e\51\0\1\u010f\35\0\1\u0110\37\0\1\u0111"+
    "\66\0\1\u0112\35\0\1\u0113\42\0\1\u0114\54\0\1\u0115"+
    "\53\0\1\u0116\5\0\1\u0117\35\0\1\u0118\47\0\1\u0119"+
    "\47\0\1\u011a\52\0\1\u011b\56\0\1\u011c\60\0\1\u011d"+
    "\11\0\1\315\1\u011e\1\u011f\73\0\1\u0120\31\0\1\u0121"+
    "\62\0\1\u0122\41\0\1\u0123\46\0\1\u0124\70\0\1\u0125"+
    "\20\0\1\u0126\10\0\1\u0127\11\0\1\u0128\27\0\1\u0129"+
    "\44\0\1\u012a\77\0\1\u012b\15\0\1\u012c\22\0\1\u012d"+
    "\7\0\1\u012e\1\u012f\1\u0130\35\0\1\u0131\45\0\1\u0132"+
    "\37\0\1\u0133\47\0\1\u0134\42\0\1\u0135\2\0\1\u0136"+
    "\52\0\1\u0137\42\0\1\u0138\63\0\1\u0139\50\0\1\u013a"+
    "\44\0\1\u013b\51\0\1\u013c\35\0\1\u013d\67\0\1\u013e"+
    "\22\0\1\u013f\64\0\1\u0140\42\0\1\u0141\41\0\1\u0142"+
    "\54\0\1\u0143\44\0\1\u0144\55\0\1\u0145\54\0\1\u0146"+
    "\32\0\1\u0147\56\0\1\u0148\60\0\1\u0149\37\0\1\u014a"+
    "\67\0\1\u014b\20\0\1\u014c\101\0\1\u014d\46\0\1\u014e"+
    "\16\0\1\u014f\63\0\1\u0150\43\0\1\u0151\45\0\1\u0152"+
    "\46\0\1\u0153\43\0\1\u0154\64\0\1\u0155\30\0\1\u0156"+
    "\45\0\1\u0157\54\0\1\u0158\51\0\1\u0159\57\0\1\u015a"+
    "\37\0\1\u015b\45\0\1\u015c\63\0\1\u015d\34\0\1\u015e"+
    "\44\0\1\u015f\63\0\1\u0160\45\0\1\u0161\40\0\1\u0162"+
    "\12\0\1\u0163\31\0\1\u0164\50\0\1\u0165\64\0\1\u0166"+
    "\52\0\1\u0167\15\0\1\u011e\47\0\2\u011e\73\0\1\u0168"+
    "\32\0\1\u0169\47\0\1\u016a\53\0\1\u016b\46\0\1\u016c"+
    "\47\0\1\u016d\63\0\1\u016e\47\0\1\u016f\60\0\1\u0170"+
    "\52\0\1\u0171\46\0\1\u0172\30\0\1\u0173\47\0\1\u0174"+
    "\35\0\1\u0175\53\0\1\u0176\7\0\1\u0177\51\0\1\u0178"+
    "\36\0\1\u0179\41\0\1\u017a\50\0\1\u017b\46\0\1\u017c"+
    "\62\0\1\u017d\55\0\1\u017e\32\0\1\u017f\63\0\1\u0180"+
    "\35\0\1\u0181\56\0\1\u0182\51\0\1\u0183\35\0\1\u0184"+
    "\47\0\1\u0185\61\0\1\u0186\26\0\1\u0187\51\0\1\u0188"+
    "\53\0\1\u0189\43\0\1\u018a\62\0\1\u018b\37\0\1\u018c"+
    "\67\0\1\u018d\27\0\1\u018e\52\0\1\u018f\44\0\1\u0190"+
    "\47\0\1\u0191\65\0\1\u0192\41\0\1\u0193\34\0\1\u0194"+
    "\62\0\1\u0195\62\0\1\u0196\34\0\1\u0197\40\0\1\u0198"+
    "\44\0\1\u0199\71\0\1\u019a\24\0\1\u019b\70\0\1\u019c"+
    "\31\0\1\u019d\51\0\1\u019e\61\0\1\u019f\26\0\1\u01a0"+
    "\51\0\1\u01a1\53\0\1\u01a2\51\0\1\u01a3\56\0\1\u01a4"+
    "\52\0\1\u01a5\50\0\1\u01a6\54\0\1\u01a7\17\0\1\u01a8"+
    "\53\0\1\u01a9\71\0\1\u01aa\26\0\1\u01ab\51\0\1\u01ac"+
    "\50\0\1\u01ad\41\0\1\u01ae\55\0\1\u01af\50\0\1\u01b0"+
    "\42\0\1\u01b1\51\0\1\u01b2\41\0\1\u01b3\56\0\1\u01b4"+
    "\57\0\1\u01b5\37\0\1\u01b6\42\0\1\u01b7\70\0\1\u01b8"+
    "\50\0\1\u01b9\25\0\1\u01ba\52\0\1\u01bb\47\0\1\u01bc"+
    "\52\0\1\u01bd\56\0\1\u01be\34\0\1\u01bf\50\0\1\u01c0"+
    "\45\0\1\u01c1\72\0\1\u01c2\23\0\1\u01c3\66\0\1\u01c4"+
    "\52\0\1\u01c5\22\0\1\u01c6\55\0\1\u01c7\47\0\1\u01c8"+
    "\57\0\1\u01c9\34\0\1\u01ca\62\0\1\u01cb\41\0\1\u01cc"+
    "\45\0\1\u01cd\46\0\1\u01ce\70\0\1\u01cf\24\0\1\u01d0"+
    "\55\0\1\u01d1\44\0\1\u01d2\47\0\1\u01d3\67\0\1\u01d4"+
    "\45\0\1\u01d5\47\0\1\u01d6\26\0\1\u01d7\52\0\1\u01d8"+
    "\47\0\1\u01d9\54\0\1\u01da\47\0\1\u01db\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14760];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\2\11\2\1\2\11\1\1\1\11\16\1\1\11"+
    "\10\1\1\11\11\1\1\11\4\1\1\11\2\1\4\0"+
    "\1\1\22\0\1\1\17\0\1\11\1\1\4\0\1\1"+
    "\20\0\1\11\4\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\4\0\1\11\15\0\1\1\4\0\1\11\12\0"+
    "\1\1\7\0\1\1\2\0\1\11\32\0\1\1\6\0"+
    "\1\11\6\0\1\11\1\0\2\11\17\0\1\11\10\0"+
    "\2\11\2\0\2\11\4\0\1\11\6\0\1\11\5\0"+
    "\1\11\1\0\1\11\3\0\1\1\2\0\1\11\1\0"+
    "\1\11\3\0\2\1\1\11\3\0\2\11\5\0\1\11"+
    "\1\0\2\11\2\0\1\11\10\0\1\11\3\0\1\11"+
    "\10\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\15\0\1\11\1\0\2\11\2\0\1\11\6\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\3\11\7\0\1\11"+
    "\1\0\5\11\11\0\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\2\0\1\11\2\0\1\11"+
    "\1\0\3\11\1\0\2\11\2\0\3\11\2\0\2\11"+
    "\2\0\3\11\1\0\2\11\3\0\2\11\2\0\2\11"+
    "\3\0\6\11\1\0\2\11\1\0\1\11\5\0\1\11"+
    "\1\0\4\11\1\0\1\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static final boolean DEBUG = true;

  private static final int DEFAULT_ESCAPE_CHARACTER = '\\';

  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    str.codePoints().iterator().forEachRemaining(new IntConsumer() {
      @Override
      public void accept(int ch) {
        int charCount = Character.charCount(ch);
        if (ch > 31 && ch < 127) {
          builder.append((char) ch);
        } else if (charCount == 1) {
          builder.append(String.format("\\u%04X", ch));
        } else {
          builder.append(String.format("\\U%06X", ch));
        }
      }
    });

    return builder.toString();
  }

  final Map<CharSequence, CharSequence> SUBSTITUTIONS = new HashMap<>();

  private final StringBuilder string = new StringBuilder(32);
  private final StringBuilder escapeSequence = new StringBuilder(8);
  private int escapedCodePoint;

  private IElementType BAD_WORD_REASON;
  private IElementType BAD_LINE_REASON;

  private int GOTO_AFTER_ESCAPE_SEQUENCE;

  private boolean isPreprocessorUndef;

  private int escapeCharacter;

  private Object value;

  public _SpLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
  }

  public int getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(int codePoint) {
    if (getEscapeCharacter() != codePoint) {
      this.escapeCharacter = codePoint;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", codePoint);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(int codePoint) {
    return codePoint == getEscapeCharacter();
  }

  private void prepareInlineEscapeSequence(int GOTO_AFTER_ESCAPE_SEQUENCE) {
    this.GOTO_AFTER_ESCAPE_SEQUENCE = GOTO_AFTER_ESCAPE_SEQUENCE;
    escapedCodePoint = 0;
    escapeSequence.setLength(0);
    escapeSequence.appendCodePoint(getEscapeCharacter());
  }

  private void gotoBadWord(IElementType BAD_WORD_REASON) {
    this.BAD_WORD_REASON = BAD_WORD_REASON;
    string.setLength(0);
    yybegin(IN_BAD_WORD);
  }

  /*private void gotoBadLine(int BAD_LINE_REASON) {
    this.BAD_LINE_REASON = BAD_LINE_REASON;
    string.setLength(0);
    yybegin(IN_BAD_LINE);
  }*/

  private int codePointAt(int index) {
    final int length = yylength();
    if (index >= length) {
        throw new NoSuchElementException();
    }

    char c1 = zzBuffer.charAt(zzStartRead + index);
    index++;
    if (Character.isHighSurrogate(c1) && index < length) {
        char c2 = zzBuffer.charAt(zzStartRead + index);
        if (Character.isLowSurrogate(c2)) {
            return Character.toCodePoint(c1, c2);
        }
    }

    return c1;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SpLexer(java.io.Reader in) {
    SUBSTITUTIONS.put("__BINARY_PATH__", "path");
  SUBSTITUTIONS.put("__BINARY_NAME__", "name");
  SUBSTITUTIONS.put("__DATE__", "date");
  SUBSTITUTIONS.put("__TIME__", "time");

  resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_BAD_WORD: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [373] { value = string.toString();"+ZZ_NL+"                           if (DEBUG) {"+ZZ_NL+"                             System.out.printf(\"%s = %s%n\", BAD_WORD_REASON, value);"+ZZ_NL+"                           }"+ZZ_NL+""+ZZ_NL+"                           yypushback(yylength()); yybegin(YYINITIAL);"+ZZ_NL+"                           return BAD_WORD_REASON; }");
              value = string.toString();
                           if (DEBUG) {
                             System.out.printf("%s = %s%n", BAD_WORD_REASON, value);
                           }

                           yypushback(yylength()); yybegin(YYINITIAL);
                           return BAD_WORD_REASON;
            }
            case 476: break;
            case IN_PREPROCESSOR: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [361] { yypushback(yylength()); gotoBadWord(INVALID_PREPROCESSOR_DIRECTIVE); }");
              yypushback(yylength()); gotoBadWord(INVALID_PREPROCESSOR_DIRECTIVE);
            }
            case 477: break;
            case IN_PREPROCESSOR_STRING_PRE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [393] { yypushback(yylength()); yybegin(YYINITIAL); }");
              yypushback(yylength()); yybegin(YYINITIAL);
            }
            case 478: break;
            case IN_PREPROCESSOR_STRING: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [408] { value = string.toString().trim();"+ZZ_NL+"                           if (DEBUG && !((String)value).isEmpty()) {"+ZZ_NL+"                             System.out.printf(\"message = %s%n\", value);"+ZZ_NL+"                           }"+ZZ_NL+""+ZZ_NL+"                           yypushback(yylength()); yybegin(YYINITIAL);"+ZZ_NL+"                           if (!((String)value).isEmpty()) {"+ZZ_NL+"                             return PREPROCESSOR_STRING;"+ZZ_NL+"                           } }");
              value = string.toString().trim();
                           if (DEBUG && !((String)value).isEmpty()) {
                             System.out.printf("message = %s%n", value);
                           }

                           yypushback(yylength()); yybegin(YYINITIAL);
                           if (!((String)value).isEmpty()) {
                             return PREPROCESSOR_STRING;
                           }
            }
            case 479: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { yypushback(yylength()); yybegin(LOOKING_FOR_PATTERN); }");
            { yypushback(yylength()); yybegin(LOOKING_FOR_PATTERN);
            }
          case 116: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [380] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 117: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [373] { value = string.toString();"+ZZ_NL+"                           if (DEBUG) {"+ZZ_NL+"                             System.out.printf(\"%s = %s%n\", BAD_WORD_REASON, value);"+ZZ_NL+"                           }"+ZZ_NL+""+ZZ_NL+"                           yypushback(yylength()); yybegin(YYINITIAL);"+ZZ_NL+"                           return BAD_WORD_REASON; }");
            { value = string.toString();
                           if (DEBUG) {
                             System.out.printf("%s = %s%n", BAD_WORD_REASON, value);
                           }

                           yypushback(yylength()); yybegin(YYINITIAL);
                           return BAD_WORD_REASON;
            }
          case 118: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (!SpUtils.isAlpha(codePoint)) {"+ZZ_NL+"                            yypushback(yylength()); yybegin(INITIAL);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            string.setLength(0);"+ZZ_NL+"                            int offset = 0;"+ZZ_NL+"                            CharSequence pattern = yytext();"+ZZ_NL+"                            PrimitiveIterator.OfInt iterator = pattern.codePoints().iterator();"+ZZ_NL+"                            while (iterator.hasNext()) {"+ZZ_NL+"                              codePoint = iterator.nextInt();"+ZZ_NL+"                              if (SpUtils.isAlphaNumeric(codePoint)) {"+ZZ_NL+"                                string.appendCodePoint(codePoint);"+ZZ_NL+"                              } else {"+ZZ_NL+"                                break;"+ZZ_NL+"                              }"+ZZ_NL+"                            }"+ZZ_NL+""+ZZ_NL+"                            if (SUBSTITUTIONS.containsKey(string)) {"+ZZ_NL+"                              if (DEBUG) {"+ZZ_NL+"                                System.out.printf(\"pattern prefix = %s%n\", string);"+ZZ_NL+"                              }"+ZZ_NL+""+ZZ_NL+"                              return DEFINED_PATTERN_PREFIX;"+ZZ_NL+"                            } else {"+ZZ_NL+"                              yypushback(yylength()); yybegin(INITIAL);"+ZZ_NL+"                            }"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (!SpUtils.isAlpha(codePoint)) {
                            yypushback(yylength()); yybegin(INITIAL);
                          } else {
                            string.setLength(0);
                            int offset = 0;
                            CharSequence pattern = yytext();
                            PrimitiveIterator.OfInt iterator = pattern.codePoints().iterator();
                            while (iterator.hasNext()) {
                              codePoint = iterator.nextInt();
                              if (SpUtils.isAlphaNumeric(codePoint)) {
                                string.appendCodePoint(codePoint);
                              } else {
                                break;
                              }
                            }

                            if (SUBSTITUTIONS.containsKey(string)) {
                              if (DEBUG) {
                                System.out.printf("pattern prefix = %s%n", string);
                              }

                              return DEFINED_PATTERN_PREFIX;
                            } else {
                              yypushback(yylength()); yybegin(INITIAL);
                            }
                          }
            }
          case 119: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { yypushback(yylength()); yybegin(INITIAL); }");
            { yypushback(yylength()); yybegin(INITIAL);
            }
          case 120: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [340] { yybegin(LOOKING_FOR_PATTERN); return BAD_CHARACTER; }");
            { yybegin(LOOKING_FOR_PATTERN); return BAD_CHARACTER;
            }
          case 121: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [337] { yybegin(LOOKING_FOR_PATTERN); return WHITE_SPACE; }");
            { yybegin(LOOKING_FOR_PATTERN); return WHITE_SPACE;
            }
          case 122: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [338] { yybegin(LOOKING_FOR_PATTERN); return NEW_LINE; }");
            { yybegin(LOOKING_FOR_PATTERN); return NEW_LINE;
            }
          case 123: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { yybegin(IN_PREPROCESSOR); return HASH; }");
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 124: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [361] { yypushback(yylength()); gotoBadWord(INVALID_PREPROCESSOR_DIRECTIVE); }");
            { yypushback(yylength()); gotoBadWord(INVALID_PREPROCESSOR_DIRECTIVE);
            }
          case 125: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [393] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 126: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [390] { string.setLength(0); yybegin(IN_PREPROCESSOR_STRING);"+ZZ_NL+"                           return WHITE_SPACE; }");
            { string.setLength(0); yybegin(IN_PREPROCESSOR_STRING);
                           return WHITE_SPACE;
            }
          case 127: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [408] { value = string.toString().trim();"+ZZ_NL+"                           if (DEBUG && !((String)value).isEmpty()) {"+ZZ_NL+"                             System.out.printf(\"message = %s%n\", value);"+ZZ_NL+"                           }"+ZZ_NL+""+ZZ_NL+"                           yypushback(yylength()); yybegin(YYINITIAL);"+ZZ_NL+"                           if (!((String)value).isEmpty()) {"+ZZ_NL+"                             return PREPROCESSOR_STRING;"+ZZ_NL+"                           } }");
            { value = string.toString().trim();
                           if (DEBUG && !((String)value).isEmpty()) {
                             System.out.printf("message = %s%n", value);
                           }

                           yypushback(yylength()); yybegin(YYINITIAL);
                           if (!((String)value).isEmpty()) {
                             return PREPROCESSOR_STRING;
                           }
            }
          case 128: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { yybegin(LOOKING_FOR_PATTERN); return AS; }");
            { yybegin(LOOKING_FOR_PATTERN); return AS;
            }
          case 129: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { yybegin(LOOKING_FOR_PATTERN); return IF; }");
            { yybegin(LOOKING_FOR_PATTERN); return IF;
            }
          case 130: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { yybegin(LOOKING_FOR_PATTERN); return IN; }");
            { yybegin(LOOKING_FOR_PATTERN); return IN;
            }
          case 131: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { yybegin(LOOKING_FOR_PATTERN); return DO; }");
            { yybegin(LOOKING_FOR_PATTERN); return DO;
            }
          case 132: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [353] { yybegin(YYINITIAL); return PREPROCESSOR_IF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 133: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [406] { /* ignore whitespace */ }");
            { /* ignore whitespace */
            }
          case 134: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [316] { yybegin(LOOKING_FOR_PATTERN); return TRY; }");
            { yybegin(LOOKING_FOR_PATTERN); return TRY;
            }
          case 135: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [272] { yybegin(LOOKING_FOR_PATTERN); return FOR; }");
            { yybegin(LOOKING_FOR_PATTERN); return FOR;
            }
          case 136: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [290] { yybegin(LOOKING_FOR_PATTERN); return LET; }");
            { yybegin(LOOKING_FOR_PATTERN); return LET;
            }
          case 137: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [327] { yybegin(LOOKING_FOR_PATTERN); return VAR; }");
            { yybegin(LOOKING_FOR_PATTERN); return VAR;
            }
          case 138: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { yybegin(LOOKING_FOR_PATTERN); return INT; }");
            { yybegin(LOOKING_FOR_PATTERN); return INT;
            }
          case 139: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { yybegin(LOOKING_FOR_PATTERN); return NEW; }");
            { yybegin(LOOKING_FOR_PATTERN); return NEW;
            }
          case 140: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [314] { yybegin(LOOKING_FOR_PATTERN); return THIS; }");
            { yybegin(LOOKING_FOR_PATTERN); return THIS;
            }
          case 141: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [269] { yybegin(LOOKING_FOR_PATTERN); return EXIT; }");
            { yybegin(LOOKING_FOR_PATTERN); return EXIT;
            }
          case 142: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [266] { yybegin(LOOKING_FOR_PATTERN); return ELSE; }");
            { yybegin(LOOKING_FOR_PATTERN); return ELSE;
            }
          case 143: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { yybegin(LOOKING_FOR_PATTERN); return ENUM; }");
            { yybegin(LOOKING_FOR_PATTERN); return ENUM;
            }
          case 144: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [331] { yybegin(LOOKING_FOR_PATTERN); return VOID; }");
            { yybegin(LOOKING_FOR_PATTERN); return VOID;
            }
          case 145: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { yybegin(LOOKING_FOR_PATTERN); return CASE; }");
            { yybegin(LOOKING_FOR_PATTERN); return CASE;
            }
          case 146: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { yybegin(LOOKING_FOR_PATTERN); return CHAR; }");
            { yybegin(LOOKING_FOR_PATTERN); return CHAR;
            }
          case 147: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [289] { yybegin(LOOKING_FOR_PATTERN); return INTN; }");
            { yybegin(LOOKING_FOR_PATTERN); return INTN;
            }
          case 148: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { yybegin(LOOKING_FOR_PATTERN); return INT8; }");
            { yybegin(LOOKING_FOR_PATTERN); return INT8;
            }
          case 149: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { yybegin(LOOKING_FOR_PATTERN); return NULL; }");
            { yybegin(LOOKING_FOR_PATTERN); return NULL;
            }
          case 150: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { yybegin(LOOKING_FOR_PATTERN); return DECL; }");
            { yybegin(LOOKING_FOR_PATTERN); return DECL;
            }
          case 151: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [334] { yybegin(LOOKING_FOR_PATTERN); return WITH; }");
            { yybegin(LOOKING_FOR_PATTERN); return WITH;
            }
          case 152: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { yybegin(LOOKING_FOR_PATTERN); return GOTO; }");
            { yybegin(LOOKING_FOR_PATTERN); return GOTO;
            }
          case 153: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [346] { yybegin(INITIAL); return PREPROCESSOR_ELSE; }");
            { yybegin(INITIAL); return PREPROCESSOR_ELSE;
            }
          case 154: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [352] { yybegin(YYINITIAL); return PREPROCESSOR_FILE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 155: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [355] { yybegin(YYINITIAL); return PREPROCESSOR_LINE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 156: break;
          case 42: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 7;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 8;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [405] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 157: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { yybegin(LOOKING_FOR_PATTERN); return BREAK; }");
            { yybegin(LOOKING_FOR_PATTERN); return BREAK;
            }
          case 158: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { yybegin(LOOKING_FOR_PATTERN); return TAGOF; }");
            { yybegin(LOOKING_FOR_PATTERN); return TAGOF;
            }
          case 159: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { yybegin(LOOKING_FOR_PATTERN); return THROW; }");
            { yybegin(LOOKING_FOR_PATTERN); return THROW;
            }
          case 160: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { yybegin(LOOKING_FOR_PATTERN); return USING; }");
            { yybegin(LOOKING_FOR_PATTERN); return USING;
            }
          case 161: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { yybegin(LOOKING_FOR_PATTERN); return UINTN; }");
            { yybegin(LOOKING_FOR_PATTERN); return UINTN;
            }
          case 162: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [320] { yybegin(LOOKING_FOR_PATTERN); return UINT8; }");
            { yybegin(LOOKING_FOR_PATTERN); return UINT8;
            }
          case 163: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [325] { yybegin(LOOKING_FOR_PATTERN); return UNION; }");
            { yybegin(LOOKING_FOR_PATTERN); return UNION;
            }
          case 164: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [309] { yybegin(LOOKING_FOR_PATTERN); return STOCK; }");
            { yybegin(LOOKING_FOR_PATTERN); return STOCK;
            }
          case 165: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [307] { yybegin(LOOKING_FOR_PATTERN); return SLEEP; }");
            { yybegin(LOOKING_FOR_PATTERN); return SLEEP;
            }
          case 166: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { yybegin(LOOKING_FOR_PATTERN); return CONST; }");
            { yybegin(LOOKING_FOR_PATTERN); return CONST;
            }
          case 167: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { yybegin(LOOKING_FOR_PATTERN); return CATCH; }");
            { yybegin(LOOKING_FOR_PATTERN); return CATCH;
            }
          case 168: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { yybegin(LOOKING_FOR_PATTERN); return INT16; }");
            { yybegin(LOOKING_FOR_PATTERN); return INT16;
            }
          case 169: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { yybegin(LOOKING_FOR_PATTERN); return INT64; }");
            { yybegin(LOOKING_FOR_PATTERN); return INT64;
            }
          case 170: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { yybegin(LOOKING_FOR_PATTERN); return INT32; }");
            { yybegin(LOOKING_FOR_PATTERN); return INT32;
            }
          case 171: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { yybegin(LOOKING_FOR_PATTERN); return WHILE; }");
            { yybegin(LOOKING_FOR_PATTERN); return WHILE;
            }
          case 172: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [358] { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 173: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [351] { yybegin(IN_PREPROCESSOR_STRING_PRE); return PREPROCESSOR_ERROR; }");
            { yybegin(IN_PREPROCESSOR_STRING_PRE); return PREPROCESSOR_ERROR;
            }
          case 174: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [348] { yybegin(INITIAL); return PREPROCESSOR_ENDIF; }");
            { yybegin(INITIAL); return PREPROCESSOR_ENDIF;
            }
          case 175: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [297] { yybegin(LOOKING_FOR_PATTERN); return OBJECT; }");
            { yybegin(LOOKING_FOR_PATTERN); return OBJECT;
            }
          case 176: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [318] { yybegin(LOOKING_FOR_PATTERN); return TYPEOF; }");
            { yybegin(LOOKING_FOR_PATTERN); return TYPEOF;
            }
          case 177: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [304] { yybegin(LOOKING_FOR_PATTERN); return RETURN; }");
            { yybegin(LOOKING_FOR_PATTERN); return RETURN;
            }
          case 178: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [321] { yybegin(LOOKING_FOR_PATTERN); return UINT16; }");
            { yybegin(LOOKING_FOR_PATTERN); return UINT16;
            }
          case 179: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [323] { yybegin(LOOKING_FOR_PATTERN); return UINT64; }");
            { yybegin(LOOKING_FOR_PATTERN); return UINT64;
            }
          case 180: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [322] { yybegin(LOOKING_FOR_PATTERN); return UINT32; }");
            { yybegin(LOOKING_FOR_PATTERN); return UINT32;
            }
          case 181: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { yybegin(LOOKING_FOR_PATTERN); return ASSERT; }");
            { yybegin(LOOKING_FOR_PATTERN); return ASSERT;
            }
          case 182: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { yybegin(LOOKING_FOR_PATTERN); return STRUCT; }");
            { yybegin(LOOKING_FOR_PATTERN); return STRUCT;
            }
          case 183: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { yybegin(LOOKING_FOR_PATTERN); return STATIC; }");
            { yybegin(LOOKING_FOR_PATTERN); return STATIC;
            }
          case 184: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [305] { yybegin(LOOKING_FOR_PATTERN); return SEALED; }");
            { yybegin(LOOKING_FOR_PATTERN); return SEALED;
            }
          case 185: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { yybegin(LOOKING_FOR_PATTERN); return SIZEOF; }");
            { yybegin(LOOKING_FOR_PATTERN); return SIZEOF;
            }
          case 186: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { yybegin(LOOKING_FOR_PATTERN); return SWITCH; }");
            { yybegin(LOOKING_FOR_PATTERN); return SWITCH;
            }
          case 187: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [281] { yybegin(LOOKING_FOR_PATTERN); return IMPORT; }");
            { yybegin(LOOKING_FOR_PATTERN); return IMPORT;
            }
          case 188: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [293] { yybegin(LOOKING_FOR_PATTERN); return NATIVE; }");
            { yybegin(LOOKING_FOR_PATTERN); return NATIVE;
            }
          case 189: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { yybegin(LOOKING_FOR_PATTERN); return DOUBLE; }");
            { yybegin(LOOKING_FOR_PATTERN); return DOUBLE;
            }
          case 190: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { yybegin(LOOKING_FOR_PATTERN); return DELETE; }");
            { yybegin(LOOKING_FOR_PATTERN); return DELETE;
            }
          case 191: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [302] { yybegin(LOOKING_FOR_PATTERN); return PUBLIC; }");
            { yybegin(LOOKING_FOR_PATTERN); return PUBLIC;
            }
          case 192: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [347] { yybegin(INITIAL); return PREPROCESSOR_ELSEIF; }");
            { yybegin(INITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 193: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [344] { yybegin(INITIAL); return PREPROCESSOR_ASSERT; }");
            { yybegin(INITIAL); return PREPROCESSOR_ASSERT;
            }
          case 194: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [345] { yybegin(INITIAL); return PREPROCESSOR_DEFINE; }");
            { yybegin(INITIAL); return PREPROCESSOR_DEFINE;
            }
          case 195: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [356] { yybegin(YYINITIAL); return PREPROCESSOR_PRAGMA; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_PRAGMA;
            }
          case 196: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { yybegin(LOOKING_FOR_PATTERN); return BUILTIN; }");
            { yybegin(LOOKING_FOR_PATTERN); return BUILTIN;
            }
          case 197: break;
          case 83: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { yybegin(LOOKING_FOR_PATTERN); return TYPESET; }");
            { yybegin(LOOKING_FOR_PATTERN); return TYPESET;
            }
          case 198: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [317] { yybegin(LOOKING_FOR_PATTERN); return TYPEDEF; }");
            { yybegin(LOOKING_FOR_PATTERN); return TYPEDEF;
            }
          case 199: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [273] { yybegin(LOOKING_FOR_PATTERN); return FOREACH; }");
            { yybegin(LOOKING_FOR_PATTERN); return FOREACH;
            }
          case 200: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { yybegin(LOOKING_FOR_PATTERN); return FORWARD; }");
            { yybegin(LOOKING_FOR_PATTERN); return FORWARD;
            }
          case 201: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { yybegin(LOOKING_FOR_PATTERN); return FUNCTAG; }");
            { yybegin(LOOKING_FOR_PATTERN); return FUNCTAG;
            }
          case 202: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { yybegin(LOOKING_FOR_PATTERN); return FINALLY; }");
            { yybegin(LOOKING_FOR_PATTERN); return FINALLY;
            }
          case 203: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { yybegin(LOOKING_FOR_PATTERN); return ACQUIRE; }");
            { yybegin(LOOKING_FOR_PATTERN); return ACQUIRE;
            }
          case 204: break;
          case 90: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [328] { yybegin(LOOKING_FOR_PATTERN); return VARIANT; }");
            { yybegin(LOOKING_FOR_PATTERN); return VARIANT;
            }
          case 205: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [330] { yybegin(LOOKING_FOR_PATTERN); return VIRTUAL; }");
            { yybegin(LOOKING_FOR_PATTERN); return VIRTUAL;
            }
          case 206: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { yybegin(LOOKING_FOR_PATTERN); return VIEW_AS; }");
            { yybegin(LOOKING_FOR_PATTERN); return VIEW_AS;
            }
          case 207: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { yybegin(LOOKING_FOR_PATTERN); return CELLSOF; }");
            { yybegin(LOOKING_FOR_PATTERN); return CELLSOF;
            }
          case 208: break;
          case 94: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { yybegin(LOOKING_FOR_PATTERN); return CAST_TO; }");
            { yybegin(LOOKING_FOR_PATTERN); return CAST_TO;
            }
          case 209: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { yybegin(LOOKING_FOR_PATTERN); return DEFAULT; }");
            { yybegin(LOOKING_FOR_PATTERN); return DEFAULT;
            }
          case 210: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { yybegin(LOOKING_FOR_PATTERN); return DEFINED; }");
            { yybegin(LOOKING_FOR_PATTERN); return DEFINED;
            }
          case 211: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { yybegin(LOOKING_FOR_PATTERN); return PRIVATE; }");
            { yybegin(LOOKING_FOR_PATTERN); return PRIVATE;
            }
          case 212: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { yybegin(LOOKING_FOR_PATTERN); return PACKAGE; }");
            { yybegin(LOOKING_FOR_PATTERN); return PACKAGE;
            }
          case 213: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [354] { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE;
            }
          case 214: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { yybegin(LOOKING_FOR_PATTERN); return OPERATOR; }");
            { yybegin(LOOKING_FOR_PATTERN); return OPERATOR;
            }
          case 215: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { yybegin(LOOKING_FOR_PATTERN); return READONLY; }");
            { yybegin(LOOKING_FOR_PATTERN); return READONLY;
            }
          case 216: break;
          case 102: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [270] { yybegin(LOOKING_FOR_PATTERN); return EXPLICIT; }");
            { yybegin(LOOKING_FOR_PATTERN); return EXPLICIT;
            }
          case 217: break;
          case 103: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [277] { yybegin(LOOKING_FOR_PATTERN); return FUNCTION; }");
            { yybegin(LOOKING_FOR_PATTERN); return FUNCTION;
            }
          case 218: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { yybegin(LOOKING_FOR_PATTERN); return FUNCENUM; }");
            { yybegin(LOOKING_FOR_PATTERN); return FUNCENUM;
            }
          case 219: break;
          case 105: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [332] { yybegin(LOOKING_FOR_PATTERN); return VOLATILE; }");
            { yybegin(LOOKING_FOR_PATTERN); return VOLATILE;
            }
          case 220: break;
          case 106: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { yybegin(LOOKING_FOR_PATTERN); return CONTINUE; }");
            { yybegin(LOOKING_FOR_PATTERN); return CONTINUE;
            }
          case 221: break;
          case 107: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { yybegin(LOOKING_FOR_PATTERN); return IMPLICIT; }");
            { yybegin(LOOKING_FOR_PATTERN); return IMPLICIT;
            }
          case 222: break;
          case 108: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [349] { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 223: break;
          case 109: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [288] { yybegin(LOOKING_FOR_PATTERN); return INTERFACE; }");
            { yybegin(LOOKING_FOR_PATTERN); return INTERFACE;
            }
          case 224: break;
          case 110: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { yybegin(LOOKING_FOR_PATTERN); return NAMESPACE; }");
            { yybegin(LOOKING_FOR_PATTERN); return NAMESPACE;
            }
          case 225: break;
          case 111: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { yybegin(LOOKING_FOR_PATTERN); return METHODMAP; }");
            { yybegin(LOOKING_FOR_PATTERN); return METHODMAP;
            }
          case 226: break;
          case 112: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { yybegin(LOOKING_FOR_PATTERN); return PROTECTED; }");
            { yybegin(LOOKING_FOR_PATTERN); return PROTECTED;
            }
          case 227: break;
          case 113: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [350] { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 228: break;
          case 114: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [357] { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE;
            }
          case 229: break;
          case 115: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [296] { yybegin(LOOKING_FOR_PATTERN); return NULLABLE; }");
            { yybegin(LOOKING_FOR_PATTERN); return NULLABLE;
            }
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _SpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _SpLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _SpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
