/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.sourcemod.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;

import static net.sourcemod.sourcepawn.lexer.SpTokenTypes.*;

import java.util.function.IntConsumer;
import java.util.NoSuchElementException;

import java.util.Map;
import java.util.HashMap;
import java.util.PrimitiveIterator;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpLexer.flex</tt>
 */
class _SpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_CASE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\7\1\0\1\1\1\7\22\0\1\1\1\0\1\25\4\0\1\24\2\0\1\5\2\0\1\22\1\20"+
    "\1\6\1\13\1\10\1\55\1\54\1\56\1\11\1\53\1\11\1\52\1\3\1\26\5\0\1\4\6\12\24"+
    "\2\1\0\1\23\2\0\1\15\1\0\1\33\1\14\1\37\1\44\1\21\1\32\1\51\1\43\1\41\1\60"+
    "\1\42\1\34\1\45\1\36\1\16\1\46\1\40\1\30\1\35\1\27\1\31\1\57\1\50\1\17\1\47"+
    "\1\61\205\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\1\1\4"+
    "\1\3\1\6\2\3\1\7\1\10\20\3\2\1\3\0"+
    "\1\11\1\4\1\0\1\12\1\13\3\4\3\3\1\14"+
    "\5\3\2\7\2\10\14\3\1\15\16\3\1\16\1\17"+
    "\1\3\1\20\13\3\2\0\1\21\1\22\1\23\1\12"+
    "\1\24\3\3\1\25\7\3\1\26\11\3\1\27\5\3"+
    "\1\30\7\3\1\31\10\3\1\32\17\3\1\33\2\3"+
    "\2\0\2\24\5\3\1\34\1\3\1\35\1\36\1\37"+
    "\2\3\1\40\24\3\1\41\6\3\1\42\1\3\1\43"+
    "\2\3\1\44\1\45\10\3\1\46\5\3\1\47\1\3"+
    "\1\50\1\3\1\51\3\3\1\23\1\0\1\12\1\0"+
    "\1\52\5\3\1\53\1\54\5\3\1\55\1\56\1\3"+
    "\1\57\1\60\6\3\1\61\4\3\1\62\2\3\1\63"+
    "\5\3\1\64\1\3\1\65\1\3\1\66\1\3\1\67"+
    "\1\70\13\3\1\71\6\3\1\72\2\3\1\73\2\3"+
    "\1\74\1\3\1\75\1\76\1\77\6\3\1\100\1\3"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\5\3\1\107"+
    "\1\3\1\110\2\3\1\111\3\3\1\112\5\3\1\113"+
    "\3\3\1\114\1\115\1\3\1\116\1\117\1\3\1\120"+
    "\1\3\1\121\1\122\2\3\1\123\1\124\2\3\1\125"+
    "\1\126\2\3\1\127\1\130\1\3\1\131\1\132\1\133"+
    "\1\3\1\134\1\135\1\136\1\137\1\140\1\3\1\141"+
    "\1\3\1\142\2\3\1\143\1\3\1\144\1\145\1\146"+
    "\1\147\2\3\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\310\0\u0abe\0\310\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u012c\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u0672\0\310"+
    "\0\310\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\310"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u012c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u012c"+
    "\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u012c"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78"+
    "\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\310\0\u1fd6"+
    "\0\u2008\0\u203a\0\u206c\0\u209e\0\u012c\0\u20d0\0\u012c\0\u012c"+
    "\0\u012c\0\u2102\0\u2134\0\u012c\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\u012c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u012c"+
    "\0\u267a\0\u012c\0\u26ac\0\u26de\0\u012c\0\u012c\0\u2710\0\u2742"+
    "\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c\0\u286e\0\u012c\0\u28a0"+
    "\0\u28d2\0\u2904\0\u2936\0\u2968\0\u012c\0\u299a\0\u012c\0\u29cc"+
    "\0\u012c\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2a94\0\310\0\u2ac6"+
    "\0\u012c\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u012c\0\u012c"+
    "\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u012c\0\u012c\0\u2cec"+
    "\0\u012c\0\u012c\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18"+
    "\0\u012c\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u012c\0\u2f12\0\u2f44"+
    "\0\u012c\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u012c\0\u3070"+
    "\0\u012c\0\u30a2\0\u012c\0\u30d4\0\u012c\0\u012c\0\u3106\0\u3138"+
    "\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8"+
    "\0\u32fa\0\u012c\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426"+
    "\0\u012c\0\u3458\0\u348a\0\u012c\0\u34bc\0\u34ee\0\u012c\0\u3520"+
    "\0\u012c\0\u012c\0\u012c\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a"+
    "\0\u364c\0\u012c\0\u367e\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u012c\0\u37aa"+
    "\0\u012c\0\u37dc\0\u380e\0\u012c\0\u3840\0\u3872\0\u38a4\0\u012c"+
    "\0\u38d6\0\u3908\0\u393a\0\u396c\0\u399e\0\u012c\0\u39d0\0\u3a02"+
    "\0\u3a34\0\u012c\0\u012c\0\u3a66\0\u012c\0\u012c\0\u3a98\0\u012c"+
    "\0\u3aca\0\u012c\0\u012c\0\u3afc\0\u3b2e\0\u012c\0\u012c\0\u3b60"+
    "\0\u3b92\0\u012c\0\u012c\0\u3bc4\0\u3bf6\0\u012c\0\u012c\0\u3c28"+
    "\0\u012c\0\u012c\0\u012c\0\u3c5a\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u012c\0\u3c8c\0\u012c\0\u3cbe\0\u012c\0\u3cf0\0\u3d22\0\u012c"+
    "\0\u3d54\0\u012c\0\u012c\0\u012c\0\u012c\0\u3d86\0\u3db8\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\5"+
    "\2\10\1\7\1\13\1\14\1\15\1\16\1\7\1\5"+
    "\1\17\2\5\1\20\1\21\1\5\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\7\1\33"+
    "\2\7\1\34\1\35\1\36\1\7\1\37\1\40\5\10"+
    "\1\41\2\7\2\5\1\42\1\5\1\43\5\5\1\42"+
    "\1\5\1\42\1\43\2\42\1\5\1\42\5\5\23\42"+
    "\5\5\3\42\2\0\1\44\1\0\1\45\5\0\1\44"+
    "\1\0\1\44\1\45\2\44\1\0\1\44\5\0\23\44"+
    "\5\0\3\44\26\0\1\46\116\0\1\6\62\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\33\7\3\0"+
    "\1\50\4\0\2\50\1\0\1\50\1\0\1\50\2\0"+
    "\1\51\31\0\5\50\5\0\3\7\3\0\10\7\1\0"+
    "\1\7\5\0\33\7\5\0\1\52\1\53\56\0\1\50"+
    "\4\0\2\50\1\0\1\50\1\54\1\50\1\55\1\56"+
    "\1\51\31\0\5\50\5\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\1\7\1\57\1\60\30\7\2\0"+
    "\3\7\3\0\5\7\1\61\2\7\1\0\1\7\4\0"+
    "\1\62\33\7\2\0\3\7\3\0\4\7\1\63\3\7"+
    "\1\0\1\7\4\0\1\47\17\7\1\64\13\7\2\0"+
    "\3\7\3\0\7\7\1\65\1\0\1\7\4\0\1\47"+
    "\5\7\1\66\1\7\1\67\23\7\7\20\1\0\13\20"+
    "\1\70\1\71\35\20\7\21\1\0\13\21\1\72\1\21"+
    "\1\73\34\21\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\1\7\1\74\2\7\1\75\7\7\1\76"+
    "\3\7\1\77\12\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\100\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\6\7\1\101\1\102\2\7"+
    "\1\103\20\7\2\0\3\7\3\0\6\7\1\104\1\7"+
    "\1\0\1\7\4\0\1\47\2\7\1\105\1\7\1\106"+
    "\5\7\1\107\20\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\6\7\1\110\1\7\1\111\22\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\112\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\113\4\0"+
    "\1\47\1\114\4\7\1\115\4\7\1\116\6\7\1\117"+
    "\11\7\2\0\3\7\3\0\10\7\1\0\1\120\4\0"+
    "\1\47\2\7\1\121\1\7\1\122\26\7\2\0\3\7"+
    "\3\0\6\7\1\123\1\7\1\0\1\124\4\0\1\47"+
    "\4\7\1\125\7\7\1\126\16\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\3\7\1\127\3\7"+
    "\1\130\6\7\1\131\14\7\2\0\3\7\3\0\6\7"+
    "\1\132\1\7\1\0\1\133\4\0\1\47\33\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\134\4\0\1\47\33\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\1\7\1\135\1\136\1\7\1\137\26\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\12\7\1\140"+
    "\1\7\1\141\16\7\2\0\3\7\3\0\6\7\1\142"+
    "\1\7\1\0\1\7\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\6\7\1\143\1\7\1\0\1\7\4\0\1\47"+
    "\4\7\1\144\5\7\1\145\20\7\1\0\1\146\3\147"+
    "\3\0\10\147\1\0\1\147\4\0\1\150\33\147\2\0"+
    "\3\147\3\0\10\147\1\0\1\147\5\0\33\147\2\0"+
    "\3\44\3\0\10\44\1\0\1\44\5\0\33\44\1\0"+
    "\1\46\106\0\1\151\36\0\1\50\4\0\2\50\1\0"+
    "\1\50\1\0\1\50\34\0\5\50\6\0\1\152\4\0"+
    "\2\152\1\0\1\152\36\0\5\152\3\0\5\153\1\154"+
    "\54\153\7\53\1\0\52\53\10\0\1\54\2\0\1\54"+
    "\1\0\1\54\54\0\2\55\1\0\1\55\1\0\1\55"+
    "\35\0\4\55\6\0\1\56\4\0\6\56\3\0\1\56"+
    "\10\0\2\56\3\0\1\56\4\0\1\56\5\0\5\56"+
    "\5\0\3\7\3\0\10\7\1\0\1\155\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\12\7\1\156\20\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\7\7\1\157\23\7\26\0"+
    "\1\160\35\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\31\7\1\161\1\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\162\4\0\1\47\33\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\12\7\1\163\4\7"+
    "\1\164\13\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\6\7\1\165\24\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\2\7\1\166\30\7"+
    "\7\20\1\0\52\20\7\21\1\0\52\21\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\2\7\1\167"+
    "\15\7\1\170\12\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\22\7\1\171\10\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\7\1\172"+
    "\10\7\1\173\20\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\17\7\1\174\13\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\175\3\7"+
    "\1\176\26\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\12\7\1\177\20\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\12\7\1\200\20\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\7\7\1\201\23\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\1\7\1\202\31\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\7\7\1\203"+
    "\23\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\5\7\1\204\25\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\7\7\1\205\23\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\6\7"+
    "\1\206\24\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\11\7\1\207\21\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\1\210\32\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\4\7"+
    "\1\211\26\7\2\0\3\7\3\0\6\7\1\212\1\7"+
    "\1\0\1\7\4\0\1\47\1\7\1\213\2\7\1\214"+
    "\26\7\2\0\3\7\3\0\10\7\1\0\1\215\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\32\7\1\216\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\12\7\1\217\20\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\21\7"+
    "\1\220\11\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\5\7\1\221\25\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\1\222\15\7\1\223"+
    "\14\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\7\7\1\224\23\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\5\7\1\225\25\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\1\226"+
    "\5\7\1\227\24\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\4\7\1\230\26\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\231\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\17\7\1\232\13\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\2\7\1\233\30\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\3\7\1\234"+
    "\1\7\1\235\2\7\1\236\22\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\1\237\32\7\2\0"+
    "\3\7\3\0\6\7\1\240\1\7\1\0\1\7\4\0"+
    "\1\47\12\7\1\241\20\7\2\0\3\7\3\0\4\7"+
    "\1\242\3\7\1\0\1\7\4\0\1\47\33\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\10\7"+
    "\1\243\22\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\1\244\32\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\12\7\1\245\20\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\1\246"+
    "\32\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\5\7\1\247\4\7\1\250\20\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\7\1\251"+
    "\31\7\2\0\3\7\3\0\10\7\1\0\1\252\4\0"+
    "\1\47\1\7\1\253\31\7\1\0\1\146\24\0\1\150"+
    "\54\0\1\254\40\0\5\153\1\255\54\153\5\256\1\154"+
    "\1\257\53\256\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\4\7\1\260\26\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\5\7\1\261\25\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\2\7\1\262\30\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\263\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\7\1\264\31\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\1\265"+
    "\32\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\5\7\1\266\25\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\267\4\0\1\47\33\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\16\7\1\270\14\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\271\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\6\7\1\272\1\7\1\0"+
    "\1\7\4\0\1\47\33\7\2\0\3\7\3\0\6\7"+
    "\1\273\1\7\1\0\1\7\4\0\1\47\33\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\6\7"+
    "\1\274\24\7\2\0\3\7\3\0\10\7\1\0\1\275"+
    "\4\0\1\47\33\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\2\7\1\276\30\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\15\7\1\277"+
    "\15\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\7\7\1\300\23\7\2\0\3\7\3\0\6\7"+
    "\1\301\1\7\1\0\1\7\4\0\1\47\33\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\1\302"+
    "\32\7\2\0\3\7\3\0\10\7\1\0\1\303\4\0"+
    "\1\47\21\7\1\304\11\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\10\7\1\305\22\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\6\7"+
    "\1\306\24\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\4\7\1\307\26\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\310\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\2\7\1\311"+
    "\30\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\5\7\1\312\25\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\10\7\1\313\22\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\2\7"+
    "\1\314\30\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\1\315\32\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\316\4\0\1\47\33\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\317\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\320\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\5\7\1\321\25\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\12\7\1\322\20\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\323\4\0\1\47\33\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\1\324"+
    "\5\7\1\325\24\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\5\7\1\326\25\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\10\7\1\327"+
    "\22\7\2\0\3\7\3\0\10\7\1\0\1\330\4\0"+
    "\1\47\1\331\32\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\1\7\1\332\31\7\2\0\3\7"+
    "\3\0\1\333\7\7\1\0\1\334\4\0\1\47\7\7"+
    "\1\335\13\7\1\336\1\337\1\340\5\7\2\0\3\7"+
    "\3\0\6\7\1\341\1\7\1\0\1\7\4\0\1\47"+
    "\5\7\1\342\25\7\2\0\3\7\3\0\4\7\1\343"+
    "\3\7\1\0\1\7\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\4\7\1\344"+
    "\5\7\1\345\20\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\346\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\5\7\1\347\25\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\14\7"+
    "\1\350\16\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\1\351\32\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\30\7\1\352\2\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\5\7"+
    "\1\353\25\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\13\7\1\354\17\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\14\7\1\355\16\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\5\7\1\356\25\7\2\0\3\7\3\0\6\7\1\357"+
    "\1\7\1\0\1\7\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\4\7\1\360"+
    "\26\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\15\7\1\361\15\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\12\7\1\362\20\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\21\7"+
    "\1\363\11\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\1\364\32\7\3\0\1\365\4\0\2\365"+
    "\1\0\1\365\6\0\1\366\27\0\5\365\3\0\5\153"+
    "\1\255\1\367\53\153\5\256\1\370\54\256\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\13\7\1\371"+
    "\17\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\1\372\32\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\5\7\1\373\25\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\10\7\1\374"+
    "\22\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\4\7\1\375\26\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\12\7\1\376\20\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\3\7"+
    "\1\377\27\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\21\7\1\u0100\11\7\2\0\3\7\3\0"+
    "\6\7\1\u0101\1\7\1\0\1\7\4\0\1\47\6\7"+
    "\1\u0102\6\7\1\u0103\15\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\7\1\u0104\31\7\2\0"+
    "\3\7\3\0\6\7\1\u0105\1\7\1\0\1\7\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\22\7\1\u0106\10\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\7\7\1\u0107\23\7"+
    "\2\0\3\7\3\0\1\u0108\7\7\1\0\1\7\4\0"+
    "\1\47\7\7\1\u0109\13\7\1\u010a\1\u010b\1\u010c\5\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\4\7\1\u010d\26\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\4\7\1\u010e\26\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\u010f\4\0\1\47\1\u0110\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\u0111\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\5\7\1\u0112\25\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\7\1\u0113\31\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\12\7"+
    "\1\u0114\20\7\2\0\3\7\3\0\10\7\1\0\1\u0115"+
    "\4\0\1\47\33\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\13\7\1\u0116\17\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\10\7\1\u0117"+
    "\22\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\12\7\1\u0118\20\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\17\7\1\u0119\13\7\2\0"+
    "\3\7\3\0\6\7\1\u011a\1\7\1\0\1\7\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\10\7\1\u011b\22\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\30\7\1\u011c\2\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\6\7\1\u011d\24\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\12\7\1\u011e\20\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\u011f\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\6\7\1\u0120\24\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\14\7\1\u0121\16\7\2\0\3\7"+
    "\3\0\5\7\1\u0122\2\7\1\0\1\7\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\24\7\1\u0123\6\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\7\1\u0124\31\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\27\7"+
    "\1\u0125\3\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\26\7\1\u0126\4\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\1\7\1\u0127\31\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\12\7\1\u0128\20\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\5\7\1\u0129\25\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\2\7\1\u012a"+
    "\30\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\7\7\1\u012b\23\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\u012c\32\7\2\0\3\7"+
    "\3\0\6\7\1\u012d\1\7\1\0\1\7\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\u012e\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\4\7\1\u012f\26\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\12\7\1\u0130\20\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\4\7\1\u0131\26\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\u0132\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\u0133\32\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\4\7\1\u0134"+
    "\26\7\2\0\3\7\3\0\5\7\1\u0135\2\7\1\0"+
    "\1\7\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\2\7\1\u0136\30\7\3\0"+
    "\1\365\4\0\2\365\1\0\1\365\36\0\5\365\3\0"+
    "\5\256\1\370\1\257\53\256\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\12\7\1\u0137\20\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\5\7"+
    "\1\u0138\25\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\1\u0139\32\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\1\u013a\32\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\10\7\1\u013b"+
    "\22\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\3\7\1\u013c\27\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\u013d\4\0\1\47\33\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\u013e\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\7\7\1\u013f"+
    "\23\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\7\7\1\u0140\23\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\24\7\1\u0141\6\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\27\7"+
    "\1\u0142\3\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\26\7\1\u0143\4\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\10\7\1\u0144\22\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\1\7\1\u0145\31\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\7\7\1\u0146\23\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\4\7\1\u0147"+
    "\5\7\1\u0148\20\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\5\7\1\u0149\25\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\u014a\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\1\7\1\u014b\31\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\15\7\1\u014c\15\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\u014d\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\10\7\1\u014e\22\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\3\7\1\u014f\27\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\14\7\1\u0150"+
    "\16\7\2\0\3\7\3\0\10\7\1\0\1\u0151\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\17\7\1\u0152\13\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\7\7\1\u0153\23\7"+
    "\2\0\3\7\3\0\6\7\1\u0154\1\7\1\0\1\7"+
    "\4\0\1\47\33\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\1\u0155\32\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\3\7\1\u0156\27\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\1\u0157\32\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\10\7\1\u0158\22\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\u0159\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\5\7\1\u015a"+
    "\25\7\2\0\3\7\3\0\10\7\1\0\1\u015b\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\u015c"+
    "\4\0\1\47\33\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\15\7\1\u015d\15\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\10\7\1\u015e"+
    "\22\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\1\u015f\32\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\10\7\1\u0160\22\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\22\7\1\u0161"+
    "\10\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\12\7\1\u0162\20\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\7\7\1\u0163\23\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\4\7"+
    "\1\u0164\26\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\4\7\1\u0165\26\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\7\7\1\u0166\23\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\4\7\1\u0167\26\7\2\0\3\7\3\0\6\7\1\u0168"+
    "\1\7\1\0\1\7\4\0\1\47\33\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\12\7\1\u0169"+
    "\20\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\1\u016a\32\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\3\7\1\u016b\27\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\5\7\1\u016c"+
    "\25\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\14\7\1\u016d\16\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\15\7\1\u016e\15\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\2\7"+
    "\1\u016f\30\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\22\7\1\u0170\10\7\2\0\3\7\3\0"+
    "\6\7\1\u0171\1\7\1\0\1\7\4\0\1\47\33\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\20\7\1\u0172\12\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\u0173\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\4\7\1\u0174\26\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\2\7"+
    "\1\u0175\30\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\3\7\1\u0176\27\7\2\0\3\7\3\0"+
    "\6\7\1\u0177\1\7\1\0\1\7\4\0\1\47\33\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\4\7\1\u0178\26\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\12\7\1\u0179\20\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\u017a\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\15\7\1\u017b\15\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\16\7\1\u017c\14\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\1\u017d\32\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\u017e\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\u017f\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\5\7\1\u0180\25\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\1\u0181\32\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\6\7"+
    "\1\u0182\24\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\5\7\1\u0183\25\7\2\0\3\7\3\0"+
    "\4\7\1\u0184\3\7\1\0\1\7\4\0\1\47\33\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\1\7\1\u0185\31\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\1\u0186\32\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\20\7\1\u0187\12\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\7\4\0\1\47"+
    "\16\7\1\u0188\14\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\7\4\0\1\47\7\7\1\u0189\23\7\2\0\3\7"+
    "\3\0\10\7\1\0\1\7\4\0\1\47\10\7\1\u018a"+
    "\22\7\2\0\3\7\3\0\10\7\1\0\1\u018b\4\0"+
    "\1\47\33\7\2\0\3\7\3\0\10\7\1\0\1\7"+
    "\4\0\1\47\10\7\1\u018c\22\7\2\0\3\7\3\0"+
    "\10\7\1\0\1\7\4\0\1\47\1\u018d\32\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\7\4\0\1\47\4\7"+
    "\1\u018e\26\7\2\0\3\7\3\0\10\7\1\0\1\u018f"+
    "\4\0\1\47\33\7\2\0\3\7\3\0\10\7\1\0"+
    "\1\u0190\4\0\1\47\33\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\5\7\1\u0191\25\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\u0192\4\0\1\47\33\7"+
    "\2\0\3\7\3\0\10\7\1\0\1\u0193\4\0\1\47"+
    "\33\7\2\0\3\7\3\0\10\7\1\0\1\7\4\0"+
    "\1\47\17\7\1\u0194\13\7\2\0\3\7\3\0\10\7"+
    "\1\0\1\7\4\0\1\47\15\7\1\u0195\15\7\2\0"+
    "\3\7\3\0\10\7\1\0\1\u0196\4\0\1\47\33\7"+
    "\2\0\3\7\3\0\5\7\1\u0197\2\7\1\0\1\7"+
    "\4\0\1\47\33\7\2\0\3\7\3\0\5\7\1\u0198"+
    "\2\7\1\0\1\7\4\0\1\47\33\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\37\1\1\0\3\1\1\0\17\1\1\11"+
    "\1\1\1\11\52\1\2\0\2\11\6\1\1\11\73\1"+
    "\2\0\1\1\1\11\106\1\1\0\1\11\1\0\240\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    str.codePoints().iterator().forEachRemaining(new IntConsumer() {
      @Override
      public void accept(int ch) {
        int charCount = Character.charCount(ch);
        if (ch > 31 && ch < 127) {
          builder.append((char) ch);
        } else if (charCount == 1) {
          builder.append(String.format("\\u%04X", ch));
        } else {
          builder.append(String.format("\\U%06X", ch));
        }
      }
    });

    return builder.toString();
  }

  public _SpLexer() {
    this((java.io.Reader)null);
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzAtEOF = false;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 105: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { yybegin(YYINITIAL); return WHITE_SPACE; }");
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          case 106: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { yybegin(YYINITIAL); return IDENTIFIER; }");
            { yybegin(YYINITIAL); return IDENTIFIER;
            }
          case 107: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { yybegin(YYINITIAL); return NUMBER_LITERAL; }");
            { yybegin(YYINITIAL); return NUMBER_LITERAL;
            }
          case 108: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { yybegin(YYINITIAL); return AT_SIGN; }");
            { yybegin(YYINITIAL); return AT_SIGN;
            }
          case 109: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { yybegin(YYINITIAL); return UNDERSCORE; }");
            { yybegin(YYINITIAL); return UNDERSCORE;
            }
          case 110: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { yybegin(YYINITIAL); return CHARACTER_LITERAL; }");
            { yybegin(YYINITIAL); return CHARACTER_LITERAL;
            }
          case 111: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { yybegin(YYINITIAL); return STRING_LITERAL; }");
            { yybegin(YYINITIAL); return STRING_LITERAL;
            }
          case 112: break;
          case 9: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { yybegin(YYINITIAL); return TAG; }");
            { yybegin(YYINITIAL); return TAG;
            }
          case 113: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { yybegin(YYINITIAL); return C_STYLE_COMMENT; }");
            { yybegin(YYINITIAL); return C_STYLE_COMMENT;
            }
          case 114: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { yybegin(YYINITIAL); return END_OF_LINE_COMMENT; }");
            { yybegin(YYINITIAL); return END_OF_LINE_COMMENT;
            }
          case 115: break;
          case 12: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { yybegin(YYINITIAL); return TAG; }");
            { yybegin(YYINITIAL); return TAG;
            }
          case 116: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { yybegin(YYINITIAL); return AS; }");
            { yybegin(YYINITIAL); return AS;
            }
          case 117: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { yybegin(YYINITIAL); return IF; }");
            { yybegin(YYINITIAL); return IF;
            }
          case 118: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { yybegin(YYINITIAL); return IN; }");
            { yybegin(YYINITIAL); return IN;
            }
          case 119: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { yybegin(YYINITIAL); return DO; }");
            { yybegin(YYINITIAL); return DO;
            }
          case 120: break;
          case 17: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 2;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 3;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { yybegin(YYINITIAL); return LABEL; }");
            { yybegin(YYINITIAL); return LABEL;
            }
          case 121: break;
          case 18: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { yybegin(YYINITIAL); return IDENTIFIER; }");
            { yybegin(YYINITIAL); return IDENTIFIER;
            }
          case 122: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { yybegin(YYINITIAL); return RATIONAL_LITERAL; }");
            { yybegin(YYINITIAL); return RATIONAL_LITERAL;
            }
          case 123: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { yybegin(YYINITIAL); return DOC_COMMENT; }");
            { yybegin(YYINITIAL); return DOC_COMMENT;
            }
          case 124: break;
          case 21: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { yybegin(YYINITIAL); return UNDERSCORE; }");
            { yybegin(YYINITIAL); return UNDERSCORE;
            }
          case 125: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [180] { yybegin(YYINITIAL); return TRY; }");
            { yybegin(YYINITIAL); return TRY;
            }
          case 126: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { yybegin(YYINITIAL); return FOR; }");
            { yybegin(YYINITIAL); return FOR;
            }
          case 127: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { yybegin(YYINITIAL); return LET; }");
            { yybegin(YYINITIAL); return LET;
            }
          case 128: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { yybegin(YYINITIAL); return NEW; }");
            { yybegin(YYINITIAL); return NEW;
            }
          case 129: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { yybegin(YYINITIAL); return INT; }");
            { yybegin(YYINITIAL); return INT;
            }
          case 130: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [191] { yybegin(YYINITIAL); return VAR; }");
            { yybegin(YYINITIAL); return VAR;
            }
          case 131: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { yybegin(YYINITIAL); return EXIT; }");
            { yybegin(YYINITIAL); return EXIT;
            }
          case 132: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { yybegin(YYINITIAL); return ELSE; }");
            { yybegin(YYINITIAL); return ELSE;
            }
          case 133: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { yybegin(YYINITIAL); return ENUM; }");
            { yybegin(YYINITIAL); return ENUM;
            }
          case 134: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { yybegin(YYINITIAL); return TRUE; }");
            { yybegin(YYINITIAL); return TRUE;
            }
          case 135: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [178] { yybegin(YYINITIAL); return THIS; }");
            { yybegin(YYINITIAL); return THIS;
            }
          case 136: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { yybegin(YYINITIAL); return NULL; }");
            { yybegin(YYINITIAL); return NULL;
            }
          case 137: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { yybegin(IN_CASE);   return CASE; }");
            { yybegin(IN_CASE);   return CASE;
            }
          case 138: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { yybegin(YYINITIAL); return CHAR; }");
            { yybegin(YYINITIAL); return CHAR;
            }
          case 139: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { yybegin(YYINITIAL); return INTN; }");
            { yybegin(YYINITIAL); return INTN;
            }
          case 140: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { yybegin(YYINITIAL); return INT8; }");
            { yybegin(YYINITIAL); return INT8;
            }
          case 141: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { yybegin(YYINITIAL); return DECL; }");
            { yybegin(YYINITIAL); return DECL;
            }
          case 142: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { yybegin(YYINITIAL); return WITH; }");
            { yybegin(YYINITIAL); return WITH;
            }
          case 143: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { yybegin(YYINITIAL); return GOTO; }");
            { yybegin(YYINITIAL); return GOTO;
            }
          case 144: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { yybegin(YYINITIAL); return VOID; }");
            { yybegin(YYINITIAL); return VOID;
            }
          case 145: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { yybegin(YYINITIAL); return BREAK; }");
            { yybegin(YYINITIAL); return BREAK;
            }
          case 146: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [176] { yybegin(YYINITIAL); return TAGOF; }");
            { yybegin(YYINITIAL); return TAGOF;
            }
          case 147: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { yybegin(YYINITIAL); return THROW; }");
            { yybegin(YYINITIAL); return THROW;
            }
          case 148: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { yybegin(YYINITIAL); return USING; }");
            { yybegin(YYINITIAL); return USING;
            }
          case 149: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { yybegin(YYINITIAL); return UNION; }");
            { yybegin(YYINITIAL); return UNION;
            }
          case 150: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [188] { yybegin(YYINITIAL); return UINTN; }");
            { yybegin(YYINITIAL); return UINTN;
            }
          case 151: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { yybegin(YYINITIAL); return UINT8; }");
            { yybegin(YYINITIAL); return UINT8;
            }
          case 152: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { yybegin(YYINITIAL); return FALSE; }");
            { yybegin(YYINITIAL); return FALSE;
            }
          case 153: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { yybegin(YYINITIAL); return STOCK; }");
            { yybegin(YYINITIAL); return STOCK;
            }
          case 154: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { yybegin(YYINITIAL); return SLEEP; }");
            { yybegin(YYINITIAL); return SLEEP;
            }
          case 155: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { yybegin(YYINITIAL); return CONST; }");
            { yybegin(YYINITIAL); return CONST;
            }
          case 156: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { yybegin(YYINITIAL); return CATCH; }");
            { yybegin(YYINITIAL); return CATCH;
            }
          case 157: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { yybegin(YYINITIAL); return INT16; }");
            { yybegin(YYINITIAL); return INT16;
            }
          case 158: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { yybegin(YYINITIAL); return INT64; }");
            { yybegin(YYINITIAL); return INT64;
            }
          case 159: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { yybegin(YYINITIAL); return INT32; }");
            { yybegin(YYINITIAL); return INT32;
            }
          case 160: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { yybegin(YYINITIAL); return WHILE; }");
            { yybegin(YYINITIAL); return WHILE;
            }
          case 161: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { yybegin(YYINITIAL); return OBJECT; }");
            { yybegin(YYINITIAL); return OBJECT;
            }
          case 162: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [182] { yybegin(YYINITIAL); return TYPEOF; }");
            { yybegin(YYINITIAL); return TYPEOF;
            }
          case 163: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { yybegin(YYINITIAL); return RETURN; }");
            { yybegin(YYINITIAL); return RETURN;
            }
          case 164: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [185] { yybegin(YYINITIAL); return UINT16; }");
            { yybegin(YYINITIAL); return UINT16;
            }
          case 165: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [187] { yybegin(YYINITIAL); return UINT64; }");
            { yybegin(YYINITIAL); return UINT64;
            }
          case 166: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { yybegin(YYINITIAL); return UINT32; }");
            { yybegin(YYINITIAL); return UINT32;
            }
          case 167: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { yybegin(YYINITIAL); return ASSERT; }");
            { yybegin(YYINITIAL); return ASSERT;
            }
          case 168: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { yybegin(YYINITIAL); return SEALED; }");
            { yybegin(YYINITIAL); return SEALED;
            }
          case 169: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { yybegin(YYINITIAL); return STRUCT; }");
            { yybegin(YYINITIAL); return STRUCT;
            }
          case 170: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { yybegin(YYINITIAL); return STATIC; }");
            { yybegin(YYINITIAL); return STATIC;
            }
          case 171: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { yybegin(YYINITIAL); return SIZEOF; }");
            { yybegin(YYINITIAL); return SIZEOF;
            }
          case 172: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { yybegin(YYINITIAL); return SWITCH; }");
            { yybegin(YYINITIAL); return SWITCH;
            }
          case 173: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { yybegin(YYINITIAL); return NATIVE; }");
            { yybegin(YYINITIAL); return NATIVE;
            }
          case 174: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { yybegin(YYINITIAL); return IMPORT; }");
            { yybegin(YYINITIAL); return IMPORT;
            }
          case 175: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { yybegin(YYINITIAL); return DOUBLE; }");
            { yybegin(YYINITIAL); return DOUBLE;
            }
          case 176: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { yybegin(YYINITIAL); return DELETE; }");
            { yybegin(YYINITIAL); return DELETE;
            }
          case 177: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { yybegin(YYINITIAL); return PUBLIC; }");
            { yybegin(YYINITIAL); return PUBLIC;
            }
          case 178: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { yybegin(YYINITIAL); return BUILTIN; }");
            { yybegin(YYINITIAL); return BUILTIN;
            }
          case 179: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [183] { yybegin(YYINITIAL); return TYPESET; }");
            { yybegin(YYINITIAL); return TYPESET;
            }
          case 180: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [181] { yybegin(YYINITIAL); return TYPEDEF; }");
            { yybegin(YYINITIAL); return TYPEDEF;
            }
          case 181: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { yybegin(YYINITIAL); return FOREACH; }");
            { yybegin(YYINITIAL); return FOREACH;
            }
          case 182: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { yybegin(YYINITIAL); return FORWARD; }");
            { yybegin(YYINITIAL); return FORWARD;
            }
          case 183: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { yybegin(YYINITIAL); return FUNCTAG; }");
            { yybegin(YYINITIAL); return FUNCTAG;
            }
          case 184: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { yybegin(YYINITIAL); return FINALLY; }");
            { yybegin(YYINITIAL); return FINALLY;
            }
          case 185: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { yybegin(YYINITIAL); return ACQUIRE; }");
            { yybegin(YYINITIAL); return ACQUIRE;
            }
          case 186: break;
          case 83: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { yybegin(YYINITIAL); return CELLSOF; }");
            { yybegin(YYINITIAL); return CELLSOF;
            }
          case 187: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { yybegin(YYINITIAL); return CAST_TO; }");
            { yybegin(YYINITIAL); return CAST_TO;
            }
          case 188: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { yybegin(YYINITIAL); return DEFAULT; }");
            { yybegin(YYINITIAL); return DEFAULT;
            }
          case 189: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { yybegin(YYINITIAL); return DEFINED; }");
            { yybegin(YYINITIAL); return DEFINED;
            }
          case 190: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { yybegin(YYINITIAL); return PRIVATE; }");
            { yybegin(YYINITIAL); return PRIVATE;
            }
          case 191: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { yybegin(YYINITIAL); return PACKAGE; }");
            { yybegin(YYINITIAL); return PACKAGE;
            }
          case 192: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [192] { yybegin(YYINITIAL); return VARIANT; }");
            { yybegin(YYINITIAL); return VARIANT;
            }
          case 193: break;
          case 90: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { yybegin(YYINITIAL); return VIEW_AS; }");
            { yybegin(YYINITIAL); return VIEW_AS;
            }
          case 194: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { yybegin(YYINITIAL); return VIRTUAL; }");
            { yybegin(YYINITIAL); return VIRTUAL;
            }
          case 195: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { yybegin(YYINITIAL); return OPERATOR; }");
            { yybegin(YYINITIAL); return OPERATOR;
            }
          case 196: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { yybegin(YYINITIAL); return EXPLICIT; }");
            { yybegin(YYINITIAL); return EXPLICIT;
            }
          case 197: break;
          case 94: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { yybegin(YYINITIAL); return READONLY; }");
            { yybegin(YYINITIAL); return READONLY;
            }
          case 198: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { yybegin(YYINITIAL); return FUNCENUM; }");
            { yybegin(YYINITIAL); return FUNCENUM;
            }
          case 199: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { yybegin(YYINITIAL); return FUNCTION; }");
            { yybegin(YYINITIAL); return FUNCTION;
            }
          case 200: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { yybegin(YYINITIAL); return CONTINUE; }");
            { yybegin(YYINITIAL); return CONTINUE;
            }
          case 201: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { yybegin(YYINITIAL); return IMPLICIT; }");
            { yybegin(YYINITIAL); return IMPLICIT;
            }
          case 202: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { yybegin(YYINITIAL); return VOLATILE; }");
            { yybegin(YYINITIAL); return VOLATILE;
            }
          case 203: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { yybegin(YYINITIAL); return NAMESPACE; }");
            { yybegin(YYINITIAL); return NAMESPACE;
            }
          case 204: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { yybegin(YYINITIAL); return INTERFACE; }");
            { yybegin(YYINITIAL); return INTERFACE;
            }
          case 205: break;
          case 102: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { yybegin(YYINITIAL); return METHODMAP; }");
            { yybegin(YYINITIAL); return METHODMAP;
            }
          case 206: break;
          case 103: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { yybegin(YYINITIAL); return PROTECTED; }");
            { yybegin(YYINITIAL); return PROTECTED;
            }
          case 207: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { yybegin(YYINITIAL); return NULLABLE; }");
            { yybegin(YYINITIAL); return NULLABLE;
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _SpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _SpLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _SpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
