/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.sourcemod.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.io.Reader;
import java.util.NoSuchElementException;
import java.util.function.IntConsumer;

import static net.sourcemod.sourcepawn.lexer.SpTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpLexer.flex</tt>
 */
public class _SpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT = 2;
  public static final int IN_BLOCK_COMMENT = 4;
  public static final int IN_DOC_COMMENT_PRE = 6;
  public static final int IN_DOC_COMMENT = 8;
  public static final int IN_DOC_COMMENT_POST = 10;
  public static final int IN_PREPROCESSOR = 12;
  public static final int IN_PREPROCESSOR_INCLUDE_PRE = 14;
  public static final int IN_PREPROCESSOR_INCLUDE = 16;
  public static final int IN_PREPROCESSOR_INCLUDE_SYSTEMPATH_PRE = 18;
  public static final int IN_PREPROCESSOR_INCLUDE_SYSTEMPATH = 20;
  public static final int IN_PREPROCESSOR_INCLUDE_RELATIVEPATH_PRE = 22;
  public static final int IN_PREPROCESSOR_INCLUDE_RELATIVEPATH = 24;
  public static final int IN_PREPROCESSOR_PRAGMA_PRE = 26;
  public static final int IN_PREPROCESSOR_PRAGMA = 28;
  public static final int IN_PREPROCESSOR_STRING_PRE = 30;
  public static final int IN_PREPROCESSOR_STRING = 32;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE = 34;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS = 36;
  public static final int IN_CASE = 38;
  public static final int IN_CHARACTER_LITERAL = 40;
  public static final int IN_CHARACTER_LITERAL_FINISH = 42;
  public static final int IN_STRING_LITERAL = 44;
  public static final int IN_BAD_LITERAL = 46;
  public static final int IN_ESCAPE_SEQUENCE = 48;
  public static final int IN_DECIMAL_ESCAPE_SEQUENCE = 50;
  public static final int IN_UNICODE_ESCAPE_SEQUENCE = 52;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\44\1\105\1\40\1\0\1\45\1\41\1\104\1\57"+
    "\1\60\1\35\1\46\1\37\1\33\1\32\1\47\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\36\1\20\1\53\1\42\1\52\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\43"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\51\1\55\1\50\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\31\0\2\1\5\0\1\2\1\3\2\4\1\5\1\2"+
    "\1\6\1\7\1\10\1\7\2\10\1\11\10\10\1\12"+
    "\1\13\1\14\1\10\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\10\10"+
    "\1\41\1\42\2\43\2\44\1\43\1\45\1\43\2\46"+
    "\1\47\1\43\2\45\1\43\2\50\12\51\1\52\1\53"+
    "\1\52\1\54\1\55\1\56\1\57\1\60\1\57\2\43"+
    "\1\61\1\62\1\63\1\62\2\43\1\64\1\65\10\54"+
    "\1\66\1\54\2\43\2\67\1\43\1\70\6\54\1\71"+
    "\1\72\1\73\1\74\1\71\1\75\1\71\1\76\2\77"+
    "\1\100\1\101\1\102\1\103\1\1\1\104\2\1\7\0"+
    "\1\3\1\7\1\0\1\105\3\7\22\10\1\106\10\10"+
    "\1\107\1\110\1\111\1\112\3\10\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135"+
    "\4\10\1\136\1\137\4\10\1\140\10\10\1\45\1\141"+
    "\1\0\1\142\4\0\1\143\10\0\1\144\4\0\1\53"+
    "\1\0\1\60\4\0\1\63\4\0\1\65\12\0\1\66"+
    "\1\0\1\43\1\0\2\145\1\0\1\70\5\0\1\146"+
    "\1\147\1\0\2\150\1\1\4\0\1\151\1\152\4\10"+
    "\1\153\15\10\1\154\4\10\1\155\10\10\1\156\1\157"+
    "\2\10\1\160\2\10\1\125\1\161\1\162\1\163\1\164"+
    "\5\10\1\165\2\10\1\166\16\10\27\0\1\43\3\0"+
    "\1\167\1\0\6\10\1\170\6\10\1\171\1\10\1\172"+
    "\1\173\17\10\1\174\3\10\1\175\5\10\1\176\1\177"+
    "\2\10\1\200\1\201\4\10\1\202\6\10\1\203\5\10"+
    "\1\204\1\10\1\205\1\46\3\0\1\206\2\0\1\207"+
    "\1\0\1\210\14\0\2\211\2\0\1\151\1\0\1\212"+
    "\3\10\1\213\1\214\5\10\1\215\1\10\1\216\1\217"+
    "\2\10\1\220\10\10\1\221\3\10\1\222\10\10\1\223"+
    "\1\10\1\224\1\10\1\225\1\10\1\226\1\227\15\10"+
    "\1\230\1\0\1\231\1\232\2\0\1\233\20\0\1\10"+
    "\1\234\1\10\1\235\2\10\1\236\1\10\1\237\1\240"+
    "\1\241\7\10\1\242\1\10\1\243\1\244\1\245\1\246"+
    "\1\247\11\10\1\250\1\10\1\251\1\10\1\252\2\10"+
    "\1\253\3\10\1\254\1\10\1\0\1\255\2\0\1\256"+
    "\1\0\1\257\1\260\2\0\1\261\10\0\1\262\1\10"+
    "\1\263\1\264\2\10\1\265\1\266\1\267\2\10\1\270"+
    "\1\271\2\10\1\272\1\273\1\274\1\10\1\275\1\276"+
    "\3\10\1\277\1\300\2\10\1\301\1\302\3\0\1\303"+
    "\1\304\6\0\1\305\2\0\1\306\1\307\1\310\1\311"+
    "\1\312\1\10\1\313\1\314\1\10\1\315\3\10\2\0"+
    "\1\316\1\317\1\0\1\320\1\321\1\322\1\0\1\323"+
    "\1\324\1\10\1\325\1\326\1\327\1\330\1\0\1\331"+
    "\1\332\1\0\1\10\1\333\1\334\1\10\1\335";

  private static int [] zzUnpackAction() {
    int [] result = new int[751];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u08e0\0\u096e\0\u08e0\0\u09b5\0\u09fc\0\u0a43"+
    "\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u08e0\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u08e0\0\u08e0\0\u0f88\0\u0fcf\0\u1016"+
    "\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u08e0\0\u1179\0\u11c0\0\u1207"+
    "\0\u08e0\0\u08e0\0\u08e0\0\u08e0\0\u08e0\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u08e0\0\u08e0\0\u08e0"+
    "\0\u1486\0\u08e0\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u08e0\0\u17da\0\u08e0"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u08e0\0\u1aa0\0\u1ae7\0\u08e0\0\u08e0\0\u08e0\0\u08e0"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u08e0\0\u08e0\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u1d1f\0\u08e0\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82"+
    "\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u08e0\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u09b5"+
    "\0\u22ab\0\u22f2\0\u2339\0\u08e0\0\u2339\0\u08e0\0\u08e0\0\u08e0"+
    "\0\u2380\0\u08e0\0\u08e0\0\u23c7\0\u08e0\0\u08e0\0\u08e0\0\u08e0"+
    "\0\u08e0\0\u08e0\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571"+
    "\0\u2571\0\u25b8\0\u09b5\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953"+
    "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b"+
    "\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3"+
    "\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u08e0"+
    "\0\u08e0\0\u2ffb\0\u3042\0\u3089\0\u08e0\0\u08e0\0\u08e0\0\u08e0"+
    "\0\u08e0\0\u08e0\0\u08e0\0\u08e0\0\u08e0\0\u08e0\0\u30d0\0\u08e0"+
    "\0\u3117\0\u08e0\0\u08e0\0\u08e0\0\u315e\0\u08e0\0\u31a5\0\u31ec"+
    "\0\u3233\0\u327a\0\u32c1\0\u0a8a\0\u3308\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u08e0\0\u3731\0\u08e0\0\u16be\0\u3778"+
    "\0\u1793\0\u17da\0\u08e0\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db"+
    "\0\u3922\0\u3969\0\u39b0\0\u08e0\0\u39f7\0\u3a3e\0\u3a85\0\u1ae7"+
    "\0\u3acc\0\u1b75\0\u3b13\0\u1c03\0\u1bbc\0\u3b5a\0\u1c91\0\u3ba1"+
    "\0\u1d1f\0\u1cd8\0\u3be8\0\u1dad\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04"+
    "\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u202c\0\u3ef5"+
    "\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u21d6\0\u409f\0\u40e6"+
    "\0\u412d\0\u22f2\0\u4174\0\u41bb\0\u4202\0\u08e0\0\u2380\0\u4249"+
    "\0\u4290\0\u42d7\0\u249c\0\u08e0\0\u431e\0\u4365\0\u43ac\0\u08e0"+
    "\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u0a8a\0\u450f\0\u4556\0\u459d"+
    "\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5"+
    "\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u0a8a"+
    "\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe"+
    "\0\u08e0\0\u08e0\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8"+
    "\0\u4def\0\u08e0\0\u4e36\0\u08e0\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52"+
    "\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u0a8a\0\u50b5\0\u50fc\0\u5143"+
    "\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b"+
    "\0\u53c2\0\u5409\0\u5450\0\u5497\0\u36ea\0\u54de\0\u5525\0\u556c"+
    "\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4"+
    "\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc"+
    "\0\u5a23\0\u5a6a\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u08e0\0\u5b86"+
    "\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30\0\u0a8a\0\u5d77"+
    "\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u0a8a\0\u5f21\0\u0a8a"+
    "\0\u0a8a\0\u5f68\0\u5faf\0\u5ff6\0\u603d\0\u6084\0\u60cb\0\u6112"+
    "\0\u6159\0\u61a0\0\u61e7\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a"+
    "\0\u0a8a\0\u6391\0\u63d8\0\u641f\0\u08e0\0\u6466\0\u64ad\0\u64f4"+
    "\0\u653b\0\u6582\0\u0a8a\0\u0a8a\0\u65c9\0\u6610\0\u0a8a\0\u0a8a"+
    "\0\u6657\0\u669e\0\u66e5\0\u672c\0\u0a8a\0\u6773\0\u67ba\0\u6801"+
    "\0\u6848\0\u688f\0\u68d6\0\u0a8a\0\u691d\0\u6964\0\u69ab\0\u69f2"+
    "\0\u6a39\0\u0a8a\0\u6a80\0\u0a8a\0\u5497\0\u6ac7\0\u6b0e\0\u6b55"+
    "\0\u6b9c\0\u6be3\0\u6c2a\0\u08e0\0\u6c71\0\u08e0\0\u6cb8\0\u6cff"+
    "\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37"+
    "\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u70e1\0\u7128\0\u7128"+
    "\0\u0a8a\0\u716f\0\u71b6\0\u71fd\0\u0a8a\0\u0a8a\0\u7244\0\u728b"+
    "\0\u72d2\0\u7319\0\u7360\0\u0a8a\0\u73a7\0\u0a8a\0\u0a8a\0\u73ee"+
    "\0\u7435\0\u0a8a\0\u747c\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df"+
    "\0\u7626\0\u766d\0\u0a8a\0\u76b4\0\u76fb\0\u7742\0\u0a8a\0\u7789"+
    "\0\u77d0\0\u7817\0\u785e\0\u78a5\0\u78ec\0\u7933\0\u797a\0\u0a8a"+
    "\0\u79c1\0\u0a8a\0\u7a08\0\u0a8a\0\u7a4f\0\u0a8a\0\u0a8a\0\u7a96"+
    "\0\u7add\0\u7b24\0\u7b6b\0\u7bb2\0\u7bf9\0\u7c40\0\u7c87\0\u7cce"+
    "\0\u7d15\0\u7d5c\0\u7da3\0\u7dea\0\u0a8a\0\u7e31\0\u08e0\0\u08e0"+
    "\0\u7e78\0\u7ebf\0\u08e0\0\u7f06\0\u7f4d\0\u7f94\0\u7fdb\0\u8022"+
    "\0\u8069\0\u80b0\0\u80f7\0\u813e\0\u8185\0\u81cc\0\u8213\0\u825a"+
    "\0\u82a1\0\u82e8\0\u832f\0\u8376\0\u0a8a\0\u83bd\0\u0a8a\0\u8404"+
    "\0\u844b\0\u0a8a\0\u8492\0\u0a8a\0\u0a8a\0\u0a8a\0\u84d9\0\u8520"+
    "\0\u8567\0\u85ae\0\u85f5\0\u863c\0\u8683\0\u0a8a\0\u86ca\0\u0a8a"+
    "\0\u0a8a\0\u0a8a\0\u0a8a\0\u0a8a\0\u8711\0\u8758\0\u879f\0\u87e6"+
    "\0\u882d\0\u8874\0\u88bb\0\u8902\0\u8949\0\u0a8a\0\u8990\0\u0a8a"+
    "\0\u89d7\0\u0a8a\0\u8a1e\0\u8a65\0\u0a8a\0\u8aac\0\u8af3\0\u8b3a"+
    "\0\u0a8a\0\u8b81\0\u8bc8\0\u08e0\0\u8c0f\0\u8c56\0\u08e0\0\u8c9d"+
    "\0\u08e0\0\u08e0\0\u8ce4\0\u8d2b\0\u08e0\0\u8d72\0\u8db9\0\u8e00"+
    "\0\u8e47\0\u8e8e\0\u8ed5\0\u8f1c\0\u8f63\0\u0a8a\0\u8faa\0\u0a8a"+
    "\0\u0a8a\0\u8ff1\0\u9038\0\u0a8a\0\u0a8a\0\u0a8a\0\u907f\0\u90c6"+
    "\0\u0a8a\0\u0a8a\0\u910d\0\u9154\0\u0a8a\0\u0a8a\0\u0a8a\0\u919b"+
    "\0\u0a8a\0\u0a8a\0\u91e2\0\u9229\0\u9270\0\u0a8a\0\u0a8a\0\u92b7"+
    "\0\u92fe\0\u0a8a\0\u0a8a\0\u9345\0\u938c\0\u93d3\0\u08e0\0\u08e0"+
    "\0\u941a\0\u9461\0\u94a8\0\u94ef\0\u9536\0\u957d\0\u08e0\0\u95c4"+
    "\0\u960b\0\u0a8a\0\u0a8a\0\u0a8a\0\u0a8a\0\u0a8a\0\u9652\0\u0a8a"+
    "\0\u0a8a\0\u9699\0\u0a8a\0\u96e0\0\u9727\0\u976e\0\u97b5\0\u97fc"+
    "\0\u08e0\0\u08e0\0\u9843\0\u08e0\0\u08e0\0\u08e0\0\u988a\0\u08e0"+
    "\0\u08e0\0\u98d1\0\u0a8a\0\u0a8a\0\u0a8a\0\u0a8a\0\u9918\0\u08e0"+
    "\0\u08e0\0\u995f\0\u99a6\0\u08e0\0\u08e0\0\u99ed\0\u0a8a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[751];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\50\1\51\1\52\1\53\1\54\1\51\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\51\1\117\1\51\1\120\1\51\1\121\1\122"+
    "\1\123\1\51\1\124\1\125\5\50\2\51\1\126\1\127"+
    "\1\41\1\130\1\131\1\132\1\133\104\130\1\134\2\135"+
    "\31\130\1\136\53\130\1\137\1\140\31\130\1\141\52\130"+
    "\1\142\1\143\1\144\31\130\1\145\51\130\35\146\1\147"+
    "\51\146\21\150\1\151\1\150\1\152\1\153\1\154\1\155"+
    "\1\156\33\150\1\157\3\150\1\160\1\150\1\161\15\150"+
    "\1\162\1\163\3\162\1\164\101\162\53\165\1\166\31\165"+
    "\1\167\1\165\1\170\1\171\3\170\1\172\101\170\1\130"+
    "\1\173\3\130\1\174\44\130\1\175\34\130\1\176\1\177"+
    "\3\176\1\200\101\176\1\130\1\201\3\130\1\202\77\130"+
    "\1\203\1\130\1\165\1\204\3\165\1\205\122\165\1\206"+
    "\1\207\1\210\4\165\1\211\30\165\1\212\3\165\1\213"+
    "\1\165\1\214\20\165\1\215\3\165\1\216\101\165\1\217"+
    "\1\220\1\221\1\222\1\217\1\223\100\217\1\130\1\165"+
    "\1\224\3\165\1\225\117\165\1\226\3\165\1\227\65\165"+
    "\1\42\3\165\1\230\1\231\1\165\1\232\2\165\1\232"+
    "\1\165\3\232\1\165\10\232\1\231\2\165\1\232\24\165"+
    "\14\232\5\165\2\232\3\165\2\233\2\234\100\233\1\235"+
    "\1\233\105\234\1\236\2\234\2\237\2\240\1\237\1\241"+
    "\77\237\1\242\1\240\2\130\1\243\1\244\103\130\2\245"+
    "\2\246\3\245\1\247\1\245\2\247\1\245\1\247\1\250"+
    "\1\245\1\250\1\245\2\250\1\245\3\250\5\245\1\250"+
    "\10\245\1\251\17\245\1\250\7\245\5\247\2\245\2\251"+
    "\1\246\7\252\1\253\1\252\2\253\1\252\1\253\3\252"+
    "\1\251\54\252\5\253\14\252\1\254\1\252\5\254\2\252"+
    "\1\251\3\252\3\254\32\252\1\254\5\252\1\254\5\252"+
    "\5\254\5\252\2\255\2\0\102\255\2\0\1\35\1\256"+
    "\1\257\111\0\1\260\1\0\1\261\2\0\1\261\1\0"+
    "\3\261\1\0\10\261\1\260\2\0\1\261\24\0\14\261"+
    "\5\0\2\261\41\0\1\262\106\0\1\37\160\0\1\42"+
    "\3\0\1\263\103\0\1\43\105\0\1\263\1\42\1\264"+
    "\111\0\12\51\1\0\11\51\2\0\1\51\24\0\23\51"+
    "\12\0\1\265\1\0\2\265\1\0\1\265\14\0\1\265"+
    "\1\266\42\0\5\265\13\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\12\0\1\265\1\0"+
    "\2\265\1\0\1\265\1\270\1\271\1\272\11\0\1\265"+
    "\1\266\42\0\5\265\13\0\12\51\1\0\1\51\1\273"+
    "\1\274\6\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\7\51\1\275\2\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\10\51\1\276\12\51\11\0\12\51"+
    "\1\0\1\51\1\277\3\51\1\300\3\51\2\0\1\51"+
    "\1\0\1\267\22\0\5\51\1\301\3\51\1\302\11\51"+
    "\11\0\12\51\1\0\3\51\1\303\5\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\7\51"+
    "\1\304\1\51\2\0\1\51\1\0\1\267\22\0\2\51"+
    "\1\305\1\51\1\306\16\51\11\0\11\51\1\307\1\0"+
    "\6\51\1\310\2\51\2\0\1\51\1\0\1\267\22\0"+
    "\4\51\1\311\16\51\11\0\10\51\1\312\1\51\1\0"+
    "\2\51\1\313\6\51\2\0\1\51\1\0\1\267\22\0"+
    "\2\51\1\314\20\51\11\0\12\51\1\0\7\51\1\315"+
    "\1\51\2\0\1\51\1\0\1\267\22\0\1\316\22\51"+
    "\11\0\12\51\1\0\3\51\1\317\5\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\1\320"+
    "\2\51\1\321\2\51\1\322\2\51\2\0\1\51\1\0"+
    "\1\267\22\0\2\51\1\323\7\51\1\324\10\51\11\0"+
    "\12\51\1\0\10\51\1\325\2\0\1\51\1\0\1\326"+
    "\22\0\23\51\35\0\1\327\107\0\1\330\6\0\1\331"+
    "\52\0\10\51\1\332\1\51\1\0\5\51\1\333\3\51"+
    "\2\0\1\51\1\0\1\267\22\0\2\51\1\334\20\51"+
    "\45\0\1\335\102\0\1\336\111\0\1\337\1\340\106\0"+
    "\1\341\106\0\1\342\106\0\1\343\106\0\1\344\106\0"+
    "\1\345\3\0\1\346\75\0\1\347\4\0\1\350\4\0"+
    "\1\351\101\0\1\352\6\0\1\353\77\0\1\354\7\0"+
    "\1\355\76\0\1\356\10\0\1\357\41\0\10\51\1\360"+
    "\1\51\1\0\3\51\1\361\1\51\1\362\3\51\2\0"+
    "\1\51\1\0\1\267\22\0\5\51\1\363\15\51\11\0"+
    "\12\51\1\0\4\51\1\364\4\51\2\0\1\51\1\0"+
    "\1\267\22\0\4\51\1\365\2\51\1\366\13\51\11\0"+
    "\12\51\1\0\2\51\1\367\1\370\1\51\1\371\3\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\10\51"+
    "\1\372\1\51\1\0\3\51\1\373\5\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\3\51"+
    "\1\374\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\1\51\1\375\1\376\2\51\1\377"+
    "\3\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\2\51\1\u0100\2\51\1\u0101\15\51\11\0\10\51\1\u0102"+
    "\1\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\3\0\1\130\1\131\1\132\1\133\102\130\3\0"+
    "\1\132\104\0\1\130\1\134\2\135\31\130\1\136\50\130"+
    "\2\0\1\u0103\2\135\152\0\1\u0104\40\0\1\u0105\106\0"+
    "\1\u0105\1\137\106\0\1\137\1\140\31\0\1\141\11\0"+
    "\1\u0106\40\0\1\u0107\1\143\1\144\104\0\1\u0108\106\0"+
    "\1\u0108\1\143\141\0\1\u0109\11\0\1\u0106\74\0\1\u010a"+
    "\11\0\1\u010b\61\0\1\u010c\151\0\1\u010d\43\0\1\u010e"+
    "\4\0\1\u010f\35\0\1\u0110\104\0\1\u0111\53\0\1\u0112"+
    "\141\0\1\u0113\50\0\1\u0114\37\0\1\u0115\45\0\1\u0116"+
    "\104\0\1\u0117\65\0\1\163\3\0\1\u0118\102\0\1\u0118"+
    "\1\163\1\u0119\104\0\1\171\3\0\1\u011a\102\0\1\u011a"+
    "\1\171\1\u011b\103\0\1\130\1\173\2\0\1\130\1\174"+
    "\44\130\1\175\33\130\2\0\1\u011c\1\u011d\1\u011e\104\0"+
    "\1\177\3\0\1\u011f\102\0\1\u011f\1\177\1\u0120\103\0"+
    "\1\130\1\201\2\0\1\130\1\202\77\130\1\203\2\0"+
    "\1\u0121\1\u0122\1\u0123\104\0\1\204\3\0\1\u0124\102\0"+
    "\1\u0124\1\204\1\u0125\131\0\1\u0126\106\0\1\u0127\145\0"+
    "\1\u0128\45\0\1\u0129\100\0\1\u012a\2\0\1\u012b\111\0"+
    "\1\u012c\106\0\1\u012d\45\0\1\u012e\15\0\1\215\3\0"+
    "\1\u012f\102\0\1\u012f\1\215\1\u0130\104\0\1\u0131\105\0"+
    "\1\130\1\u0132\1\221\1\222\102\130\3\0\1\221\105\0"+
    "\1\u0133\1\u0134\1\u0135\104\0\1\224\3\0\1\u0136\102\0"+
    "\1\u0136\1\224\1\u0137\174\0\1\u0138\41\0\1\u0139\70\0"+
    "\12\u013a\1\0\11\u013a\2\0\1\u013a\24\0\23\u013a\4\0"+
    "\1\u013b\3\0\1\u013c\12\u013a\1\0\11\u013a\2\0\1\u013a"+
    "\1\0\1\u013d\22\0\23\u013a\107\0\1\u013e\3\0\1\u013f"+
    "\1\u0140\1\u0141\105\0\1\243\113\0\1\253\1\0\2\253"+
    "\1\0\1\253\3\0\1\251\54\0\5\253\14\0\1\u0142"+
    "\1\0\5\u0142\2\0\1\251\3\0\3\u0142\32\0\1\u0142"+
    "\5\0\1\u0142\5\0\5\u0142\6\0\1\u0143\106\0\1\257"+
    "\1\0\1\257\1\0\1\u0144\102\0\1\257\3\0\1\u0144"+
    "\107\0\12\261\1\0\11\261\2\0\1\261\24\0\23\261"+
    "\4\0\1\262\1\u0145\1\u0146\104\0\2\42\2\0\1\263"+
    "\110\0\1\265\1\0\2\265\1\0\1\265\14\0\1\265"+
    "\43\0\5\265\14\0\1\u0147\1\0\2\u0147\1\0\1\u0147"+
    "\60\0\5\u0147\43\0\1\u0148\61\0\1\270\2\0\1\270"+
    "\14\0\1\270\66\0\2\271\1\0\1\271\14\0\1\271"+
    "\44\0\4\271\14\0\1\272\1\0\5\272\6\0\3\272"+
    "\2\0\1\272\27\0\1\272\5\0\1\272\5\0\5\272"+
    "\13\0\12\51\1\0\3\51\1\u0149\5\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\2\51\1\u014a\20\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\21\51\1\u014b\1\51\11\0\12\51\1\0\3\51"+
    "\1\u014c\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\11\51\1\u014d\11\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\13\51\1\u014e\7\51"+
    "\11\0\12\51\1\0\1\51\1\u014f\7\51\2\0\1\51"+
    "\1\0\1\267\22\0\2\51\1\u0150\20\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\10\51"+
    "\1\u0151\12\51\11\0\12\51\1\0\1\u0152\4\51\1\u0153"+
    "\3\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\2\51\1\u0154\20\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\4\51\1\u0155\16\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\2\51\1\u0156\20\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\2\51\1\u0157\5\51\1\u0158"+
    "\12\51\11\0\12\51\1\0\7\51\1\u0159\1\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\2\51\1\u015a\6\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\1\51\1\u015b\7\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\4\51\1\u015c"+
    "\16\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\4\51\1\u015d\16\51\11\0\12\51\1\0"+
    "\7\51\1\u015e\1\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\1\51\1\u015f\21\51\11\0\12\51\1\0"+
    "\1\u0160\10\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\10\51\1\u0161\1\51\1\0\1\51\1\u0162\3\51"+
    "\1\u0163\3\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\5\51\1\u0164\3\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\3\51"+
    "\1\u0165\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\22\51\1\u0166\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\2\51\1\u0167\20\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\4\51\1\u0168\16\51\41\0\1\u0169\102\0\1\u016a\62\0"+
    "\12\51\1\0\6\51\1\u016b\2\51\2\0\1\51\1\0"+
    "\1\267\22\0\2\51\1\u016c\20\51\11\0\12\51\1\0"+
    "\1\51\1\u016d\7\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\1\51\1\u016e\1\51\1\u016f"+
    "\5\51\2\0\1\51\1\0\1\267\22\0\23\51\4\0"+
    "\1\u0170\33\0\1\u0171\52\0\1\351\147\0\1\u0172\7\0"+
    "\1\u0173\76\0\1\u0174\52\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\4\51\1\u0175\16\51\11\0"+
    "\12\51\1\0\6\51\1\u0176\2\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\1\u0177\6\51"+
    "\1\u0178\1\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\5\51\1\u0179\3\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\1\u017a"+
    "\10\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\10\51\1\u017b\12\51\11\0\12\51\1\0\6\51\1\u017c"+
    "\2\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\12\51\1\u017d\10\51\11\0\12\51\1\0\1\u017e\10\51"+
    "\2\0\1\51\1\0\1\267\22\0\7\51\1\u017f\13\51"+
    "\11\0\12\51\1\0\2\51\1\u0180\6\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\4\51"+
    "\1\u0181\1\51\1\u0182\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\1\u0183\22\51\11\0\12\51\1\0\1\u0184\10\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\10\51"+
    "\1\u0185\1\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\2\51\1\u0186\20\51\11\0\7\51\1\u0187\2\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\1\u0188\22\51\11\0\12\51\1\0\1\u0189\10\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\2\51"+
    "\1\u018a\20\51\11\0\12\51\1\0\1\u018b\10\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\4\0\1\u0103\106\0"+
    "\1\u0105\33\0\1\u018c\52\0\1\u0108\33\0\1\u018d\143\0"+
    "\1\u018e\103\0\1\u018f\41\0\1\u0190\114\0\1\u0191\145\0"+
    "\1\u0192\46\0\1\u0193\107\0\1\u0194\143\0\1\u0195\102\0"+
    "\1\u0196\52\0\1\u0197\107\0\1\u0198\61\0\2\163\2\0"+
    "\1\u0118\102\0\2\171\2\0\1\u011a\101\0\1\130\1\173"+
    "\1\u011d\1\0\1\130\1\174\44\130\1\175\33\130\2\0"+
    "\2\177\2\0\1\u011f\101\0\1\130\1\201\1\u0122\1\0"+
    "\1\130\1\202\77\130\1\203\2\0\2\204\2\0\1\u0124"+
    "\116\0\1\u0199\112\0\1\u019a\110\0\1\u019b\153\0\1\u019c"+
    "\105\0\1\u019d\41\0\1\u019e\157\0\1\u019f\104\0\1\u01a0"+
    "\102\0\1\u01a1\22\0\2\215\2\0\1\u012f\102\0\1\u0131"+
    "\3\0\1\u01a2\101\0\1\130\1\u0132\1\221\1\222\1\130"+
    "\1\u01a3\100\130\2\0\1\u0133\1\u0134\1\u0135\1\0\1\u01a2"+
    "\102\0\1\u0134\106\0\2\u0134\105\0\2\224\2\0\1\u0136"+
    "\122\0\1\u01a4\147\0\1\u01a5\25\0\1\u013b\3\0\1\u013c"+
    "\30\0\1\u013d\51\0\1\u013c\1\u013b\1\u01a6\141\0\1\u01a7"+
    "\51\0\1\u0140\106\0\2\u0140\124\0\1\251\67\0\1\u0146"+
    "\1\0\1\u0146\1\0\1\262\102\0\1\u0146\3\0\1\262"+
    "\125\0\1\u01a8\70\0\12\51\1\0\5\51\1\u01a9\3\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\6\51\1\u01aa\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\3\51\1\u01ab\5\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\1\51\1\u01ac\7\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\10\51\1\u01ad\1\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\10\51"+
    "\1\u01ae\1\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\7\51\1\u01af\1\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\3\51\1\u01b0\5\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\2\51\1\u01b1\6\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\6\51"+
    "\1\u01b2\14\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\4\51\1\u01b3\16\51\11\0\12\51"+
    "\1\0\1\u01b4\10\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\10\51\1\u01b5\1\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\1\u01b6\10\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\6\51\1\u01b7\2\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\3\51"+
    "\1\u01b8\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\7\51\1\u01b9\13\51\11\0\12\51\1\0\3\51"+
    "\1\u01ba\5\51\2\0\1\51\1\0\1\267\22\0\12\51"+
    "\1\u01bb\10\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\1\u01bc\22\51\11\0\12\51\1\0"+
    "\5\51\1\u01bd\3\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\3\51\1\u01be\5\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\2\51\1\u01bf\6\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\1\u01c0\22\51\11\0\12\51\1\0\2\51"+
    "\1\u01c1\6\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\1\u01c2\10\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\6\51\1\u01c3"+
    "\2\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\3\51\1\u01c4\5\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\3\51\1\u01c5"+
    "\5\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\1\u01c6\10\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\2\51\1\u01c7\6\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\5\51\1\u01c8\3\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\6\51\1\u01c9\14\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\2\51"+
    "\1\u01ca\20\51\11\0\12\51\1\0\1\u01cb\10\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\12\51\1\u01cc"+
    "\10\51\4\0\1\u0170\106\0\1\u0171\147\0\1\u01cd\52\0"+
    "\12\51\1\0\1\u01ce\6\51\1\u01cf\1\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\6\51"+
    "\1\u01d0\2\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\1\u01d1\22\51\11\0\12\51\1\0\1\u01d2\2\51"+
    "\1\u01d3\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\1\51\1\u01d4\7\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\3\51\1\u01d5\6\51"+
    "\1\0\3\51\1\u01d6\5\51\2\0\1\51\1\0\1\267"+
    "\22\0\4\51\1\u01d7\7\51\1\u01d8\1\u01d9\1\u01da\4\51"+
    "\11\0\10\51\1\u01db\1\51\1\0\6\51\1\u01dc\2\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\6\51\1\u01dd\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\2\51\1\u01de\20\51\11\0\12\51"+
    "\1\0\3\51\1\u01df\5\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\7\51\1\u01e0\2\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\5\51\1\u01e1\3\51\2\0\1\51\1\0\1\267"+
    "\22\0\2\51\1\u01e2\20\51\11\0\12\51\1\0\3\51"+
    "\1\u01e3\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\6\51\1\u01e4\2\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\5\51\1\u01e5\15\51"+
    "\11\0\12\51\1\0\1\u01e6\10\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\u01e7\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\6\51\1\u01e8\2\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\3\51\1\u01e9\17\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\5\51\1\u01ea"+
    "\15\51\11\0\12\51\1\0\6\51\1\u01eb\2\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\10\51\1\u01ec"+
    "\1\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\4\0\1\u01ed\170\0\1\u01ee\47\0\1\u01ef\100\0"+
    "\1\u01f0\114\0\1\u01f1\112\0\1\u01f2\32\0\1\u01f3\47\0"+
    "\1\u01f4\106\0\1\u01f5\106\0\1\u01f6\111\0\1\u01f7\142\0"+
    "\1\u01f8\117\0\1\u01f9\42\0\1\u01fa\141\0\1\u01fb\53\0"+
    "\1\u01fc\141\0\1\u01fd\47\0\1\u01fe\111\0\1\u01ff\146\0"+
    "\1\u0200\41\0\1\u0201\112\0\1\u0202\61\0\1\u01a2\1\u0203"+
    "\1\u0204\166\0\1\u0205\46\0\1\u0206\64\0\2\u013b\2\0"+
    "\1\u013c\30\0\1\u013d\57\0\1\u0207\1\0\2\u0207\1\0"+
    "\1\u0207\16\0\1\u0208\41\0\5\u0207\13\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\3\51\1\u0209"+
    "\17\51\11\0\12\51\1\0\1\u020a\10\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\1\u020b\22\51\11\0"+
    "\12\51\1\0\5\51\1\u020c\3\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\4\51\1\u020d"+
    "\4\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\12\51\1\u020e\10\51\11\0\10\51\1\u020f\1\51\1\0"+
    "\7\51\1\u0210\1\51\2\0\1\51\1\0\1\267\22\0"+
    "\6\51\1\u0211\14\51\11\0\12\51\1\0\1\51\1\u0212"+
    "\7\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\10\51\1\u0213\1\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\13\51\1\u0214\7\51\11\0"+
    "\3\51\1\u0215\6\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\4\51\1\u0216\7\51\1\u0217\1\u0218\1\u0219"+
    "\4\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\4\51\1\u021a\16\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\2\51\1\u021b"+
    "\20\51\11\0\12\51\1\0\5\51\1\u021c\3\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\5\51\1\u021d\3\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\1\u021e\2\51\1\u021f\5\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\6\51\1\u0220\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\1\51\1\u0221\7\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\2\51"+
    "\1\u0222\20\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\3\51\1\u0223\17\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\1\u0224"+
    "\22\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\2\51\1\u0225\20\51\11\0\12\51\1\0"+
    "\3\51\1\u0226\5\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\10\51\1\u0227\12\51\11\0\10\51\1\u0228"+
    "\1\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\1\u0229\22\51\11\0\12\51\1\0\6\51"+
    "\1\u022a\2\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\1\u022b\10\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\5\51\1\u022c"+
    "\3\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\2\51\1\u022d\6\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\10\51\1\u022e"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\2\51"+
    "\1\u022f\20\51\11\0\12\51\1\0\1\u0230\10\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\7\51\1\u0231\1\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\5\51\1\u0232\15\51\11\0\12\51\1\0"+
    "\10\51\1\u0233\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\15\51\1\u0234\5\51\11\0\12\51\1\0\1\51"+
    "\1\u0235\7\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\20\51\1\u0236\2\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\17\51\1\u0237\3\51"+
    "\11\0\12\51\1\0\1\51\1\u0238\7\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\2\51\1\u0239\20\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\u023a\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\7\51\1\u023b\1\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\6\51\1\u023c\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\2\51\1\u023d\6\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\4\51"+
    "\1\u023e\16\51\11\0\12\51\1\0\1\u023f\10\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\10\51\1\u0240"+
    "\1\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\3\51\1\u0241\5\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\5\51\1\u0242\3\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\2\51\1\u0243\20\51\11\0\12\51\1\0"+
    "\5\51\1\u0244\3\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\3\51\1\u0245\5\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\70\0\1\u0246\46\0"+
    "\1\u0247\103\0\1\u0248\147\0\1\u0249\104\0\1\u024a\52\0"+
    "\1\u024b\37\0\1\u024c\43\0\1\u024d\107\0\1\u024e\150\0"+
    "\1\u024f\111\0\1\u0250\101\0\1\u0251\41\0\1\u0252\114\0"+
    "\1\u0253\143\0\1\u0254\116\0\1\u0255\76\0\1\u0256\51\0"+
    "\1\u0257\106\0\1\u0258\152\0\1\u0259\17\0\1\u0203\106\0"+
    "\2\u0203\122\0\1\u025a\153\0\1\u025b\32\0\1\u0207\1\0"+
    "\2\u0207\1\0\1\u0207\60\0\5\u0207\13\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\2\51\1\u025c"+
    "\20\51\11\0\12\51\1\0\1\u025d\10\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\1\u025e"+
    "\10\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\4\51\1\u025f\4\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\3\51\1\u0260"+
    "\5\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\3\51\1\u0261\5\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\4\51\1\u0262\16\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\4\51\1\u0263\16\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\15\51\1\u0264\5\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\20\51\1\u0265\2\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\17\51\1\u0266\3\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\1\u0267\22\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\1\u0268\22\51\11\0\12\51\1\0"+
    "\1\51\1\u0269\7\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\5\51\1\u026a\3\51\2\0"+
    "\1\51\1\0\1\267\22\0\2\51\1\u026b\20\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\4\51\1\u026c\16\51\11\0\12\51\1\0\6\51\1\u026d"+
    "\2\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\1\u026e\10\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\1\51\1\u026f\7\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\1\u0270\10\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\1\u0271\22\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\6\51\1\u0272\14\51"+
    "\11\0\12\51\1\0\4\51\1\u0273\4\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\5\51\1\u0274\15\51"+
    "\11\0\12\51\1\0\6\51\1\u0275\2\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\2\51\1\u0276\20\51"+
    "\11\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\4\51\1\u0277\16\51\11\0\12\51\1\0\5\51"+
    "\1\u0278\3\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\5\51\1\u0279\3\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\4\51\1\u027a\16\51"+
    "\11\0\10\51\1\u027b\1\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\1\u027c"+
    "\10\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\4\51\1\u027d\4\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\1\u027e\10\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\1\u027f"+
    "\22\51\11\0\12\51\1\0\3\51\1\u0280\5\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\10\51\1\u0281"+
    "\12\51\11\0\12\51\1\0\3\51\1\u0282\5\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\6\51\1\u0283\2\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\3\51\1\u0284\5\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\3\51\1\u0285\5\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\6\51\1\u0286\14\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\1\u0287\22\51"+
    "\11\0\12\51\1\0\1\u0288\10\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\1\u0289\22\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\13\51"+
    "\1\u028a\7\51\64\0\1\u028b\52\0\1\u028c\103\0\1\u028d"+
    "\155\0\1\u028e\36\0\1\u028f\154\0\1\u0290\43\0\1\u0291"+
    "\110\0\1\u0292\163\0\1\u0293\70\0\1\u0294\110\0\1\u0295"+
    "\35\0\1\u0296\116\0\1\u0297\146\0\1\u0298\101\0\1\u0299"+
    "\106\0\1\u029a\110\0\1\u029b\110\0\1\u029c\43\0\1\u029d"+
    "\72\0\12\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\4\51\1\u029e\16\51\11\0\10\51\1\u029f\1\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\1\u02a0\10\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\4\51\1\u02a1"+
    "\4\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\6\51\1\u02a2\2\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\2\51\1\u02a3\20\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\5\51\1\u02a4\15\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\6\51\1\u02a5\14\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\13\51\1\u02a6\7\51\11\0\10\51\1\u02a7\1\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\2\51\1\u02a8\6\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\11\51\1\u02a9\11\51\11\0"+
    "\12\51\1\0\3\51\1\u02aa\5\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\5\51\1\u02ab"+
    "\3\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\6\51\1\u02ac\2\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\1\u02ad\10\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\6\51\1\u02ae\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\7\51\1\u02af\1\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\2\51\1\u02b0\6\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\4\51\1\u02b1\4\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\10\51"+
    "\1\u02b2\1\51\1\0\11\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\5\51\1\u02b3\3\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\2\51"+
    "\1\u02b4\20\51\11\0\12\51\1\0\5\51\1\u02b5\3\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\1\u02b6\10\51\2\0\1\51\1\0\1\267\22\0"+
    "\23\51\11\0\12\51\1\0\11\51\2\0\1\51\1\0"+
    "\1\267\22\0\6\51\1\u02b7\14\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\7\51\1\u02b8"+
    "\13\51\11\0\12\51\1\0\1\u02b9\10\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\3\51"+
    "\1\u02ba\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\11\0\12\51\1\0\3\51\1\u02bb\5\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\32\0\1\u02bc\142\0\1\u02bd"+
    "\46\0\1\u02be\107\0\1\u02bf\106\0\1\u02c0\110\0\1\u02c1"+
    "\107\0\1\u02c2\153\0\1\u02c3\40\0\1\u02c4\107\0\1\u02c5"+
    "\105\0\1\u02c6\141\0\1\u02c7\53\0\1\u02c8\104\0\1\u02c9"+
    "\70\0\12\51\1\0\1\51\1\u02ca\7\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\11\51"+
    "\2\0\1\51\1\0\1\267\22\0\11\51\1\u02cb\11\51"+
    "\11\0\12\51\1\0\1\u02cc\10\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\11\51\2\0"+
    "\1\51\1\0\1\267\22\0\4\51\1\u02cd\16\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\7\51\1\u02ce\13\51\11\0\7\51\1\u02cf\2\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\3\51\1\u02d0\5\51\2\0\1\51\1\0"+
    "\1\267\22\0\23\51\11\0\12\51\1\0\3\51\1\u02d1"+
    "\5\51\2\0\1\51\1\0\1\267\22\0\23\51\11\0"+
    "\12\51\1\0\11\51\2\0\1\51\1\0\1\267\22\0"+
    "\1\u02d2\22\51\11\0\12\51\1\0\1\u02d3\10\51\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\11\51\2\0\1\51\1\0\1\267\22\0\1\u02d4\22\51"+
    "\11\0\12\51\1\0\5\51\1\u02d5\3\51\2\0\1\51"+
    "\1\0\1\267\22\0\23\51\11\0\12\51\1\0\3\51"+
    "\1\u02d6\5\51\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\26\0\1\u02d7\154\0\1\u02d8\36\0\1\u02d9\114\0\1\u02da"+
    "\75\0\1\u02db\114\0\1\u02dc\104\0\1\u02dd\114\0\1\u02de"+
    "\77\0\1\u02df\114\0\1\u02e0\146\0\1\u02e1\25\0\12\51"+
    "\1\0\6\51\1\u02e2\2\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\3\51\1\u02e3\5\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\11\0\12\51"+
    "\1\0\3\51\1\u02e4\5\51\2\0\1\51\1\0\1\267"+
    "\22\0\23\51\11\0\12\51\1\0\11\51\2\0\1\51"+
    "\1\0\1\267\22\0\10\51\1\u02e5\12\51\11\0\12\51"+
    "\1\0\11\51\2\0\1\51\1\0\1\267\22\0\6\51"+
    "\1\u02e6\14\51\72\0\1\u02e7\40\0\1\u02e8\152\0\1\u02e9"+
    "\45\0\1\u02ea\70\0\12\51\1\0\3\51\1\u02eb\5\51"+
    "\2\0\1\51\1\0\1\267\22\0\23\51\27\0\1\u02ec"+
    "\151\0\1\u02ed\25\0\12\51\1\0\10\51\1\u02ee\2\0"+
    "\1\51\1\0\1\267\22\0\23\51\11\0\12\51\1\0"+
    "\10\51\1\u02ef\2\0\1\51\1\0\1\267\22\0\23\51"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39476];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\31\0\2\1\5\0\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\16\1\2\11\7\1\1\11\3\1\5\11"+
    "\10\1\3\11\1\1\1\11\13\1\1\11\1\1\1\11"+
    "\11\1\1\11\2\1\4\11\4\1\2\11\4\1\1\11"+
    "\15\1\1\11\12\1\1\11\1\1\3\11\1\1\2\11"+
    "\1\1\6\11\2\1\4\0\2\1\1\0\2\1\1\0"+
    "\41\1\2\11\3\1\12\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\25\1\1\11\1\0\1\11\4\0\1\11"+
    "\10\0\1\11\4\0\1\1\1\0\1\1\4\0\1\1"+
    "\4\0\1\1\12\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\5\0\1\1\1\11\1\0\4\1\1\11"+
    "\2\0\1\1\1\11\40\1\2\11\7\1\1\11\1\1"+
    "\1\11\27\1\27\0\1\1\3\0\1\11\1\0\44\1"+
    "\1\11\40\1\3\0\1\1\2\0\1\11\1\0\1\11"+
    "\14\0\2\1\2\0\1\1\1\0\75\1\1\0\2\11"+
    "\2\0\1\11\20\0\57\1\1\0\1\11\2\0\1\11"+
    "\1\0\2\11\2\0\1\11\10\0\36\1\3\0\2\11"+
    "\6\0\1\11\2\0\15\1\2\0\2\11\1\0\3\11"+
    "\1\0\2\11\5\1\1\0\2\11\1\0\1\1\2\11"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[751];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static final boolean DEBUG = true;

  private static final int DEFAULT_ESCAPE_CHARACTER = '\\';

  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    str.codePoints().iterator().forEachRemaining(new IntConsumer() {
      @Override
      public void accept(int ch) {
        int charCount = Character.charCount(ch);
        if (ch > 31 && ch < 127) {
          builder.append((char) ch);
        } else if (charCount == 1) {
          builder.append(String.format("\\u%04X", ch));
        } else {
          builder.append(String.format("\\U%06X", ch));
        }
      }
    });

    return builder.toString();
  }

  private final StringBuilder string = new StringBuilder(32);

  private IElementType BAD_LITERAL_REASON;
  private int GOTO_AFTER_ESCAPE_SEQUENCE;
  private int GOTO_AFTER_ESCAPE_SEQUENCE_FAIL;

  private int escapeCharacter;

  private Object value;

  public _SpLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
  }

  public int getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(int codePoint) {
    if (getEscapeCharacter() != codePoint) {
      this.escapeCharacter = codePoint;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", codePoint);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(int codePoint) {
    return codePoint == getEscapeCharacter();
  }

  private int codePointAt(int index) {
    final int length = yylength();
    if (index >= length) {
        throw new NoSuchElementException();
    }

    char c1 = zzBuffer.charAt(zzStartRead + index);
    index++;
    if (Character.isHighSurrogate(c1) && index < length) {
        char c2 = zzBuffer.charAt(zzStartRead + index);
        if (Character.isLowSurrogate(c2)) {
            return Character.toCodePoint(c1, c2);
        }
    }

    return c1;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SpLexer(java.io.Reader in) {
    resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_LINE_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [670] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"line comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return LINE_COMMENT; }");
              value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("line comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return LINE_COMMENT;
            }
            case 752: break;
            case IN_BLOCK_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [682] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 753: break;
            case IN_DOC_COMMENT_PRE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [697] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 754: break;
            case IN_DOC_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [705] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 755: break;
            case IN_DOC_COMMENT_POST: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [712] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 756: break;
            case IN_PREPROCESSOR_STRING: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [432] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"message = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          if (!((String)value).isEmpty()) {"+ZZ_NL+"                            return PREPROCESSOR_STRING;"+ZZ_NL+"                          } }");
              value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("message = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!((String)value).isEmpty()) {
                            return PREPROCESSOR_STRING;
                          }
            }
            case 757: break;
            case IN_PREPROCESSOR_PRAGMA_NEWDECLS: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [521] { yypushback(yylength()); yybegin(YYINITIAL); }");
              yypushback(yylength()); yybegin(YYINITIAL);
            }
            case 758: break;
            case IN_CHARACTER_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [551] { BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;"+ZZ_NL+"                          yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;
                          yybegin(IN_BAD_LITERAL);
            }
            case 759: break;
            case IN_CHARACTER_LITERAL_FINISH: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [566] { BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;"+ZZ_NL+"                          yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;
                          yybegin(IN_BAD_LITERAL);
            }
            case 760: break;
            case IN_STRING_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [590] { BAD_LITERAL_REASON = INCOMPLETE_STRING_LITERAL;"+ZZ_NL+"                          yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = INCOMPLETE_STRING_LITERAL;
                          yybegin(IN_BAD_LITERAL);
            }
            case 761: break;
            case IN_BAD_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [598] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"%s = %s%n\", BAD_LITERAL_REASON, value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return BAD_LITERAL_REASON; }");
              value = string.toString();
                          if (DEBUG) {
                            System.out.printf("%s = %s%n", BAD_LITERAL_REASON, value);
                          }

                          yybegin(YYINITIAL);
                          return BAD_LITERAL_REASON;
            }
            case 762: break;
            case IN_ESCAPE_SEQUENCE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [609] { yybegin(YYINITIAL); return BAD_ESCAPE_SEQUENCE; }");
              yybegin(YYINITIAL); return BAD_ESCAPE_SEQUENCE;
            }
            case 763: break;
            case IN_DECIMAL_ESCAPE_SEQUENCE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [648] { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL);
            }
            case 764: break;
            case IN_UNICODE_ESCAPE_SEQUENCE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [654] { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL);
            }
            case 765: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [649] { string.append(yytext()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE); }");
            { string.append(yytext()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
            }
          case 222: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [401] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          case 223: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [357] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          case 224: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [358] { return NEW_LINE; }");
            { return NEW_LINE;
            }
          case 225: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { return LBRACKET; }");
            { return LBRACKET;
            }
          case 226: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [367] { return AT_SIGN; }");
            { return AT_SIGN;
            }
          case 227: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [374] { value = SpUtils.parseNumber(yytext());"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"number %s = %d%n\", yytext(), value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          if (value == null) {"+ZZ_NL+"                            throw new AssertionError("+ZZ_NL+"                                value + \" should be a valid number, but it couldn\'t be parsed\");"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          return NUMBER_LITERAL; }");
            { value = SpUtils.parseNumber(yytext());
                          if (DEBUG) {
                            System.out.printf("number %s = %d%n", yytext(), value);
                          }

                          if (value == null) {
                            throw new AssertionError(
                                value + " should be a valid number, but it couldn't be parsed");
                          }

                          return NUMBER_LITERAL;
            }
          case 228: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [361] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          case 229: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [197] { return SEMICOLON; }");
            { return SEMICOLON;
            }
          case 230: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [364] { return UNDERSCORE; }");
            { return UNDERSCORE;
            }
          case 231: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [196] { return PERIOD; }");
            { return PERIOD;
            }
          case 232: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return MINUS; }");
            { return MINUS;
            }
          case 233: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return ASTERISK; }");
            { return ASTERISK;
            }
          case 234: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [193] { return COLON; }");
            { return COLON;
            }
          case 235: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [194] { return COMMA; }");
            { return COMMA;
            }
          case 236: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { yybegin(IN_PREPROCESSOR); return HASH; }");
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 237: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return AMPERSAND; }");
            { return AMPERSAND;
            }
          case 238: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return ASSIGN; }");
            { return ASSIGN;
            }
          case 239: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return CARET; }");
            { return CARET;
            }
          case 240: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return EXCLAMATION; }");
            { return EXCLAMATION;
            }
          case 241: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return PERCENT; }");
            { return PERCENT;
            }
          case 242: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return PLUS; }");
            { return PLUS;
            }
          case 243: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return SLASH; }");
            { return SLASH;
            }
          case 244: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return TILDE; }");
            { return TILDE;
            }
          case 245: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return VERTICAL_BAR; }");
            { return VERTICAL_BAR;
            }
          case 246: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { return GT; }");
            { return GT;
            }
          case 247: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { return LT; }");
            { return LT;
            }
          case 248: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { return LBRACE; }");
            { return LBRACE;
            }
          case 249: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return RBRACE; }");
            { return RBRACE;
            }
          case 250: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { return RBRACKET; }");
            { return RBRACKET;
            }
          case 251: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { return LPAREN; }");
            { return LPAREN;
            }
          case 252: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { return RPAREN; }");
            { return RPAREN;
            }
          case 253: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [338] { string.setLength(0); string.append(\'\\\'\');"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_CHARACTER_LITERAL_FINISH;"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;"+ZZ_NL+"                          BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { string.setLength(0); string.append('\'');
                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_CHARACTER_LITERAL_FINISH;
                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;
                          BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 254: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [345] { string.setLength(0); string.append(\'\\\"\');"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_STRING_LITERAL;"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;"+ZZ_NL+"                          BAD_LITERAL_REASON = BAD_STRING_LITERAL;"+ZZ_NL+"                          yybegin(IN_STRING_LITERAL); }");
            { string.setLength(0); string.append('\"');
                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_STRING_LITERAL;
                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;
                          BAD_LITERAL_REASON = BAD_STRING_LITERAL;
                          yybegin(IN_STRING_LITERAL);
            }
          case 255: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [678] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 256: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [661] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"line comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          return LINE_COMMENT; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("line comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          return LINE_COMMENT;
            }
          case 257: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [684] { string.append(\' \'); }");
            { string.append(' ');
            }
          case 258: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [699] { yybegin(IN_DOC_COMMENT); }");
            { yybegin(IN_DOC_COMMENT);
            }
          case 259: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [698] { /* ignore leading asterisks */ }");
            { /* ignore leading asterisks */
            }
          case 260: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [722] { throw new AssertionError("+ZZ_NL+"                              \"Doc comment terminator should already have been read \" +"+ZZ_NL+"                              \"and pushed back into the stream.\"); }");
            { throw new AssertionError(
                              "Doc comment terminator should already have been read " +
                              "and pushed back into the stream.");
            }
          case 261: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [419] { yybegin(YYINITIAL); yypushback(yylength()); }");
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          case 262: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [448] { yypushback(yylength()); yybegin(YYINITIAL); return BAD_CHARACTER; }");
            { yypushback(yylength()); yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 263: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [447] { yybegin(IN_PREPROCESSOR_INCLUDE); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_INCLUDE); return WHITE_SPACE;
            }
          case 264: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [456] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 265: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [452] { string.setLength(0);"+ZZ_NL+"                          yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH_PRE); }");
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH_PRE);
            }
          case 266: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [454] { string.setLength(0);"+ZZ_NL+"                          yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH_PRE); }");
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH_PRE);
            }
          case 267: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [461] { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH); }");
            { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH);
            }
          case 268: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [460] { yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH); }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH);
            }
          case 269: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [465] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"system file = \\\"%s\\\"%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return PREPROCESSOR_INCLUDE_SYSTEMPATH; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("system file = \"%s\"%n", value);
                          }

                          yybegin(YYINITIAL);
                          return PREPROCESSOR_INCLUDE_SYSTEMPATH;
            }
          case 270: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [479] { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH); }");
            { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH);
            }
          case 271: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [478] { yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH); }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH);
            }
          case 272: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [483] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"relative file = \\\"%s\\\"%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return PREPROCESSOR_INCLUDE_RELATIVEPATH; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("relative file = \"%s\"%n", value);
                          }

                          yybegin(YYINITIAL);
                          return PREPROCESSOR_INCLUDE_RELATIVEPATH;
            }
          case 273: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [495] { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITE_SPACE;
            }
          case 274: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [423] { string.setLength(0); yybegin(IN_PREPROCESSOR_STRING); }");
            { string.setLength(0); yybegin(IN_PREPROCESSOR_STRING);
            }
          case 275: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [432] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"message = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          if (!((String)value).isEmpty()) {"+ZZ_NL+"                            return PREPROCESSOR_STRING;"+ZZ_NL+"                          } }");
            { value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("message = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!((String)value).isEmpty()) {
                            return PREPROCESSOR_STRING;
                          }
            }
          case 276: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [513] { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITE_SPACE;
            }
          case 277: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [543] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (isEscapeCharacter(codePoint)) {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (isEscapeCharacter(codePoint)) {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_ESCAPE_SEQUENCE);
                          } else {
                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);
                          }
            }
          case 278: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [553] { BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 279: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [532] { string.append(\'\\\'\');"+ZZ_NL+"                          value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"character = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL); return EMPTY_CHARACTER_LITERAL; }");
            { string.append('\'');
                          value = string.toString();
                          if (DEBUG) {
                            System.out.printf("character = %s%n", value);
                          }

                          yybegin(YYINITIAL); return EMPTY_CHARACTER_LITERAL;
            }
          case 280: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [558] { string.append(\'\\\'\');"+ZZ_NL+"                          value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"character = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return CHARACTER_LITERAL; }");
            { string.append('\'');
                          value = string.toString();
                          if (DEBUG) {
                            System.out.printf("character = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 281: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [592] { BAD_LITERAL_REASON = BAD_STRING_LITERAL;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_STRING_LITERAL;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 282: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [573] { string.append(\'\\\"\');"+ZZ_NL+"                          value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"string = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return STRING_LITERAL; }");
            { string.append('\"');
                          value = string.toString();
                          if (DEBUG) {
                            System.out.printf("string = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 283: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [598] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"%s = %s%n\", BAD_LITERAL_REASON, value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return BAD_LITERAL_REASON; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("%s = %s%n", BAD_LITERAL_REASON, value);
                          }

                          yybegin(YYINITIAL);
                          return BAD_LITERAL_REASON;
            }
          case 284: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [634] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (isEscapeCharacter(codePoint)) {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;"+ZZ_NL+"                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (isEscapeCharacter(codePoint)) {
                            string.appendCodePoint(codePoint);
                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
                          } else {
                            BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;
                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);
                          }
            }
          case 285: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [643] { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 286: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [633] { yypushback(yylength()); yybegin(IN_DECIMAL_ESCAPE_SEQUENCE); }");
            { yypushback(yylength()); yybegin(IN_DECIMAL_ESCAPE_SEQUENCE);
            }
          case 287: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [610] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (codePoint == \'x\') {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_UNICODE_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            switch(codePoint) {"+ZZ_NL+"                              case \'a\': string.append(\'\\u0007\'); break;"+ZZ_NL+"                              case \'b\': string.append(\'\\b\'); break;"+ZZ_NL+"                              case \'e\': string.append(\'\\u001B\'); break;"+ZZ_NL+"                              case \'f\': string.append(\'\\f\'); break;"+ZZ_NL+"                              case \'n\': string.append(\'\\n\'); break;"+ZZ_NL+"                              case \'r\': string.append(\'\\r\'); break;"+ZZ_NL+"                              case \'t\': string.append(\'\\t\'); break;"+ZZ_NL+"                              case \'v\': string.append(\'\\u000B\'); break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError(String.format("+ZZ_NL+"                                    \"Unsupported control character: %c (%1$d)\", codePoint));"+ZZ_NL+"                            }"+ZZ_NL+""+ZZ_NL+"                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (codePoint == 'x') {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_UNICODE_ESCAPE_SEQUENCE);
                          } else {
                            switch(codePoint) {
                              case 'a': string.append('\u0007'); break;
                              case 'b': string.append('\b'); break;
                              case 'e': string.append('\u001B'); break;
                              case 'f': string.append('\f'); break;
                              case 'n': string.append('\n'); break;
                              case 'r': string.append('\r'); break;
                              case 't': string.append('\t'); break;
                              case 'v': string.append('\u000B'); break;
                              default:
                                throw new AssertionError(String.format(
                                    "Unsupported control character: %c (%1$d)", codePoint));
                            }

                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
                          }
            }
          case 288: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [650] { yypushback(yylength()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE); }");
            { yypushback(yylength()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
            }
          case 289: break;
          case 69: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [370] { return TAG; }");
            { return TAG;
            }
          case 290: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { return AS; }");
            { return AS;
            }
          case 291: break;
          case 71: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [371] { return TAG; }");
            { return TAG;
            }
          case 292: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { return RANGE; }");
            { return RANGE;
            }
          case 293: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return DECREMENT; }");
            { return DECREMENT;
            }
          case 294: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return SUBEQ; }");
            { return SUBEQ;
            }
          case 295: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return MULEQ; }");
            { return MULEQ;
            }
          case 296: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { return SCOPE_RESOLUTION; }");
            { return SCOPE_RESOLUTION;
            }
          case 297: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return AND; }");
            { return AND;
            }
          case 298: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return ANDEQ; }");
            { return ANDEQ;
            }
          case 299: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { return EQUALTO; }");
            { return EQUALTO;
            }
          case 300: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return XOREQ; }");
            { return XOREQ;
            }
          case 301: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return NEQUALTO; }");
            { return NEQUALTO;
            }
          case 302: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return MODEQ; }");
            { return MODEQ;
            }
          case 303: break;
          case 83: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return ADDEQ; }");
            { return ADDEQ;
            }
          case 304: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { return INCREMENT; }");
            { return INCREMENT;
            }
          case 305: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [354] { string.setLength(0); yybegin(IN_BLOCK_COMMENT); }");
            { string.setLength(0); yybegin(IN_BLOCK_COMMENT);
            }
          case 306: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return DIVEQ; }");
            { return DIVEQ;
            }
          case 307: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [352] { string.setLength(0); yybegin(IN_LINE_COMMENT); }");
            { string.setLength(0); yybegin(IN_LINE_COMMENT);
            }
          case 308: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return OREQ; }");
            { return OREQ;
            }
          case 309: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return OR; }");
            { return OR;
            }
          case 310: break;
          case 90: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return GTEQ; }");
            { return GTEQ;
            }
          case 311: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return SRA; }");
            { return SRA;
            }
          case 312: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return LTEQ; }");
            { return LTEQ;
            }
          case 313: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { return SL; }");
            { return SL;
            }
          case 314: break;
          case 94: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { return IF; }");
            { return IF;
            }
          case 315: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { return IN; }");
            { return IN;
            }
          case 316: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { return DO; }");
            { return DO;
            }
          case 317: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [685] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"block comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return BLOCK_COMMENT; }");
            { value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("block comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return BLOCK_COMMENT;
            }
          case 318: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [700] { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST); }");
            { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST);
            }
          case 319: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [713] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"doc comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          return DOC_COMMENT; }");
            { value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("doc comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          return DOC_COMMENT;
            }
          case 320: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [413] { yybegin(YYINITIAL); return PREPROCESSOR_IF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 321: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [430] { /* ignore whitespace */ }");
            { /* ignore whitespace */
            }
          case 322: break;
          case 102: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 29;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 30;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [526] { yybegin(YYINITIAL); return LABEL; }");
            { yybegin(YYINITIAL); return LABEL;
            }
          case 323: break;
          case 103: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [539] { int codePoint = codePointAt(0);"+ZZ_NL+"                          string.appendCodePoint(codePoint);"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL_FINISH); }");
            { int codePoint = codePointAt(0);
                          string.appendCodePoint(codePoint);
                          yybegin(IN_CHARACTER_LITERAL_FINISH);
            }
          case 324: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [581] { /* line continuation */ }");
            { /* line continuation */
            }
          case 325: break;
          case 105: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [388] { value = SpUtils.parseRational(yytext());"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"rational %s = %d%n\", yytext(), value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          if (value == null) {"+ZZ_NL+"                            throw new AssertionError("+ZZ_NL+"                                value + \" should be a valid rational, but it couldn\'t be parsed\");"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          return RATIONAL_LITERAL; }");
            { value = SpUtils.parseRational(yytext());
                          if (DEBUG) {
                            System.out.printf("rational %s = %d%n", yytext(), value);
                          }

                          if (value == null) {
                            throw new AssertionError(
                                value + " should be a valid rational, but it couldn't be parsed");
                          }

                          return RATIONAL_LITERAL;
            }
          case 326: break;
          case 106: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [362] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          case 327: break;
          case 107: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [317] { return TRY; }");
            { return TRY;
            }
          case 328: break;
          case 108: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [273] { return FOR; }");
            { return FOR;
            }
          case 329: break;
          case 109: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { return LET; }");
            { return LET;
            }
          case 330: break;
          case 110: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [365] { return UNDERSCORE; }");
            { return UNDERSCORE;
            }
          case 331: break;
          case 111: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [198] { return ELLIPSIS; }");
            { return ELLIPSIS;
            }
          case 332: break;
          case 112: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [328] { return VAR; }");
            { return VAR;
            }
          case 333: break;
          case 113: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [353] { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE); }");
            { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE);
            }
          case 334: break;
          case 114: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return SRAEQ; }");
            { return SRAEQ;
            }
          case 335: break;
          case 115: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return SRL; }");
            { return SRL;
            }
          case 336: break;
          case 116: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return SLEQ; }");
            { return SLEQ;
            }
          case 337: break;
          case 117: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { return INT; }");
            { return INT;
            }
          case 338: break;
          case 118: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { return NEW; }");
            { return NEW;
            }
          case 339: break;
          case 119: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 29;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 31;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [527] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 340: break;
          case 120: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { return THIS; }");
            { return THIS;
            }
          case 341: break;
          case 121: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [270] { return EXIT; }");
            { return EXIT;
            }
          case 342: break;
          case 122: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { return ELSE; }");
            { return ELSE;
            }
          case 343: break;
          case 123: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [269] { return ENUM; }");
            { return ENUM;
            }
          case 344: break;
          case 124: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [332] { return VOID; }");
            { return VOID;
            }
          case 345: break;
          case 125: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return SRLEQ; }");
            { return SRLEQ;
            }
          case 346: break;
          case 126: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [254] { yybegin(IN_CASE); return CASE; }");
            { yybegin(IN_CASE); return CASE;
            }
          case 347: break;
          case 127: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [258] { return CHAR; }");
            { return CHAR;
            }
          case 348: break;
          case 128: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [290] { return INTN; }");
            { return INTN;
            }
          case 349: break;
          case 129: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { return INT8; }");
            { return INT8;
            }
          case 350: break;
          case 130: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [296] { return NULL; }");
            { return NULL;
            }
          case 351: break;
          case 131: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { return DECL; }");
            { return DECL;
            }
          case 352: break;
          case 132: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [335] { return WITH; }");
            { return WITH;
            }
          case 353: break;
          case 133: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { return GOTO; }");
            { return GOTO;
            }
          case 354: break;
          case 134: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [406] { yybegin(YYINITIAL); return PREPROCESSOR_ELSE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 355: break;
          case 135: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [412] { yybegin(YYINITIAL); return PREPROCESSOR_FILE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 356: break;
          case 136: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [415] { yybegin(YYINITIAL); return PREPROCESSOR_LINE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 357: break;
          case 137: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 27;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 28;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [429] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 358: break;
          case 138: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { return BREAK; }");
            { return BREAK;
            }
          case 359: break;
          case 139: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { return TAGOF; }");
            { return TAGOF;
            }
          case 360: break;
          case 140: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [316] { return THROW; }");
            { return THROW;
            }
          case 361: break;
          case 141: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [327] { return USING; }");
            { return USING;
            }
          case 362: break;
          case 142: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [325] { return UINTN; }");
            { return UINTN;
            }
          case 363: break;
          case 143: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [321] { return UINT8; }");
            { return UINT8;
            }
          case 364: break;
          case 144: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { return UNION; }");
            { return UNION;
            }
          case 365: break;
          case 145: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { return STOCK; }");
            { return STOCK;
            }
          case 366: break;
          case 146: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { return SLEEP; }");
            { return SLEEP;
            }
          case 367: break;
          case 147: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { return CONST; }");
            { return CONST;
            }
          case 368: break;
          case 148: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return CATCH; }");
            { return CATCH;
            }
          case 369: break;
          case 149: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { return INT16; }");
            { return INT16;
            }
          case 370: break;
          case 150: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [288] { return INT64; }");
            { return INT64;
            }
          case 371: break;
          case 151: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { return INT32; }");
            { return INT32;
            }
          case 372: break;
          case 152: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [334] { return WHILE; }");
            { return WHILE;
            }
          case 373: break;
          case 153: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [418] { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 374: break;
          case 154: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [411] { yybegin(IN_PREPROCESSOR_STRING_PRE); return PREPROCESSOR_ERROR; }");
            { yybegin(IN_PREPROCESSOR_STRING_PRE); return PREPROCESSOR_ERROR;
            }
          case 375: break;
          case 155: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [408] { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 376: break;
          case 156: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { return OBJECT; }");
            { return OBJECT;
            }
          case 377: break;
          case 157: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { return TYPEOF; }");
            { return TYPEOF;
            }
          case 378: break;
          case 158: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [305] { return RETURN; }");
            { return RETURN;
            }
          case 379: break;
          case 159: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [322] { return UINT16; }");
            { return UINT16;
            }
          case 380: break;
          case 160: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { return UINT64; }");
            { return UINT64;
            }
          case 381: break;
          case 161: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [323] { return UINT32; }");
            { return UINT32;
            }
          case 382: break;
          case 162: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return ASSERT; }");
            { return ASSERT;
            }
          case 383: break;
          case 163: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { return STRUCT; }");
            { return STRUCT;
            }
          case 384: break;
          case 164: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [309] { return STATIC; }");
            { return STATIC;
            }
          case 385: break;
          case 165: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { return SEALED; }");
            { return SEALED;
            }
          case 386: break;
          case 166: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [307] { return SIZEOF; }");
            { return SIZEOF;
            }
          case 387: break;
          case 167: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { return SWITCH; }");
            { return SWITCH;
            }
          case 388: break;
          case 168: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { return IMPORT; }");
            { return IMPORT;
            }
          case 389: break;
          case 169: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { return NATIVE; }");
            { return NATIVE;
            }
          case 390: break;
          case 170: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [266] { return DOUBLE; }");
            { return DOUBLE;
            }
          case 391: break;
          case 171: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { return DELETE; }");
            { return DELETE;
            }
          case 392: break;
          case 172: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { return PUBLIC; }");
            { return PUBLIC;
            }
          case 393: break;
          case 173: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [407] { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 394: break;
          case 174: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [404] { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 395: break;
          case 175: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [405] { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE;
            }
          case 396: break;
          case 176: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [416] { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA;
            }
          case 397: break;
          case 177: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [508] { yybegin(YYINITIAL); return PRAGMA_UNUSED; }");
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 398: break;
          case 178: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { return BUILTIN; }");
            { return BUILTIN;
            }
          case 399: break;
          case 179: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [320] { return TYPESET; }");
            { return TYPESET;
            }
          case 400: break;
          case 180: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [318] { return TYPEDEF; }");
            { return TYPEDEF;
            }
          case 401: break;
          case 181: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { return FOREACH; }");
            { return FOREACH;
            }
          case 402: break;
          case 182: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [275] { return FORWARD; }");
            { return FORWARD;
            }
          case 403: break;
          case 183: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [277] { return FUNCTAG; }");
            { return FUNCTAG;
            }
          case 404: break;
          case 184: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [272] { return FINALLY; }");
            { return FINALLY;
            }
          case 405: break;
          case 185: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return ACQUIRE; }");
            { return ACQUIRE;
            }
          case 406: break;
          case 186: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { return VARIANT; }");
            { return VARIANT;
            }
          case 407: break;
          case 187: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [331] { return VIRTUAL; }");
            { return VIRTUAL;
            }
          case 408: break;
          case 188: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [330] { return VIEW_AS; }");
            { return VIEW_AS;
            }
          case 409: break;
          case 189: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return CELLSOF; }");
            { return CELLSOF;
            }
          case 410: break;
          case 190: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { return CAST_TO; }");
            { return CAST_TO;
            }
          case 411: break;
          case 191: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { return DEFAULT; }");
            { return DEFAULT;
            }
          case 412: break;
          case 192: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { return DEFINED; }");
            { return DEFINED;
            }
          case 413: break;
          case 193: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { return PRIVATE; }");
            { return PRIVATE;
            }
          case 414: break;
          case 194: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { return PACKAGE; }");
            { return PACKAGE;
            }
          case 415: break;
          case 195: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [414] { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_INCLUDE; }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_INCLUDE;
            }
          case 416: break;
          case 196: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [507] { yybegin(YYINITIAL); return PRAGMA_TABSIZE; }");
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 417: break;
          case 197: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [503] { yybegin(YYINITIAL); return PRAGMA_DYNAMIC; }");
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 418: break;
          case 198: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { return OPERATOR; }");
            { return OPERATOR;
            }
          case 419: break;
          case 199: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [304] { return READONLY; }");
            { return READONLY;
            }
          case 420: break;
          case 200: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { return EXPLICIT; }");
            { return EXPLICIT;
            }
          case 421: break;
          case 201: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { return FUNCTION; }");
            { return FUNCTION;
            }
          case 422: break;
          case 202: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { return FUNCENUM; }");
            { return FUNCENUM;
            }
          case 423: break;
          case 203: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { return VOLATILE; }");
            { return VOLATILE;
            }
          case 424: break;
          case 204: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { return CONTINUE; }");
            { return CONTINUE;
            }
          case 425: break;
          case 205: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [281] { return IMPLICIT; }");
            { return IMPLICIT;
            }
          case 426: break;
          case 206: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [409] { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 427: break;
          case 207: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [504] { yybegin(YYINITIAL); return PRAGMA_RATIONAL; }");
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 428: break;
          case 208: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [500] { yybegin(YYINITIAL); return PRAGMA_CODEPAGE; }");
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 429: break;
          case 209: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [501] { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR; }");
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 430: break;
          case 210: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [506] { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS;
            }
          case 431: break;
          case 211: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [519] { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL; }");
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL;
            }
          case 432: break;
          case 212: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [518] { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED; }");
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED;
            }
          case 433: break;
          case 213: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [289] { return INTERFACE; }");
            { return INTERFACE;
            }
          case 434: break;
          case 214: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [293] { return NAMESPACE; }");
            { return NAMESPACE;
            }
          case 435: break;
          case 215: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { return METHODMAP; }");
            { return METHODMAP;
            }
          case 436: break;
          case 216: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [302] { return PROTECTED; }");
            { return PROTECTED;
            }
          case 437: break;
          case 217: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [410] { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 438: break;
          case 218: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [505] { yybegin(YYINITIAL); return PRAGMA_SEMICOLON; }");
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 439: break;
          case 219: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [417] { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_TRYINCLUDE; }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_TRYINCLUDE;
            }
          case 440: break;
          case 220: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [502] { yybegin(IN_PREPROCESSOR_STRING_PRE); return PRAGMA_DEPRECATED; }");
            { yybegin(IN_PREPROCESSOR_STRING_PRE); return PRAGMA_DEPRECATED;
            }
          case 441: break;
          case 221: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [297] { return NULLABLE; }");
            { return NULLABLE;
            }
          case 442: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _SpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _SpLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _SpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
