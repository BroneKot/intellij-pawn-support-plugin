/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.sourcemod.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.annotations.NotNull;

import static net.sourcemod.sourcepawn.lexer.SpTokenTypes.*;

import java.io.Reader;
import java.util.function.IntConsumer;
import java.util.NoSuchElementException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpLexer.flex</tt>
 */
public class _SpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT = 2;
  public static final int IN_BLOCK_COMMENT = 4;
  public static final int IN_DOC_COMMENT_PRE = 6;
  public static final int IN_DOC_COMMENT = 8;
  public static final int IN_DOC_COMMENT_POST = 10;
  public static final int IN_PREPROCESSOR = 12;
  public static final int IN_PREPROCESSOR_DEFINE_PRE = 14;
  public static final int IN_PREPROCESSOR_DEFINE_PATTERN = 16;
  public static final int IN_PREPROCESSOR_DEFINE_PATTERN_ARGS = 18;
  public static final int IN_PREPROCESSOR_DEFINE_SUBSTITUTION_PRE = 20;
  public static final int IN_PREPROCESSOR_DEFINE_SUBSTITUTION = 22;
  public static final int IN_PREPROCESSOR_INCLUDE_PRE = 24;
  public static final int IN_PREPROCESSOR_INCLUDE = 26;
  public static final int IN_PREPROCESSOR_INCLUDE_SYSTEMPATH_PRE = 28;
  public static final int IN_PREPROCESSOR_INCLUDE_SYSTEMPATH = 30;
  public static final int IN_PREPROCESSOR_INCLUDE_RELATIVEPATH_PRE = 32;
  public static final int IN_PREPROCESSOR_INCLUDE_RELATIVEPATH = 34;
  public static final int IN_PREPROCESSOR_PRAGMA_PRE = 36;
  public static final int IN_PREPROCESSOR_PRAGMA = 38;
  public static final int IN_PREPROCESSOR_STRING_PRE = 40;
  public static final int IN_PREPROCESSOR_STRING = 42;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE = 44;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS = 46;
  public static final int IN_CASE = 48;
  public static final int IN_CHARACTER_LITERAL = 50;
  public static final int IN_CHARACTER_LITERAL_FINISH = 52;
  public static final int IN_STRING_LITERAL = 54;
  public static final int IN_BAD_LITERAL = 56;
  public static final int IN_ESCAPE_SEQUENCE = 58;
  public static final int IN_DECIMAL_ESCAPE_SEQUENCE = 60;
  public static final int IN_UNICODE_ESCAPE_SEQUENCE = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 10, 10, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\45\1\105\1\41\1\0\1\35\1\42\1\104\1\57"+
    "\1\60\1\36\1\46\1\40\1\33\1\32\1\47\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\37\1\20\1\53\1\43\1\52\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\44"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\51\1\55\1\50\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\2\1\5\0\1\2\1\3\2\4\1\5\1\2"+
    "\1\6\1\7\1\10\1\7\2\10\1\11\10\10\1\12"+
    "\1\13\1\14\1\10\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\10\10"+
    "\1\41\1\42\2\43\2\44\1\43\1\45\1\43\2\46"+
    "\1\47\1\43\2\45\1\43\2\50\12\51\1\52\1\53"+
    "\1\52\1\54\1\55\1\56\1\54\1\57\1\56\2\0"+
    "\1\60\1\61\1\52\1\62\1\63\1\62\1\64\1\65"+
    "\1\66\1\67\1\66\2\43\1\70\1\71\1\72\1\71"+
    "\2\43\1\73\1\74\10\52\2\43\2\75\1\43\1\76"+
    "\6\52\1\77\1\100\1\101\1\102\1\103\1\54\1\104"+
    "\2\105\1\106\1\107\1\110\1\111\1\1\1\112\2\1"+
    "\7\0\1\3\1\7\1\0\1\113\3\7\22\10\1\114"+
    "\10\10\1\115\1\116\1\117\1\120\3\10\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
    "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142"+
    "\1\143\4\10\1\144\1\145\4\10\1\146\10\10\1\45"+
    "\1\147\1\0\1\150\4\0\1\151\10\0\1\152\4\0"+
    "\1\53\1\0\1\55\1\56\1\153\1\0\1\61\1\0"+
    "\1\63\1\0\1\67\4\0\1\72\4\0\1\74\12\0"+
    "\1\43\1\0\2\154\1\0\1\76\5\0\1\155\1\156"+
    "\1\0\2\157\1\1\4\0\1\160\1\161\4\10\1\162"+
    "\15\10\1\163\4\10\1\164\10\10\1\165\1\166\2\10"+
    "\1\167\2\10\1\133\1\170\1\171\1\172\1\173\5\10"+
    "\1\174\2\10\1\175\16\10\27\0\1\43\3\0\1\176"+
    "\1\0\6\10\1\177\6\10\1\200\1\10\1\201\1\202"+
    "\17\10\1\203\3\10\1\204\5\10\1\205\1\206\2\10"+
    "\1\207\1\210\4\10\1\211\6\10\1\212\5\10\1\213"+
    "\1\10\1\214\1\46\3\0\1\215\2\0\1\216\1\0"+
    "\1\217\14\0\2\220\2\0\1\160\1\0\1\221\3\10"+
    "\1\222\1\223\5\10\1\224\1\10\1\225\1\226\2\10"+
    "\1\227\10\10\1\230\3\10\1\231\10\10\1\232\1\10"+
    "\1\233\1\10\1\234\1\10\1\235\1\236\15\10\1\237"+
    "\1\0\1\240\1\241\2\0\1\242\20\0\1\10\1\243"+
    "\1\10\1\244\2\10\1\245\1\10\1\246\1\247\1\250"+
    "\7\10\1\251\1\10\1\252\1\253\1\254\1\255\1\256"+
    "\11\10\1\257\1\10\1\260\1\10\1\261\2\10\1\262"+
    "\3\10\1\263\1\10\1\0\1\264\2\0\1\265\1\0"+
    "\1\266\1\267\2\0\1\270\10\0\1\271\1\10\1\272"+
    "\1\273\2\10\1\274\1\275\1\276\2\10\1\277\1\300"+
    "\2\10\1\301\1\302\1\303\1\10\1\304\1\305\3\10"+
    "\1\306\1\307\2\10\1\310\1\311\3\0\1\312\1\313"+
    "\6\0\1\314\2\0\1\315\1\316\1\317\1\320\1\321"+
    "\1\10\1\322\1\323\1\10\1\324\3\10\2\0\1\325"+
    "\1\326\1\0\1\327\1\330\1\331\1\0\1\332\1\333"+
    "\1\10\1\334\1\335\1\336\1\337\1\0\1\340\1\341"+
    "\1\0\1\10\1\342\1\343\1\10\1\344";

  private static int [] zzUnpackAction() {
    int [] result = new int[771];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u030d\0\u09fc\0\u030d\0\u0a43"+
    "\0\u030d\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u030d\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d"+
    "\0\u030d\0\u030d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207"+
    "\0\u030d\0\u124e\0\u1295\0\u12dc\0\u030d\0\u030d\0\u030d\0\u030d"+
    "\0\u030d\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f\0\u1486\0\u14cd"+
    "\0\u1514\0\u030d\0\u030d\0\u030d\0\u155b\0\u030d\0\u15a2\0\u15e9"+
    "\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821"+
    "\0\u1868\0\u030d\0\u18af\0\u030d\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u030d\0\u1b75\0\u1bbc"+
    "\0\u030d\0\u1c03\0\u030d\0\u1c4a\0\u030d\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u030d\0\u1d66\0\u1dad\0\u030d\0\u1df4\0\u1e3b\0\u030d\0\u030d"+
    "\0\u030d\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u030d\0\u030d\0\u1f9e"+
    "\0\u1fe5\0\u202c\0\u2073\0\u030d\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u030d"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u0a8a\0\u2571"+
    "\0\u25b8\0\u25ff\0\u030d\0\u25ff\0\u030d\0\u030d\0\u2646\0\u030d"+
    "\0\u030d\0\u268d\0\u030d\0\u030d\0\u030d\0\u030d\0\u030d\0\u030d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u2837\0\u287e"+
    "\0\u0a8a\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117"+
    "\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u030d\0\u030d\0\u32c1"+
    "\0\u3308\0\u334f\0\u030d\0\u030d\0\u030d\0\u030d\0\u030d\0\u030d"+
    "\0\u030d\0\u030d\0\u030d\0\u030d\0\u3396\0\u030d\0\u33dd\0\u030d"+
    "\0\u030d\0\u030d\0\u3424\0\u030d\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u0b5f\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u030d\0\u39f7\0\u030d\0\u1793\0\u3a3e\0\u1868\0\u18af"+
    "\0\u030d\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f"+
    "\0\u3c76\0\u030d\0\u3cbd\0\u3d04\0\u3d4b\0\u1bbc\0\u3d92\0\u1c4a"+
    "\0\u3dd9\0\u3e20\0\u030d\0\u1dad\0\u3e67\0\u1e3b\0\u3eae\0\u1ec9"+
    "\0\u3ef5\0\u1f57\0\u1f10\0\u3f3c\0\u1fe5\0\u3f83\0\u2073\0\u202c"+
    "\0\u3fca\0\u2101\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174"+
    "\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac"+
    "\0\u43f3\0\u249c\0\u443a\0\u4481\0\u44c8\0\u25b8\0\u450f\0\u4556"+
    "\0\u459d\0\u030d\0\u2646\0\u45e4\0\u462b\0\u4672\0\u2762\0\u030d"+
    "\0\u46b9\0\u4700\0\u4747\0\u030d\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u0b5f\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54"+
    "\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c"+
    "\0\u4cd3\0\u4d1a\0\u4d61\0\u0b5f\0\u4da8\0\u4def\0\u4e36\0\u4e7d"+
    "\0\u4ec4\0\u4f0b\0\u4f52\0\u4f99\0\u030d\0\u030d\0\u4fe0\0\u5027"+
    "\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u518a\0\u030d\0\u51d1\0\u030d"+
    "\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409"+
    "\0\u0b5f\0\u5450\0\u5497\0\u54de\0\u5525\0\u556c\0\u55b3\0\u55fa"+
    "\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832"+
    "\0\u39b0\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995\0\u59dc\0\u5a23"+
    "\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b"+
    "\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77\0\u5dbe\0\u5e05\0\u5e05\0\u5e4c"+
    "\0\u5e93\0\u5eda\0\u030d\0\u5f21\0\u5f68\0\u5faf\0\u5ff6\0\u603d"+
    "\0\u6084\0\u60cb\0\u0b5f\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e"+
    "\0\u6275\0\u0b5f\0\u62bc\0\u0b5f\0\u0b5f\0\u6303\0\u634a\0\u6391"+
    "\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9"+
    "\0\u6610\0\u6657\0\u669e\0\u66e5\0\u0b5f\0\u672c\0\u6773\0\u67ba"+
    "\0\u030d\0\u6801\0\u6848\0\u688f\0\u68d6\0\u691d\0\u0b5f\0\u0b5f"+
    "\0\u6964\0\u69ab\0\u0b5f\0\u0b5f\0\u69f2\0\u6a39\0\u6a80\0\u6ac7"+
    "\0\u0b5f\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u0b5f"+
    "\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u0b5f\0\u6e1b\0\u0b5f"+
    "\0\u5832\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5\0\u030d"+
    "\0\u700c\0\u030d\0\u7053\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6"+
    "\0\u71fd\0\u7244\0\u728b\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee"+
    "\0\u7435\0\u747c\0\u74c3\0\u74c3\0\u0b5f\0\u750a\0\u7551\0\u7598"+
    "\0\u0b5f\0\u0b5f\0\u75df\0\u7626\0\u766d\0\u76b4\0\u76fb\0\u0b5f"+
    "\0\u7742\0\u0b5f\0\u0b5f\0\u7789\0\u77d0\0\u0b5f\0\u7817\0\u785e"+
    "\0\u78a5\0\u78ec\0\u7933\0\u797a\0\u79c1\0\u7a08\0\u0b5f\0\u7a4f"+
    "\0\u7a96\0\u7add\0\u0b5f\0\u7b24\0\u7b6b\0\u7bb2\0\u7bf9\0\u7c40"+
    "\0\u7c87\0\u7cce\0\u7d15\0\u0b5f\0\u7d5c\0\u0b5f\0\u7da3\0\u0b5f"+
    "\0\u7dea\0\u0b5f\0\u0b5f\0\u7e31\0\u7e78\0\u7ebf\0\u7f06\0\u7f4d"+
    "\0\u7f94\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u80f7\0\u813e\0\u8185"+
    "\0\u0b5f\0\u81cc\0\u030d\0\u030d\0\u8213\0\u825a\0\u030d\0\u82a1"+
    "\0\u82e8\0\u832f\0\u8376\0\u83bd\0\u8404\0\u844b\0\u8492\0\u84d9"+
    "\0\u8520\0\u8567\0\u85ae\0\u85f5\0\u863c\0\u8683\0\u86ca\0\u8711"+
    "\0\u0b5f\0\u8758\0\u0b5f\0\u879f\0\u87e6\0\u0b5f\0\u882d\0\u0b5f"+
    "\0\u0b5f\0\u0b5f\0\u8874\0\u88bb\0\u8902\0\u8949\0\u8990\0\u89d7"+
    "\0\u8a1e\0\u0b5f\0\u8a65\0\u0b5f\0\u0b5f\0\u0b5f\0\u0b5f\0\u0b5f"+
    "\0\u8aac\0\u8af3\0\u8b3a\0\u8b81\0\u8bc8\0\u8c0f\0\u8c56\0\u8c9d"+
    "\0\u8ce4\0\u0b5f\0\u8d2b\0\u0b5f\0\u8d72\0\u0b5f\0\u8db9\0\u8e00"+
    "\0\u0b5f\0\u8e47\0\u8e8e\0\u8ed5\0\u0b5f\0\u8f1c\0\u8f63\0\u030d"+
    "\0\u8faa\0\u8ff1\0\u030d\0\u9038\0\u030d\0\u030d\0\u907f\0\u90c6"+
    "\0\u030d\0\u910d\0\u9154\0\u919b\0\u91e2\0\u9229\0\u9270\0\u92b7"+
    "\0\u92fe\0\u0b5f\0\u9345\0\u0b5f\0\u0b5f\0\u938c\0\u93d3\0\u0b5f"+
    "\0\u0b5f\0\u0b5f\0\u941a\0\u9461\0\u0b5f\0\u0b5f\0\u94a8\0\u94ef"+
    "\0\u0b5f\0\u0b5f\0\u0b5f\0\u9536\0\u0b5f\0\u0b5f\0\u957d\0\u95c4"+
    "\0\u960b\0\u0b5f\0\u0b5f\0\u9652\0\u9699\0\u0b5f\0\u0b5f\0\u96e0"+
    "\0\u9727\0\u976e\0\u030d\0\u030d\0\u97b5\0\u97fc\0\u9843\0\u988a"+
    "\0\u98d1\0\u9918\0\u030d\0\u995f\0\u99a6\0\u0b5f\0\u0b5f\0\u0b5f"+
    "\0\u0b5f\0\u0b5f\0\u99ed\0\u0b5f\0\u0b5f\0\u9a34\0\u0b5f\0\u9a7b"+
    "\0\u9ac2\0\u9b09\0\u9b50\0\u9b97\0\u030d\0\u030d\0\u9bde\0\u030d"+
    "\0\u030d\0\u030d\0\u9c25\0\u030d\0\u030d\0\u9c6c\0\u0b5f\0\u0b5f"+
    "\0\u0b5f\0\u0b5f\0\u9cb3\0\u030d\0\u030d\0\u9cfa\0\u9d41\0\u030d"+
    "\0\u030d\0\u9d88\0\u0b5f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[771];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\2\54\1\55\1\56\1\57\1\60\1\55\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\55\1\123\1\55\1\124\1\55\1\125\1\126"+
    "\1\127\1\55\1\130\1\131\5\54\2\55\1\132\1\133"+
    "\1\45\1\134\1\135\1\136\1\137\104\134\1\140\2\141"+
    "\32\134\1\142\52\134\1\143\1\144\32\134\1\145\51\134"+
    "\1\146\1\147\1\150\32\134\1\151\50\134\36\152\1\153"+
    "\50\152\21\154\1\155\1\154\1\156\1\157\1\160\1\161"+
    "\1\162\33\154\1\163\3\154\1\164\1\154\1\165\15\154"+
    "\1\166\1\167\3\166\1\170\101\166\1\171\1\172\2\173"+
    "\1\171\1\174\51\171\1\175\26\171\1\173\1\0\1\176"+
    "\3\0\1\177\27\0\1\200\2\0\1\101\17\0\1\201"+
    "\26\0\1\166\1\202\3\166\1\203\101\166\107\0\1\204"+
    "\1\205\3\204\1\206\101\204\53\166\1\207\31\166\1\210"+
    "\1\166\1\211\1\212\3\211\1\213\101\211\1\134\1\214"+
    "\3\134\1\215\44\134\1\216\34\134\1\217\1\220\3\217"+
    "\1\221\101\217\1\134\1\222\3\134\1\223\77\134\1\224"+
    "\1\134\1\166\1\225\3\166\1\226\122\166\1\227\1\230"+
    "\1\231\4\166\1\232\30\166\1\233\3\166\1\234\1\166"+
    "\1\235\17\166\1\236\1\237\1\240\1\241\1\236\1\242"+
    "\100\236\1\134\1\166\1\243\3\166\1\244\117\166\1\245"+
    "\3\166\1\246\65\166\1\46\3\166\1\247\1\250\1\166"+
    "\1\251\2\166\1\251\1\166\3\251\1\166\10\251\1\250"+
    "\2\166\1\251\24\166\14\251\5\166\2\251\3\166\2\252"+
    "\2\253\100\252\1\254\1\252\105\253\1\255\2\253\2\171"+
    "\2\256\1\171\1\257\77\171\1\260\1\256\2\134\1\261"+
    "\1\262\103\134\2\263\2\264\3\263\1\265\1\263\2\265"+
    "\1\263\1\265\1\266\1\263\1\266\1\263\2\266\1\263"+
    "\3\266\5\263\1\266\1\267\27\263\1\266\7\263\5\265"+
    "\2\263\2\267\1\264\7\270\1\271\1\270\2\271\1\270"+
    "\1\271\3\270\1\267\54\270\5\271\14\270\1\272\1\270"+
    "\5\272\2\270\1\267\3\270\3\272\32\270\1\272\5\270"+
    "\1\272\5\270\5\272\5\270\2\273\2\0\102\273\2\0"+
    "\1\41\1\274\1\275\111\0\1\276\1\0\1\277\2\0"+
    "\1\277\1\0\3\277\1\0\10\277\1\276\2\0\1\277"+
    "\24\0\14\277\5\0\2\277\42\0\1\300\106\0\1\43"+
    "\50\0\1\46\3\0\1\301\103\0\1\47\105\0\1\301"+
    "\1\46\1\302\111\0\12\55\1\0\11\55\2\0\1\55"+
    "\24\0\23\55\12\0\1\303\1\0\2\303\1\0\1\303"+
    "\14\0\1\303\1\304\42\0\5\303\13\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\23\55\12\0"+
    "\1\303\1\0\2\303\1\0\1\303\1\306\1\307\1\310"+
    "\11\0\1\303\1\304\42\0\5\303\13\0\12\55\1\0"+
    "\1\55\1\311\1\312\6\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\7\55\1\313\2\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\10\55\1\314\12\55"+
    "\11\0\12\55\1\0\1\55\1\315\3\55\1\316\3\55"+
    "\2\0\1\55\2\0\1\305\21\0\5\55\1\317\3\55"+
    "\1\320\11\55\11\0\12\55\1\0\3\55\1\321\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\7\55\1\322\1\55\2\0\1\55\2\0\1\305"+
    "\21\0\2\55\1\323\1\55\1\324\16\55\11\0\11\55"+
    "\1\325\1\0\6\55\1\326\2\55\2\0\1\55\2\0"+
    "\1\305\21\0\4\55\1\327\16\55\11\0\10\55\1\330"+
    "\1\55\1\0\2\55\1\331\6\55\2\0\1\55\2\0"+
    "\1\305\21\0\2\55\1\332\20\55\11\0\12\55\1\0"+
    "\7\55\1\333\1\55\2\0\1\55\2\0\1\305\21\0"+
    "\1\334\22\55\11\0\12\55\1\0\3\55\1\335\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\1\336\2\55\1\337\2\55\1\340\2\55\2\0"+
    "\1\55\2\0\1\305\21\0\2\55\1\341\7\55\1\342"+
    "\10\55\11\0\12\55\1\0\10\55\1\343\2\0\1\55"+
    "\2\0\1\344\21\0\23\55\35\0\1\345\107\0\1\346"+
    "\7\0\1\347\51\0\10\55\1\350\1\55\1\0\5\55"+
    "\1\351\3\55\2\0\1\55\2\0\1\305\21\0\2\55"+
    "\1\352\20\55\46\0\1\353\106\0\1\354\102\0\1\355"+
    "\111\0\1\356\1\357\106\0\1\360\106\0\1\361\106\0"+
    "\1\362\106\0\1\363\2\0\1\364\76\0\1\365\4\0"+
    "\1\366\3\0\1\367\102\0\1\370\5\0\1\371\100\0"+
    "\1\372\6\0\1\373\77\0\1\374\7\0\1\375\41\0"+
    "\10\55\1\376\1\55\1\0\3\55\1\377\1\55\1\u0100"+
    "\3\55\2\0\1\55\2\0\1\305\21\0\5\55\1\u0101"+
    "\15\55\11\0\12\55\1\0\4\55\1\u0102\4\55\2\0"+
    "\1\55\2\0\1\305\21\0\4\55\1\u0103\2\55\1\u0104"+
    "\13\55\11\0\12\55\1\0\2\55\1\u0105\1\u0106\1\55"+
    "\1\u0107\3\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\10\55\1\u0108\1\55\1\0\3\55\1\u0109\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\3\55\1\u010a\5\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\1\55\1\u010b\1\u010c"+
    "\2\55\1\u010d\3\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\2\55\1\u010e\2\55\1\u010f\15\55\11\0"+
    "\10\55\1\u0110\1\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\3\0\1\134\1\135\1\136\1\137"+
    "\102\134\3\0\1\136\104\0\1\134\1\140\2\141\32\134"+
    "\1\142\47\134\2\0\1\u0111\2\141\152\0\1\u0112\40\0"+
    "\1\u0113\106\0\1\u0113\1\143\106\0\1\143\1\144\32\0"+
    "\1\145\10\0\1\u0114\40\0\1\u0115\1\147\1\150\104\0"+
    "\1\u0116\106\0\1\u0116\1\147\142\0\1\u0117\10\0\1\u0114"+
    "\75\0\1\u0118\10\0\1\u0119\61\0\1\u011a\151\0\1\u011b"+
    "\43\0\1\u011c\4\0\1\u011d\35\0\1\u011e\104\0\1\u011f"+
    "\53\0\1\u0120\141\0\1\u0121\50\0\1\u0122\37\0\1\u0123"+
    "\45\0\1\u0124\104\0\1\u0125\65\0\1\167\3\0\1\u0126"+
    "\102\0\1\u0126\1\167\1\u0127\104\0\1\172\3\0\1\u0128"+
    "\102\0\1\u0128\1\172\1\u0129\104\0\1\176\3\0\1\177"+
    "\102\0\1\177\1\176\1\u012a\112\0\1\u012b\1\0\2\u012b"+
    "\1\0\1\u012b\60\0\5\u012b\6\0\1\202\3\0\1\u012c"+
    "\102\0\1\u012c\1\202\1\u012d\104\0\1\205\3\0\1\u012e"+
    "\102\0\1\u012e\1\205\1\u012f\104\0\1\212\3\0\1\u0130"+
    "\102\0\1\u0130\1\212\1\u0131\103\0\1\134\1\214\2\0"+
    "\1\134\1\215\44\134\1\216\33\134\2\0\1\u0132\1\u0133"+
    "\1\u0134\104\0\1\220\3\0\1\u0135\102\0\1\u0135\1\220"+
    "\1\u0136\103\0\1\134\1\222\2\0\1\134\1\223\77\134"+
    "\1\224\2\0\1\u0137\1\u0138\1\u0139\104\0\1\225\3\0"+
    "\1\u013a\102\0\1\u013a\1\225\1\u013b\131\0\1\u013c\106\0"+
    "\1\u013d\145\0\1\u013e\45\0\1\u013f\100\0\1\u0140\2\0"+
    "\1\u0141\111\0\1\u0142\106\0\1\u0143\45\0\1\u0144\15\0"+
    "\1\u0145\105\0\1\134\1\u0146\1\240\1\241\102\134\3\0"+
    "\1\240\105\0\1\u0147\1\u0148\1\u0149\104\0\1\243\3\0"+
    "\1\u014a\102\0\1\u014a\1\243\1\u014b\174\0\1\u014c\41\0"+
    "\1\u014d\70\0\12\u014e\1\0\11\u014e\2\0\1\u014e\24\0"+
    "\23\u014e\4\0\1\u014f\3\0\1\u0150\12\u014e\1\0\11\u014e"+
    "\2\0\1\u014e\2\0\1\u0151\21\0\23\u014e\107\0\1\u0152"+
    "\3\0\1\u0153\1\u0154\1\u0155\105\0\1\261\113\0\1\271"+
    "\1\0\2\271\1\0\1\271\3\0\1\267\54\0\5\271"+
    "\14\0\1\u0156\1\0\5\u0156\2\0\1\267\3\0\3\u0156"+
    "\32\0\1\u0156\5\0\1\u0156\5\0\5\u0156\6\0\1\u0157"+
    "\106\0\1\275\1\0\1\275\1\0\1\u0158\102\0\1\275"+
    "\3\0\1\u0158\107\0\12\277\1\0\11\277\2\0\1\277"+
    "\24\0\23\277\4\0\1\300\1\u0159\1\u015a\104\0\2\46"+
    "\2\0\1\301\110\0\1\303\1\0\2\303\1\0\1\303"+
    "\14\0\1\303\43\0\5\303\14\0\1\u015b\1\0\2\u015b"+
    "\1\0\1\u015b\60\0\5\u015b\44\0\1\u015c\60\0\1\306"+
    "\2\0\1\306\14\0\1\306\66\0\2\307\1\0\1\307"+
    "\14\0\1\307\44\0\4\307\14\0\1\310\1\0\5\310"+
    "\6\0\3\310\2\0\1\310\27\0\1\310\5\0\1\310"+
    "\5\0\5\310\13\0\12\55\1\0\3\55\1\u015d\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\2\55"+
    "\1\u015e\20\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\21\55\1\u015f\1\55\11\0\12\55"+
    "\1\0\3\55\1\u0160\5\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\11\55\1\u0161\11\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\13\55"+
    "\1\u0162\7\55\11\0\12\55\1\0\1\55\1\u0163\7\55"+
    "\2\0\1\55\2\0\1\305\21\0\2\55\1\u0164\20\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\10\55\1\u0165\12\55\11\0\12\55\1\0\1\u0166"+
    "\4\55\1\u0167\3\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\2\55\1\u0168\20\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\4\55\1\u0169"+
    "\16\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\2\55\1\u016a\20\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\2\55\1\u016b"+
    "\5\55\1\u016c\12\55\11\0\12\55\1\0\7\55\1\u016d"+
    "\1\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\2\55\1\u016e\6\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\1\55\1\u016f"+
    "\7\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\4\55\1\u0170\16\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\4\55\1\u0171\16\55\11\0"+
    "\12\55\1\0\7\55\1\u0172\1\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\1\55\1\u0173\21\55\11\0"+
    "\12\55\1\0\1\u0174\10\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\10\55\1\u0175\1\55\1\0\1\55"+
    "\1\u0176\3\55\1\u0177\3\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\5\55\1\u0178\3\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\3\55\1\u0179\5\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\22\55\1\u017a\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\2\55\1\u017b"+
    "\20\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\4\55\1\u017c\16\55\42\0\1\u017d\101\0"+
    "\1\u017e\62\0\12\55\1\0\6\55\1\u017f\2\55\2\0"+
    "\1\55\2\0\1\305\21\0\2\55\1\u0180\20\55\11\0"+
    "\12\55\1\0\1\55\1\u0181\7\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\1\55\1\u0182"+
    "\1\55\1\u0183\5\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\4\0\1\u0184\34\0\1\u0185\51\0\1\367\150\0"+
    "\1\u0186\6\0\1\u0187\77\0\1\u0188\51\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\4\55\1\u0189"+
    "\16\55\11\0\12\55\1\0\6\55\1\u018a\2\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\1\u018b\6\55\1\u018c\1\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\5\55\1\u018d\3\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\1\u018e\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\10\55\1\u018f\12\55\11\0\12\55\1\0"+
    "\6\55\1\u0190\2\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\12\55\1\u0191\10\55\11\0\12\55\1\0"+
    "\1\u0192\10\55\2\0\1\55\2\0\1\305\21\0\7\55"+
    "\1\u0193\13\55\11\0\12\55\1\0\2\55\1\u0194\6\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\4\55\1\u0195\1\55\1\u0196\2\55\2\0\1\55"+
    "\2\0\1\305\21\0\1\u0197\22\55\11\0\12\55\1\0"+
    "\1\u0198\10\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\10\55\1\u0199\1\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\2\55\1\u019a\20\55\11\0\7\55"+
    "\1\u019b\2\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\1\u019c\22\55\11\0\12\55\1\0"+
    "\1\u019d\10\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\2\55\1\u019e\20\55\11\0\12\55\1\0\1\u019f"+
    "\10\55\2\0\1\55\2\0\1\305\21\0\23\55\4\0"+
    "\1\u0111\106\0\1\u0113\34\0\1\u01a0\51\0\1\u0116\34\0"+
    "\1\u01a1\142\0\1\u01a2\103\0\1\u01a3\41\0\1\u01a4\114\0"+
    "\1\u01a5\145\0\1\u01a6\46\0\1\u01a7\107\0\1\u01a8\143\0"+
    "\1\u01a9\102\0\1\u01aa\52\0\1\u01ab\107\0\1\u01ac\61\0"+
    "\2\167\2\0\1\u0126\102\0\2\172\2\0\1\u0128\102\0"+
    "\2\176\2\0\1\177\102\0\2\202\2\0\1\u012c\102\0"+
    "\2\205\2\0\1\u012e\102\0\2\212\2\0\1\u0130\101\0"+
    "\1\134\1\214\1\u0133\1\0\1\134\1\215\44\134\1\216"+
    "\33\134\2\0\2\220\2\0\1\u0135\101\0\1\134\1\222"+
    "\1\u0138\1\0\1\134\1\223\77\134\1\224\2\0\2\225"+
    "\2\0\1\u013a\116\0\1\u01ad\112\0\1\u01ae\110\0\1\u01af"+
    "\153\0\1\u01b0\105\0\1\u01b1\41\0\1\u01b2\157\0\1\u01b3"+
    "\104\0\1\u01b4\102\0\1\u01b5\22\0\1\u0145\3\0\1\u01b6"+
    "\101\0\1\134\1\u0146\1\240\1\241\1\134\1\u01b7\100\134"+
    "\2\0\1\u0147\1\u0148\1\u0149\1\0\1\u01b6\102\0\1\u0148"+
    "\106\0\2\u0148\105\0\2\243\2\0\1\u014a\122\0\1\u01b8"+
    "\147\0\1\u01b9\25\0\1\u014f\3\0\1\u0150\31\0\1\u0151"+
    "\50\0\1\u0150\1\u014f\1\u01ba\142\0\1\u01bb\50\0\1\u0154"+
    "\106\0\2\u0154\124\0\1\267\67\0\1\u015a\1\0\1\u015a"+
    "\1\0\1\300\102\0\1\u015a\3\0\1\300\125\0\1\u01bc"+
    "\70\0\12\55\1\0\5\55\1\u01bd\3\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\6\55"+
    "\1\u01be\2\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\3\55\1\u01bf\5\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\1\55"+
    "\1\u01c0\7\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\10\55\1\u01c1\1\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\10\55\1\u01c2\1\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\7\55\1\u01c3\1\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\3\55"+
    "\1\u01c4\5\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\2\55\1\u01c5\6\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\6\55\1\u01c6\14\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\4\55\1\u01c7\16\55\11\0\12\55\1\0\1\u01c8"+
    "\10\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\10\55\1\u01c9\1\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\1\u01ca\10\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\6\55\1\u01cb\2\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\3\55\1\u01cc\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\7\55"+
    "\1\u01cd\13\55\11\0\12\55\1\0\3\55\1\u01ce\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\12\55\1\u01cf\10\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\1\u01d0\22\55\11\0\12\55\1\0\5\55\1\u01d1"+
    "\3\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\3\55\1\u01d2\5\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\2\55\1\u01d3"+
    "\6\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\1\u01d4\22\55\11\0\12\55\1\0\2\55\1\u01d5\6\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\1\u01d6\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\6\55\1\u01d7\2\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\3\55\1\u01d8\5\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\3\55\1\u01d9\5\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\1\u01da\10\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\2\55\1\u01db\6\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\5\55"+
    "\1\u01dc\3\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\6\55\1\u01dd\14\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\2\55\1\u01de\20\55"+
    "\11\0\12\55\1\0\1\u01df\10\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\12\55\1\u01e0\10\55\4\0"+
    "\1\u0184\106\0\1\u0185\150\0\1\u01e1\51\0\12\55\1\0"+
    "\1\u01e2\6\55\1\u01e3\1\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\6\55\1\u01e4\2\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\1\u01e5"+
    "\22\55\11\0\12\55\1\0\1\u01e6\2\55\1\u01e7\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\1\55\1\u01e8\7\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\3\55\1\u01e9\6\55\1\0\3\55"+
    "\1\u01ea\5\55\2\0\1\55\2\0\1\305\21\0\4\55"+
    "\1\u01eb\7\55\1\u01ec\1\u01ed\1\u01ee\4\55\11\0\10\55"+
    "\1\u01ef\1\55\1\0\6\55\1\u01f0\2\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\6\55"+
    "\1\u01f1\2\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\2\55\1\u01f2\20\55\11\0\12\55\1\0\3\55"+
    "\1\u01f3\5\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\7\55\1\u01f4\2\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\5\55"+
    "\1\u01f5\3\55\2\0\1\55\2\0\1\305\21\0\2\55"+
    "\1\u01f6\20\55\11\0\12\55\1\0\3\55\1\u01f7\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\6\55\1\u01f8\2\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\5\55\1\u01f9\15\55\11\0\12\55"+
    "\1\0\1\u01fa\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\u01fb\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\6\55\1\u01fc"+
    "\2\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\3\55\1\u01fd\17\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\5\55\1\u01fe\15\55\11\0"+
    "\12\55\1\0\6\55\1\u01ff\2\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\10\55\1\u0200\1\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\23\55\4\0"+
    "\1\u0201\170\0\1\u0202\47\0\1\u0203\100\0\1\u0204\114\0"+
    "\1\u0205\112\0\1\u0206\32\0\1\u0207\47\0\1\u0208\106\0"+
    "\1\u0209\106\0\1\u020a\111\0\1\u020b\142\0\1\u020c\117\0"+
    "\1\u020d\42\0\1\u020e\141\0\1\u020f\53\0\1\u0210\141\0"+
    "\1\u0211\47\0\1\u0212\111\0\1\u0213\146\0\1\u0214\41\0"+
    "\1\u0215\112\0\1\u0216\61\0\1\u01b6\1\u0217\1\u0218\166\0"+
    "\1\u0219\46\0\1\u021a\64\0\2\u014f\2\0\1\u0150\31\0"+
    "\1\u0151\56\0\1\u021b\1\0\2\u021b\1\0\1\u021b\16\0"+
    "\1\u021c\41\0\5\u021b\13\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\3\55\1\u021d\17\55\11\0"+
    "\12\55\1\0\1\u021e\10\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\1\u021f\22\55\11\0\12\55\1\0"+
    "\5\55\1\u0220\3\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\4\55\1\u0221\4\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\12\55\1\u0222"+
    "\10\55\11\0\10\55\1\u0223\1\55\1\0\7\55\1\u0224"+
    "\1\55\2\0\1\55\2\0\1\305\21\0\6\55\1\u0225"+
    "\14\55\11\0\12\55\1\0\1\55\1\u0226\7\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\10\55\1\u0227"+
    "\1\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\13\55\1\u0228\7\55\11\0\3\55\1\u0229"+
    "\6\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\4\55\1\u022a\7\55\1\u022b\1\u022c\1\u022d\4\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\4\55\1\u022e\16\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\2\55\1\u022f\20\55\11\0"+
    "\12\55\1\0\5\55\1\u0230\3\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\5\55\1\u0231"+
    "\3\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\1\u0232\2\55\1\u0233\5\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\6\55"+
    "\1\u0234\2\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\1\55\1\u0235\7\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\2\55\1\u0236\20\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\3\55\1\u0237\17\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\1\u0238\22\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\2\55\1\u0239\20\55\11\0\12\55\1\0\3\55\1\u023a"+
    "\5\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\10\55\1\u023b\12\55\11\0\10\55\1\u023c\1\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\1\u023d\22\55\11\0\12\55\1\0\6\55\1\u023e\2\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\1\u023f\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\5\55\1\u0240\3\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\2\55\1\u0241\6\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\10\55\1\u0242\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\2\55\1\u0243\20\55"+
    "\11\0\12\55\1\0\1\u0244\10\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\7\55\1\u0245"+
    "\1\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\5\55\1\u0246\15\55\11\0\12\55\1\0\10\55\1\u0247"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\15\55"+
    "\1\u0248\5\55\11\0\12\55\1\0\1\55\1\u0249\7\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\20\55"+
    "\1\u024a\2\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\17\55\1\u024b\3\55\11\0\12\55"+
    "\1\0\1\55\1\u024c\7\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\2\55\1\u024d\20\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\u024e\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\7\55\1\u024f\1\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\6\55"+
    "\1\u0250\2\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\2\55\1\u0251\6\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\4\55\1\u0252\16\55"+
    "\11\0\12\55\1\0\1\u0253\10\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\10\55\1\u0254\1\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\3\55\1\u0255\5\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\5\55\1\u0256"+
    "\3\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\2\55\1\u0257\20\55\11\0\12\55\1\0\5\55\1\u0258"+
    "\3\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\3\55\1\u0259\5\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\70\0\1\u025a\46\0\1\u025b\103\0"+
    "\1\u025c\147\0\1\u025d\104\0\1\u025e\52\0\1\u025f\37\0"+
    "\1\u0260\43\0\1\u0261\107\0\1\u0262\150\0\1\u0263\111\0"+
    "\1\u0264\101\0\1\u0265\41\0\1\u0266\114\0\1\u0267\143\0"+
    "\1\u0268\116\0\1\u0269\76\0\1\u026a\51\0\1\u026b\106\0"+
    "\1\u026c\152\0\1\u026d\17\0\1\u0217\106\0\2\u0217\122\0"+
    "\1\u026e\153\0\1\u026f\32\0\1\u021b\1\0\2\u021b\1\0"+
    "\1\u021b\60\0\5\u021b\13\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\2\55\1\u0270\20\55\11\0"+
    "\12\55\1\0\1\u0271\10\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\1\u0272\10\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\4\55\1\u0273\4\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\3\55\1\u0274\5\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\3\55\1\u0275\5\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\4\55\1\u0276\16\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\4\55\1\u0277"+
    "\16\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\15\55\1\u0278\5\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\20\55\1\u0279"+
    "\2\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\17\55\1\u027a\3\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\1\u027b\22\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\1\u027c\22\55\11\0\12\55\1\0\1\55\1\u027d"+
    "\7\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\5\55\1\u027e\3\55\2\0\1\55\2\0"+
    "\1\305\21\0\2\55\1\u027f\20\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\4\55\1\u0280"+
    "\16\55\11\0\12\55\1\0\6\55\1\u0281\2\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\1\u0282\10\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\1\55\1\u0283\7\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\1\u0284"+
    "\10\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\1\u0285\22\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\6\55\1\u0286\14\55\11\0\12\55"+
    "\1\0\4\55\1\u0287\4\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\5\55\1\u0288\15\55\11\0\12\55"+
    "\1\0\6\55\1\u0289\2\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\2\55\1\u028a\20\55\11\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\4\55"+
    "\1\u028b\16\55\11\0\12\55\1\0\5\55\1\u028c\3\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\5\55\1\u028d\3\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\4\55\1\u028e\16\55\11\0\10\55"+
    "\1\u028f\1\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\1\u0290\10\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\4\55\1\u0291\4\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\1\u0292\10\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\1\u0293\22\55\11\0"+
    "\12\55\1\0\3\55\1\u0294\5\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\10\55\1\u0295\12\55\11\0"+
    "\12\55\1\0\3\55\1\u0296\5\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\6\55\1\u0297"+
    "\2\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\3\55\1\u0298\5\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\3\55\1\u0299"+
    "\5\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\6\55\1\u029a\14\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\1\u029b\22\55\11\0\12\55"+
    "\1\0\1\u029c\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\1\u029d\22\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\13\55\1\u029e\7\55"+
    "\64\0\1\u029f\52\0\1\u02a0\103\0\1\u02a1\155\0\1\u02a2"+
    "\36\0\1\u02a3\154\0\1\u02a4\43\0\1\u02a5\110\0\1\u02a6"+
    "\163\0\1\u02a7\70\0\1\u02a8\110\0\1\u02a9\35\0\1\u02aa"+
    "\116\0\1\u02ab\146\0\1\u02ac\101\0\1\u02ad\106\0\1\u02ae"+
    "\110\0\1\u02af\110\0\1\u02b0\43\0\1\u02b1\72\0\12\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\4\55"+
    "\1\u02b2\16\55\11\0\10\55\1\u02b3\1\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\1\u02b4\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\4\55\1\u02b5\4\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\6\55\1\u02b6\2\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\2\55\1\u02b7\20\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\5\55\1\u02b8"+
    "\15\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\6\55\1\u02b9\14\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\13\55\1\u02ba"+
    "\7\55\11\0\10\55\1\u02bb\1\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\2\55\1\u02bc\6\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\11\55\1\u02bd\11\55\11\0\12\55\1\0"+
    "\3\55\1\u02be\5\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\5\55\1\u02bf\3\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\6\55\1\u02c0\2\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\1\u02c1\10\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\6\55"+
    "\1\u02c2\2\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\7\55\1\u02c3\1\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\2\55"+
    "\1\u02c4\6\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\4\55\1\u02c5\4\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\10\55\1\u02c6\1\55"+
    "\1\0\11\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\5\55\1\u02c7\3\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\2\55\1\u02c8\20\55"+
    "\11\0\12\55\1\0\5\55\1\u02c9\3\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\1\u02ca"+
    "\10\55\2\0\1\55\2\0\1\305\21\0\23\55\11\0"+
    "\12\55\1\0\11\55\2\0\1\55\2\0\1\305\21\0"+
    "\6\55\1\u02cb\14\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\7\55\1\u02cc\13\55\11\0"+
    "\12\55\1\0\1\u02cd\10\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\3\55\1\u02ce\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\11\0\12\55"+
    "\1\0\3\55\1\u02cf\5\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\32\0\1\u02d0\142\0\1\u02d1\46\0\1\u02d2"+
    "\107\0\1\u02d3\106\0\1\u02d4\110\0\1\u02d5\107\0\1\u02d6"+
    "\153\0\1\u02d7\40\0\1\u02d8\107\0\1\u02d9\105\0\1\u02da"+
    "\141\0\1\u02db\53\0\1\u02dc\104\0\1\u02dd\70\0\12\55"+
    "\1\0\1\55\1\u02de\7\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\11\55\2\0\1\55"+
    "\2\0\1\305\21\0\11\55\1\u02df\11\55\11\0\12\55"+
    "\1\0\1\u02e0\10\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\11\55\2\0\1\55\2\0"+
    "\1\305\21\0\4\55\1\u02e1\16\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\7\55\1\u02e2"+
    "\13\55\11\0\7\55\1\u02e3\2\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\3\55\1\u02e4\5\55\2\0\1\55\2\0\1\305\21\0"+
    "\23\55\11\0\12\55\1\0\3\55\1\u02e5\5\55\2\0"+
    "\1\55\2\0\1\305\21\0\23\55\11\0\12\55\1\0"+
    "\11\55\2\0\1\55\2\0\1\305\21\0\1\u02e6\22\55"+
    "\11\0\12\55\1\0\1\u02e7\10\55\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\11\55\2\0"+
    "\1\55\2\0\1\305\21\0\1\u02e8\22\55\11\0\12\55"+
    "\1\0\5\55\1\u02e9\3\55\2\0\1\55\2\0\1\305"+
    "\21\0\23\55\11\0\12\55\1\0\3\55\1\u02ea\5\55"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\26\0\1\u02eb"+
    "\154\0\1\u02ec\36\0\1\u02ed\114\0\1\u02ee\75\0\1\u02ef"+
    "\114\0\1\u02f0\104\0\1\u02f1\114\0\1\u02f2\77\0\1\u02f3"+
    "\114\0\1\u02f4\146\0\1\u02f5\25\0\12\55\1\0\6\55"+
    "\1\u02f6\2\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\3\55\1\u02f7\5\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\11\0\12\55\1\0\3\55"+
    "\1\u02f8\5\55\2\0\1\55\2\0\1\305\21\0\23\55"+
    "\11\0\12\55\1\0\11\55\2\0\1\55\2\0\1\305"+
    "\21\0\10\55\1\u02f9\12\55\11\0\12\55\1\0\11\55"+
    "\2\0\1\55\2\0\1\305\21\0\6\55\1\u02fa\14\55"+
    "\72\0\1\u02fb\40\0\1\u02fc\152\0\1\u02fd\45\0\1\u02fe"+
    "\70\0\12\55\1\0\3\55\1\u02ff\5\55\2\0\1\55"+
    "\2\0\1\305\21\0\23\55\27\0\1\u0300\151\0\1\u0301"+
    "\25\0\12\55\1\0\10\55\1\u0302\2\0\1\55\2\0"+
    "\1\305\21\0\23\55\11\0\12\55\1\0\10\55\1\u0303"+
    "\2\0\1\55\2\0\1\305\21\0\23\55\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[40399];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\10\21\0\2\1\5\0\1\11\1\1\1\11"+
    "\1\1\1\11\7\1\1\11\17\1\2\11\6\1\1\11"+
    "\3\1\5\11\10\1\3\11\1\1\1\11\13\1\1\11"+
    "\1\1\1\11\11\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\0\1\11\2\1\1\11\2\1"+
    "\3\11\4\1\2\11\4\1\1\11\13\1\1\11\12\1"+
    "\1\11\1\1\2\11\1\1\2\11\1\1\6\11\2\1"+
    "\4\0\2\1\1\0\2\1\1\0\41\1\2\11\3\1"+
    "\12\11\1\1\1\11\1\1\3\11\1\1\1\11\25\1"+
    "\1\11\1\0\1\11\4\0\1\11\10\0\1\11\4\0"+
    "\1\1\1\0\2\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\4\0\1\1\4\0\1\1\12\0\1\1"+
    "\1\0\2\1\1\0\1\1\5\0\1\1\1\11\1\0"+
    "\4\1\1\11\2\0\1\1\1\11\40\1\2\11\7\1"+
    "\1\11\1\1\1\11\27\1\27\0\1\1\3\0\1\11"+
    "\1\0\44\1\1\11\40\1\3\0\1\1\2\0\1\11"+
    "\1\0\1\11\14\0\2\1\2\0\1\1\1\0\75\1"+
    "\1\0\2\11\2\0\1\11\20\0\57\1\1\0\1\11"+
    "\2\0\1\11\1\0\2\11\2\0\1\11\10\0\36\1"+
    "\3\0\2\11\6\0\1\11\2\0\15\1\2\0\2\11"+
    "\1\0\3\11\1\0\2\11\5\1\1\0\2\11\1\0"+
    "\1\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[771];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static final boolean DEBUG = true;

  private static final int DEFAULT_ESCAPE_CHARACTER = '\\';

  private static String zzToPrintable(CharSequence str) {
    StringBuilder builder = new StringBuilder();
    str.codePoints().iterator().forEachRemaining(new IntConsumer() {
      @Override
      public void accept(int ch) {
        int charCount = Character.charCount(ch);
        if (ch > 31 && ch < 127) {
          builder.append((char) ch);
        } else if (charCount == 1) {
          builder.append(String.format("\\u%04X", ch));
        } else {
          builder.append(String.format("\\U%06X", ch));
        }
      }
    });

    return builder.toString();
  }

  private final StringBuilder string = new StringBuilder(32);

  private IElementType BAD_LITERAL_REASON;
  private int GOTO_AFTER_ESCAPE_SEQUENCE;
  private int GOTO_AFTER_ESCAPE_SEQUENCE_FAIL;

  private int escapeCharacter;

  private Object value;

  public _SpLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
  }

  public int getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(int codePoint) {
    if (getEscapeCharacter() != codePoint) {
      this.escapeCharacter = codePoint;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", codePoint);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(int codePoint) {
    return codePoint == getEscapeCharacter();
  }

  private int codePointAt(int index) {
    final int length = yylength();
    if (index >= length) {
        throw new NoSuchElementException();
    }

    char c1 = zzBuffer.charAt(zzStartRead + index);
    index++;
    if (Character.isHighSurrogate(c1) && index < length) {
        char c2 = zzBuffer.charAt(zzStartRead + index);
        if (Character.isLowSurrogate(c2)) {
            return Character.toCodePoint(c1, c2);
        }
    }

    return c1;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SpLexer(java.io.Reader in) {
    resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_LINE_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [724] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"line comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return LINE_COMMENT; }");
              value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("line comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return LINE_COMMENT;
            }
            case 772: break;
            case IN_BLOCK_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [736] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 773: break;
            case IN_DOC_COMMENT_PRE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [751] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 774: break;
            case IN_DOC_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [759] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 775: break;
            case IN_DOC_COMMENT_POST: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [766] { return UNTERMINATED_COMMENT; }");
              return UNTERMINATED_COMMENT;
            }
            case 776: break;
            case IN_PREPROCESSOR_DEFINE_PATTERN: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [470] { value = SpUtils.parseString(string, getEscapeCharacter());"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"pattern = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return DEFINE_PATTERN; }");
              value = SpUtils.parseString(string, getEscapeCharacter());
                          if (DEBUG) {
                            System.out.printf("pattern = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return DEFINE_PATTERN;
            }
            case 777: break;
            case IN_PREPROCESSOR_STRING: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [439] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"message = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          if (!((String)value).isEmpty()) {"+ZZ_NL+"                            return PREPROCESSOR_STRING;"+ZZ_NL+"                          } }");
              value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("message = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!((String)value).isEmpty()) {
                            return PREPROCESSOR_STRING;
                          }
            }
            case 778: break;
            case IN_PREPROCESSOR_PRAGMA_NEWDECLS: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [570] { yypushback(yylength()); yybegin(YYINITIAL); }");
              yypushback(yylength()); yybegin(YYINITIAL);
            }
            case 779: break;
            case IN_CHARACTER_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [605] { BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;"+ZZ_NL+"                          yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;
                          yybegin(IN_BAD_LITERAL);
            }
            case 780: break;
            case IN_CHARACTER_LITERAL_FINISH: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [620] { BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;"+ZZ_NL+"                          yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;
                          yybegin(IN_BAD_LITERAL);
            }
            case 781: break;
            case IN_STRING_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [644] { BAD_LITERAL_REASON = INCOMPLETE_STRING_LITERAL;"+ZZ_NL+"                          yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = INCOMPLETE_STRING_LITERAL;
                          yybegin(IN_BAD_LITERAL);
            }
            case 782: break;
            case IN_BAD_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [652] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"%s = %s%n\", BAD_LITERAL_REASON, value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return BAD_LITERAL_REASON; }");
              value = string.toString();
                          if (DEBUG) {
                            System.out.printf("%s = %s%n", BAD_LITERAL_REASON, value);
                          }

                          yybegin(YYINITIAL);
                          return BAD_LITERAL_REASON;
            }
            case 783: break;
            case IN_ESCAPE_SEQUENCE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [663] { yybegin(YYINITIAL); return BAD_ESCAPE_SEQUENCE; }");
              yybegin(YYINITIAL); return BAD_ESCAPE_SEQUENCE;
            }
            case 784: break;
            case IN_DECIMAL_ESCAPE_SEQUENCE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [702] { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL);
            }
            case 785: break;
            case IN_UNICODE_ESCAPE_SEQUENCE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [708] { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL); }");
              BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE; yybegin(IN_BAD_LITERAL);
            }
            case 786: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [703] { string.append(yytext()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE); }");
            { string.append(yytext()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
            }
          case 229: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [408] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          case 230: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [364] { return WHITE_SPACE; }");
            { return WHITE_SPACE;
            }
          case 231: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [365] { return NEW_LINE; }");
            { return NEW_LINE;
            }
          case 232: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { return LBRACKET; }");
            { return LBRACKET;
            }
          case 233: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [374] { return AT_SIGN; }");
            { return AT_SIGN;
            }
          case 234: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [381] { value = SpUtils.parseNumber(yytext());"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"number %s = %d%n\", yytext(), value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          if (value == null) {"+ZZ_NL+"                            throw new AssertionError("+ZZ_NL+"                                value + \" should be a valid number, but it couldn\'t be parsed\");"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          return NUMBER_LITERAL; }");
            { value = SpUtils.parseNumber(yytext());
                          if (DEBUG) {
                            System.out.printf("number %s = %d%n", yytext(), value);
                          }

                          if (value == null) {
                            throw new AssertionError(
                                value + " should be a valid number, but it couldn't be parsed");
                          }

                          return NUMBER_LITERAL;
            }
          case 235: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [368] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          case 236: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return SEMICOLON; }");
            { return SEMICOLON;
            }
          case 237: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [371] { return UNDERSCORE; }");
            { return UNDERSCORE;
            }
          case 238: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return PERIOD; }");
            { return PERIOD;
            }
          case 239: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return MINUS; }");
            { return MINUS;
            }
          case 240: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return PERCENT; }");
            { return PERCENT;
            }
          case 241: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return ASTERISK; }");
            { return ASTERISK;
            }
          case 242: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [200] { return COLON; }");
            { return COLON;
            }
          case 243: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return COMMA; }");
            { return COMMA;
            }
          case 244: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { yybegin(IN_PREPROCESSOR); return HASH; }");
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 245: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return AMPERSAND; }");
            { return AMPERSAND;
            }
          case 246: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { return ASSIGN; }");
            { return ASSIGN;
            }
          case 247: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return CARET; }");
            { return CARET;
            }
          case 248: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return EXCLAMATION; }");
            { return EXCLAMATION;
            }
          case 249: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return PLUS; }");
            { return PLUS;
            }
          case 250: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return SLASH; }");
            { return SLASH;
            }
          case 251: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { return TILDE; }");
            { return TILDE;
            }
          case 252: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return VERTICAL_BAR; }");
            { return VERTICAL_BAR;
            }
          case 253: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { return GT; }");
            { return GT;
            }
          case 254: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { return LT; }");
            { return LT;
            }
          case 255: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [245] { return LBRACE; }");
            { return LBRACE;
            }
          case 256: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { return RBRACE; }");
            { return RBRACE;
            }
          case 257: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return RBRACKET; }");
            { return RBRACKET;
            }
          case 258: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { return LPAREN; }");
            { return LPAREN;
            }
          case 259: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return RPAREN; }");
            { return RPAREN;
            }
          case 260: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [345] { string.setLength(0); string.append(\'\\\'\');"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_CHARACTER_LITERAL_FINISH;"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;"+ZZ_NL+"                          BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { string.setLength(0); string.append('\'');
                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_CHARACTER_LITERAL_FINISH;
                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;
                          BAD_LITERAL_REASON = INCOMPLETE_CHARACTER_LITERAL;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 261: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [352] { string.setLength(0); string.append(\'\\\"\');"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_STRING_LITERAL;"+ZZ_NL+"                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;"+ZZ_NL+"                          BAD_LITERAL_REASON = BAD_STRING_LITERAL;"+ZZ_NL+"                          yybegin(IN_STRING_LITERAL); }");
            { string.setLength(0); string.append('\"');
                          GOTO_AFTER_ESCAPE_SEQUENCE = IN_STRING_LITERAL;
                          GOTO_AFTER_ESCAPE_SEQUENCE_FAIL = IN_BAD_LITERAL;
                          BAD_LITERAL_REASON = BAD_STRING_LITERAL;
                          yybegin(IN_STRING_LITERAL);
            }
          case 262: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [732] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 263: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [715] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"line comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          return LINE_COMMENT; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("line comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          return LINE_COMMENT;
            }
          case 264: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [738] { string.append(\' \'); }");
            { string.append(' ');
            }
          case 265: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [753] { yybegin(IN_DOC_COMMENT); }");
            { yybegin(IN_DOC_COMMENT);
            }
          case 266: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [752] { /* ignore leading asterisks */ }");
            { /* ignore leading asterisks */
            }
          case 267: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [776] { throw new AssertionError("+ZZ_NL+"                              \"Doc comment terminator should already have been read \" +"+ZZ_NL+"                              \"and pushed back into the stream.\"); }");
            { throw new AssertionError(
                              "Doc comment terminator should already have been read " +
                              "and pushed back into the stream.");
            }
          case 268: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [426] { yybegin(YYINITIAL); yypushback(yylength()); }");
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          case 269: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [455] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 270: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [454] { yybegin(IN_PREPROCESSOR_DEFINE_PATTERN); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_DEFINE_PATTERN); return WHITE_SPACE;
            }
          case 271: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [462] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (isEscapeCharacter(codePoint)) {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (isEscapeCharacter(codePoint)) {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_ESCAPE_SEQUENCE);
                          } else {
                            string.appendCodePoint(codePoint);
                          }
            }
          case 272: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [459] { yypushback(yylength());"+ZZ_NL+"                          yybegin(IN_PREPROCESSOR_DEFINE_SUBSTITUTION_PRE); return WHITE_SPACE; }");
            { yypushback(yylength());
                          yybegin(IN_PREPROCESSOR_DEFINE_SUBSTITUTION_PRE); return WHITE_SPACE;
            }
          case 273: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [477] { BAD_LITERAL_REASON = BAD_PATTERN;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_PATTERN;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 274: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [461] { yybegin(IN_PREPROCESSOR_DEFINE_PATTERN_ARGS); return LPAREN; }");
            { yybegin(IN_PREPROCESSOR_DEFINE_PATTERN_ARGS); return LPAREN;
            }
          case 275: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [486] { string.setLength(0);"+ZZ_NL+"                          yybegin(IN_PREPROCESSOR_DEFINE_SUBSTITUTION_PRE); return RPAREN; }");
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_DEFINE_SUBSTITUTION_PRE); return RPAREN;
            }
          case 276: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [491] { string.setLength(0); yybegin(IN_PREPROCESSOR_STRING); }");
            { string.setLength(0); yybegin(IN_PREPROCESSOR_STRING);
            }
          case 277: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [497] { yypushback(yylength()); yybegin(YYINITIAL); return BAD_CHARACTER; }");
            { yypushback(yylength()); yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 278: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [496] { yybegin(IN_PREPROCESSOR_INCLUDE); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_INCLUDE); return WHITE_SPACE;
            }
          case 279: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [501] { string.setLength(0);"+ZZ_NL+"                          yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH_PRE); }");
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH_PRE);
            }
          case 280: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [503] { string.setLength(0);"+ZZ_NL+"                          yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH_PRE); }");
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH_PRE);
            }
          case 281: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [510] { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH); }");
            { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH);
            }
          case 282: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [509] { yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH); }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMPATH);
            }
          case 283: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [514] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"system file = \\\"%s\\\"%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return PREPROCESSOR_INCLUDE_SYSTEMPATH; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("system file = \"%s\"%n", value);
                          }

                          yybegin(YYINITIAL);
                          return PREPROCESSOR_INCLUDE_SYSTEMPATH;
            }
          case 284: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [528] { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH); }");
            { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH);
            }
          case 285: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [527] { yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH); }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEPATH);
            }
          case 286: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [532] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"relative file = \\\"%s\\\"%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return PREPROCESSOR_INCLUDE_RELATIVEPATH; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("relative file = \"%s\"%n", value);
                          }

                          yybegin(YYINITIAL);
                          return PREPROCESSOR_INCLUDE_RELATIVEPATH;
            }
          case 287: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [544] { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITE_SPACE;
            }
          case 288: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [439] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"message = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          if (!((String)value).isEmpty()) {"+ZZ_NL+"                            return PREPROCESSOR_STRING;"+ZZ_NL+"                          } }");
            { value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("message = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!((String)value).isEmpty()) {
                            return PREPROCESSOR_STRING;
                          }
            }
          case 289: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [562] { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITE_SPACE; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITE_SPACE;
            }
          case 290: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [597] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (isEscapeCharacter(codePoint)) {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (isEscapeCharacter(codePoint)) {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_ESCAPE_SEQUENCE);
                          } else {
                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);
                          }
            }
          case 291: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [607] { BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_CHARACTER_LITERAL;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 292: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [581] { string.append(\'\\\'\');"+ZZ_NL+"                          value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"character = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL); return EMPTY_CHARACTER_LITERAL; }");
            { string.append('\'');
                          value = string.toString();
                          if (DEBUG) {
                            System.out.printf("character = %s%n", value);
                          }

                          yybegin(YYINITIAL); return EMPTY_CHARACTER_LITERAL;
            }
          case 293: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [612] { string.append(\'\\\'\');"+ZZ_NL+"                          value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"character = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return CHARACTER_LITERAL; }");
            { string.append('\'');
                          value = string.toString();
                          if (DEBUG) {
                            System.out.printf("character = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 294: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [646] { BAD_LITERAL_REASON = BAD_STRING_LITERAL;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_STRING_LITERAL;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 295: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [627] { string.append(\'\\\"\');"+ZZ_NL+"                          value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"string = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return STRING_LITERAL; }");
            { string.append('\"');
                          value = string.toString();
                          if (DEBUG) {
                            System.out.printf("string = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 296: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [652] { value = string.toString();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"%s = %s%n\", BAD_LITERAL_REASON, value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return BAD_LITERAL_REASON; }");
            { value = string.toString();
                          if (DEBUG) {
                            System.out.printf("%s = %s%n", BAD_LITERAL_REASON, value);
                          }

                          yybegin(YYINITIAL);
                          return BAD_LITERAL_REASON;
            }
          case 297: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [688] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (isEscapeCharacter(codePoint)) {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;"+ZZ_NL+"                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (isEscapeCharacter(codePoint)) {
                            string.appendCodePoint(codePoint);
                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
                          } else {
                            BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;
                            yypushback(yylength()); yybegin(IN_BAD_LITERAL);
                          }
            }
          case 298: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [697] { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;"+ZZ_NL+"                          yypushback(yylength()); yybegin(IN_BAD_LITERAL); }");
            { BAD_LITERAL_REASON = BAD_ESCAPE_SEQUENCE;
                          yypushback(yylength()); yybegin(IN_BAD_LITERAL);
            }
          case 299: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [687] { yypushback(yylength()); yybegin(IN_DECIMAL_ESCAPE_SEQUENCE); }");
            { yypushback(yylength()); yybegin(IN_DECIMAL_ESCAPE_SEQUENCE);
            }
          case 300: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [664] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (codePoint == \'x\') {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_UNICODE_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            switch(codePoint) {"+ZZ_NL+"                              case \'a\': string.append(\'\\u0007\'); break;"+ZZ_NL+"                              case \'b\': string.append(\'\\b\'); break;"+ZZ_NL+"                              case \'e\': string.append(\'\\u001B\'); break;"+ZZ_NL+"                              case \'f\': string.append(\'\\f\'); break;"+ZZ_NL+"                              case \'n\': string.append(\'\\n\'); break;"+ZZ_NL+"                              case \'r\': string.append(\'\\r\'); break;"+ZZ_NL+"                              case \'t\': string.append(\'\\t\'); break;"+ZZ_NL+"                              case \'v\': string.append(\'\\u000B\'); break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError(String.format("+ZZ_NL+"                                    \"Unsupported control character: %c (%1$d)\", codePoint));"+ZZ_NL+"                            }"+ZZ_NL+""+ZZ_NL+"                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (codePoint == 'x') {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_UNICODE_ESCAPE_SEQUENCE);
                          } else {
                            switch(codePoint) {
                              case 'a': string.append('\u0007'); break;
                              case 'b': string.append('\b'); break;
                              case 'e': string.append('\u001B'); break;
                              case 'f': string.append('\f'); break;
                              case 'n': string.append('\n'); break;
                              case 'r': string.append('\r'); break;
                              case 't': string.append('\t'); break;
                              case 'v': string.append('\u000B'); break;
                              default:
                                throw new AssertionError(String.format(
                                    "Unsupported control character: %c (%1$d)", codePoint));
                            }

                            yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
                          }
            }
          case 301: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [704] { yypushback(yylength()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE); }");
            { yypushback(yylength()); yybegin(GOTO_AFTER_ESCAPE_SEQUENCE);
            }
          case 302: break;
          case 75: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [377] { return TAG; }");
            { return TAG;
            }
          case 303: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return AS; }");
            { return AS;
            }
          case 304: break;
          case 77: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [378] { return TAG; }");
            { return TAG;
            }
          case 305: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return RANGE; }");
            { return RANGE;
            }
          case 306: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return DECREMENT; }");
            { return DECREMENT;
            }
          case 307: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { return SUBEQ; }");
            { return SUBEQ;
            }
          case 308: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { return MODEQ; }");
            { return MODEQ;
            }
          case 309: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return MULEQ; }");
            { return MULEQ;
            }
          case 310: break;
          case 83: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return SCOPE_RESOLUTION; }");
            { return SCOPE_RESOLUTION;
            }
          case 311: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return AND; }");
            { return AND;
            }
          case 312: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return ANDEQ; }");
            { return ANDEQ;
            }
          case 313: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return EQUALTO; }");
            { return EQUALTO;
            }
          case 314: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { return XOREQ; }");
            { return XOREQ;
            }
          case 315: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return NEQUALTO; }");
            { return NEQUALTO;
            }
          case 316: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [219] { return ADDEQ; }");
            { return ADDEQ;
            }
          case 317: break;
          case 90: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { return INCREMENT; }");
            { return INCREMENT;
            }
          case 318: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [361] { string.setLength(0); yybegin(IN_BLOCK_COMMENT); }");
            { string.setLength(0); yybegin(IN_BLOCK_COMMENT);
            }
          case 319: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return DIVEQ; }");
            { return DIVEQ;
            }
          case 320: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [359] { string.setLength(0); yybegin(IN_LINE_COMMENT); }");
            { string.setLength(0); yybegin(IN_LINE_COMMENT);
            }
          case 321: break;
          case 94: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return OREQ; }");
            { return OREQ;
            }
          case 322: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return OR; }");
            { return OR;
            }
          case 323: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return GTEQ; }");
            { return GTEQ;
            }
          case 324: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return SRA; }");
            { return SRA;
            }
          case 325: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { return LTEQ; }");
            { return LTEQ;
            }
          case 326: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return SL; }");
            { return SL;
            }
          case 327: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { return IF; }");
            { return IF;
            }
          case 328: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [290] { return IN; }");
            { return IN;
            }
          case 329: break;
          case 102: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [272] { return DO; }");
            { return DO;
            }
          case 330: break;
          case 103: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [739] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"block comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return BLOCK_COMMENT; }");
            { value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("block comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          return BLOCK_COMMENT;
            }
          case 331: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [754] { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST); }");
            { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST);
            }
          case 332: break;
          case 105: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [767] { value = string.toString().trim();"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"doc comment = %s%n\", value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          return DOC_COMMENT; }");
            { value = string.toString().trim();
                          if (DEBUG) {
                            System.out.printf("doc comment = %s%n", value);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          return DOC_COMMENT;
            }
          case 333: break;
          case 106: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [420] { yybegin(YYINITIAL); return PREPROCESSOR_IF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 334: break;
          case 107: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [484] { value = yytext().toString(); return DEFINE_PATTERN_ARG; }");
            { value = yytext().toString(); return DEFINE_PATTERN_ARG;
            }
          case 335: break;
          case 108: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [437] { /* ignore whitespace */ }");
            { /* ignore whitespace */
            }
          case 336: break;
          case 109: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 33;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 34;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [575] { yybegin(YYINITIAL); return LABEL; }");
            { yybegin(YYINITIAL); return LABEL;
            }
          case 337: break;
          case 110: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [588] { int codePoint = codePointAt(0);"+ZZ_NL+"                          if (!isEscapeCharacter(codePoint)) {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_CHARACTER_LITERAL_FINISH);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            string.appendCodePoint(codePoint);"+ZZ_NL+"                            yybegin(IN_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } }");
            { int codePoint = codePointAt(0);
                          if (!isEscapeCharacter(codePoint)) {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_CHARACTER_LITERAL_FINISH);
                          } else {
                            string.appendCodePoint(codePoint);
                            yybegin(IN_ESCAPE_SEQUENCE);
                          }
            }
          case 338: break;
          case 111: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [635] { /* line continuation */ }");
            { /* line continuation */
            }
          case 339: break;
          case 112: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [395] { value = SpUtils.parseRational(yytext());"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"rational %s = %d%n\", yytext(), value);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          if (value == null) {"+ZZ_NL+"                            throw new AssertionError("+ZZ_NL+"                                value + \" should be a valid rational, but it couldn\'t be parsed\");"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          return RATIONAL_LITERAL; }");
            { value = SpUtils.parseRational(yytext());
                          if (DEBUG) {
                            System.out.printf("rational %s = %d%n", yytext(), value);
                          }

                          if (value == null) {
                            throw new AssertionError(
                                value + " should be a valid rational, but it couldn't be parsed");
                          }

                          return RATIONAL_LITERAL;
            }
          case 340: break;
          case 113: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [369] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          case 341: break;
          case 114: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { return TRY; }");
            { return TRY;
            }
          case 342: break;
          case 115: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { return FOR; }");
            { return FOR;
            }
          case 343: break;
          case 116: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { return LET; }");
            { return LET;
            }
          case 344: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [372] { return UNDERSCORE; }");
            { return UNDERSCORE;
            }
          case 345: break;
          case 118: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return ELLIPSIS; }");
            { return ELLIPSIS;
            }
          case 346: break;
          case 119: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [335] { return VAR; }");
            { return VAR;
            }
          case 347: break;
          case 120: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [360] { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE); }");
            { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE);
            }
          case 348: break;
          case 121: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { return SRAEQ; }");
            { return SRAEQ;
            }
          case 349: break;
          case 122: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return SRL; }");
            { return SRL;
            }
          case 350: break;
          case 123: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { return SLEQ; }");
            { return SLEQ;
            }
          case 351: break;
          case 124: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { return INT; }");
            { return INT;
            }
          case 352: break;
          case 125: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [302] { return NEW; }");
            { return NEW;
            }
          case 353: break;
          case 126: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 33;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 35;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [576] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 354: break;
          case 127: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [322] { return THIS; }");
            { return THIS;
            }
          case 355: break;
          case 128: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [277] { return EXIT; }");
            { return EXIT;
            }
          case 356: break;
          case 129: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { return ELSE; }");
            { return ELSE;
            }
          case 357: break;
          case 130: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { return ENUM; }");
            { return ENUM;
            }
          case 358: break;
          case 131: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [339] { return VOID; }");
            { return VOID;
            }
          case 359: break;
          case 132: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { return SRLEQ; }");
            { return SRLEQ;
            }
          case 360: break;
          case 133: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { yybegin(IN_CASE); return CASE; }");
            { yybegin(IN_CASE); return CASE;
            }
          case 361: break;
          case 134: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { return CHAR; }");
            { return CHAR;
            }
          case 362: break;
          case 135: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [297] { return INTN; }");
            { return INTN;
            }
          case 363: break;
          case 136: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { return INT8; }");
            { return INT8;
            }
          case 364: break;
          case 137: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { return NULL; }");
            { return NULL;
            }
          case 365: break;
          case 138: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { return DECL; }");
            { return DECL;
            }
          case 366: break;
          case 139: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [342] { return WITH; }");
            { return WITH;
            }
          case 367: break;
          case 140: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { return GOTO; }");
            { return GOTO;
            }
          case 368: break;
          case 141: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [413] { yybegin(YYINITIAL); return PREPROCESSOR_ELSE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 369: break;
          case 142: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [419] { yybegin(YYINITIAL); return PREPROCESSOR_FILE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 370: break;
          case 143: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [422] { yybegin(YYINITIAL); return PREPROCESSOR_LINE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 371: break;
          case 144: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 31;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 32;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [436] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 372: break;
          case 145: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { return BREAK; }");
            { return BREAK;
            }
          case 373: break;
          case 146: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [320] { return TAGOF; }");
            { return TAGOF;
            }
          case 374: break;
          case 147: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [323] { return THROW; }");
            { return THROW;
            }
          case 375: break;
          case 148: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [334] { return USING; }");
            { return USING;
            }
          case 376: break;
          case 149: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [332] { return UINTN; }");
            { return UINTN;
            }
          case 377: break;
          case 150: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [328] { return UINT8; }");
            { return UINT8;
            }
          case 378: break;
          case 151: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { return UNION; }");
            { return UNION;
            }
          case 379: break;
          case 152: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [317] { return STOCK; }");
            { return STOCK;
            }
          case 380: break;
          case 153: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { return SLEEP; }");
            { return SLEEP;
            }
          case 381: break;
          case 154: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [266] { return CONST; }");
            { return CONST;
            }
          case 382: break;
          case 155: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { return CATCH; }");
            { return CATCH;
            }
          case 383: break;
          case 156: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [293] { return INT16; }");
            { return INT16;
            }
          case 384: break;
          case 157: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { return INT64; }");
            { return INT64;
            }
          case 385: break;
          case 158: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { return INT32; }");
            { return INT32;
            }
          case 386: break;
          case 159: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [341] { return WHILE; }");
            { return WHILE;
            }
          case 387: break;
          case 160: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [425] { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 388: break;
          case 161: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [418] { yybegin(IN_PREPROCESSOR_STRING_PRE); return PREPROCESSOR_ERROR; }");
            { yybegin(IN_PREPROCESSOR_STRING_PRE); return PREPROCESSOR_ERROR;
            }
          case 389: break;
          case 162: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [415] { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 390: break;
          case 163: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [305] { return OBJECT; }");
            { return OBJECT;
            }
          case 391: break;
          case 164: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { return TYPEOF; }");
            { return TYPEOF;
            }
          case 392: break;
          case 165: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { return RETURN; }");
            { return RETURN;
            }
          case 393: break;
          case 166: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { return UINT16; }");
            { return UINT16;
            }
          case 394: break;
          case 167: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [331] { return UINT64; }");
            { return UINT64;
            }
          case 395: break;
          case 168: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [330] { return UINT32; }");
            { return UINT32;
            }
          case 396: break;
          case 169: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return ASSERT; }");
            { return ASSERT;
            }
          case 397: break;
          case 170: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [318] { return STRUCT; }");
            { return STRUCT;
            }
          case 398: break;
          case 171: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [316] { return STATIC; }");
            { return STATIC;
            }
          case 399: break;
          case 172: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { return SEALED; }");
            { return SEALED;
            }
          case 400: break;
          case 173: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [314] { return SIZEOF; }");
            { return SIZEOF;
            }
          case 401: break;
          case 174: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { return SWITCH; }");
            { return SWITCH;
            }
          case 402: break;
          case 175: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [289] { return IMPORT; }");
            { return IMPORT;
            }
          case 403: break;
          case 176: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { return NATIVE; }");
            { return NATIVE;
            }
          case 404: break;
          case 177: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [273] { return DOUBLE; }");
            { return DOUBLE;
            }
          case 405: break;
          case 178: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { return DELETE; }");
            { return DELETE;
            }
          case 406: break;
          case 179: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { return PUBLIC; }");
            { return PUBLIC;
            }
          case 407: break;
          case 180: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [414] { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 408: break;
          case 181: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [411] { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 409: break;
          case 182: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [412] { yybegin(IN_PREPROCESSOR_DEFINE_PRE); return PREPROCESSOR_DEFINE; }");
            { yybegin(IN_PREPROCESSOR_DEFINE_PRE); return PREPROCESSOR_DEFINE;
            }
          case 410: break;
          case 183: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [423] { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA;
            }
          case 411: break;
          case 184: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [557] { yybegin(YYINITIAL); return PRAGMA_UNUSED; }");
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 412: break;
          case 185: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { return BUILTIN; }");
            { return BUILTIN;
            }
          case 413: break;
          case 186: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [327] { return TYPESET; }");
            { return TYPESET;
            }
          case 414: break;
          case 187: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [325] { return TYPEDEF; }");
            { return TYPEDEF;
            }
          case 415: break;
          case 188: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [281] { return FOREACH; }");
            { return FOREACH;
            }
          case 416: break;
          case 189: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { return FORWARD; }");
            { return FORWARD;
            }
          case 417: break;
          case 190: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { return FUNCTAG; }");
            { return FUNCTAG;
            }
          case 418: break;
          case 191: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { return FINALLY; }");
            { return FINALLY;
            }
          case 419: break;
          case 192: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { return ACQUIRE; }");
            { return ACQUIRE;
            }
          case 420: break;
          case 193: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [336] { return VARIANT; }");
            { return VARIANT;
            }
          case 421: break;
          case 194: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [338] { return VIRTUAL; }");
            { return VIRTUAL;
            }
          case 422: break;
          case 195: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [337] { return VIEW_AS; }");
            { return VIEW_AS;
            }
          case 423: break;
          case 196: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { return CELLSOF; }");
            { return CELLSOF;
            }
          case 424: break;
          case 197: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { return CAST_TO; }");
            { return CAST_TO;
            }
          case 425: break;
          case 198: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [269] { return DEFAULT; }");
            { return DEFAULT;
            }
          case 426: break;
          case 199: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [270] { return DEFINED; }");
            { return DEFINED;
            }
          case 427: break;
          case 200: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { return PRIVATE; }");
            { return PRIVATE;
            }
          case 428: break;
          case 201: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [307] { return PACKAGE; }");
            { return PACKAGE;
            }
          case 429: break;
          case 202: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [421] { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_INCLUDE; }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_INCLUDE;
            }
          case 430: break;
          case 203: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [556] { yybegin(YYINITIAL); return PRAGMA_TABSIZE; }");
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 431: break;
          case 204: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [552] { yybegin(YYINITIAL); return PRAGMA_DYNAMIC; }");
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 432: break;
          case 205: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { return OPERATOR; }");
            { return OPERATOR;
            }
          case 433: break;
          case 206: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { return READONLY; }");
            { return READONLY;
            }
          case 434: break;
          case 207: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { return EXPLICIT; }");
            { return EXPLICIT;
            }
          case 435: break;
          case 208: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { return FUNCTION; }");
            { return FUNCTION;
            }
          case 436: break;
          case 209: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { return FUNCENUM; }");
            { return FUNCENUM;
            }
          case 437: break;
          case 210: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [340] { return VOLATILE; }");
            { return VOLATILE;
            }
          case 438: break;
          case 211: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { return CONTINUE; }");
            { return CONTINUE;
            }
          case 439: break;
          case 212: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [288] { return IMPLICIT; }");
            { return IMPLICIT;
            }
          case 440: break;
          case 213: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [416] { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 441: break;
          case 214: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [553] { yybegin(YYINITIAL); return PRAGMA_RATIONAL; }");
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 442: break;
          case 215: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [549] { yybegin(YYINITIAL); return PRAGMA_CODEPAGE; }");
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 443: break;
          case 216: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [550] { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR; }");
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 444: break;
          case 217: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [555] { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS;
            }
          case 445: break;
          case 218: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [568] { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL; }");
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL;
            }
          case 446: break;
          case 219: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [567] { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED; }");
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED;
            }
          case 447: break;
          case 220: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [296] { return INTERFACE; }");
            { return INTERFACE;
            }
          case 448: break;
          case 221: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { return NAMESPACE; }");
            { return NAMESPACE;
            }
          case 449: break;
          case 222: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { return METHODMAP; }");
            { return METHODMAP;
            }
          case 450: break;
          case 223: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [309] { return PROTECTED; }");
            { return PROTECTED;
            }
          case 451: break;
          case 224: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [417] { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 452: break;
          case 225: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [554] { yybegin(YYINITIAL); return PRAGMA_SEMICOLON; }");
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 453: break;
          case 226: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [424] { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_TRYINCLUDE; }");
            { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_TRYINCLUDE;
            }
          case 454: break;
          case 227: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [551] { yybegin(IN_PREPROCESSOR_STRING_PRE); return PRAGMA_DEPRECATED; }");
            { yybegin(IN_PREPROCESSOR_STRING_PRE); return PRAGMA_DEPRECATED;
            }
          case 455: break;
          case 228: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [304] { return NULLABLE; }");
            { return NULLABLE;
            }
          case 456: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _SpLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _SpLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _SpLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
