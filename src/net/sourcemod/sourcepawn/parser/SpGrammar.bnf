{
  generate = [
    tokens = "no"
    psi-factory = "yes"
  ]
  
  parserImports=[
    "static net.sourcemod.sourcepawn.lexer.SpTokenTypes.*"
  ]

  parserClass="net.sourcemod.sourcepawn.parser.SpParser"
  parserUtilClass="net.sourcemod.sourcepawn.parser.SpParserUtils"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Sp"
  psiImplClassSuffix="Impl"
  psiPackage="net.sourcemod.sourcepawn.psi"
  psiImplPackage="net.sourcemod.sourcepawn.psi.impl"

  elementTypeHolderClass="net.sourcemod.sourcepawn.psi.SpElementTypes"
  elementTypeClass="net.sourcemod.sourcepawn.psi.SpElementType"
  tokenTypeClass="net.sourcemod.sourcepawn.SpTokenType"

//extends(".*_expression")=expression
}

root ::= root_item *
private root_item ::= !<<eof>> compilation_unit
private compilation_unit ::=
    NEW_LINE+
  | HASH preprocessor (NEW_LINE | <<eof>>)

preprocessor ::=
    PREPROCESSOR_ASSERT preprocessor_expression
  | PREPROCESSOR_DEFINE DEFINE_PATTERN ( (define_args define_substitution) | define_substitution )?
  | PREPROCESSOR_ENDINPUT
  | PREPROCESSOR_ENDSCRIPT
  | PREPROCESSOR_ERROR PREPROCESSOR_STRING?
  | PREPROCESSOR_FILE STRING_LITERAL
  | PREPROCESSOR_IF PREPROCESSOR_ELSEIF* PREPROCESSOR_ELSE? PREPROCESSOR_ENDIF
  | PREPROCESSOR_INCLUDE include_file_reference
  | PREPROCESSOR_LINE NUMBER_LITERAL
  | PREPROCESSOR_PRAGMA pragma
  | PREPROCESSOR_TRYINCLUDE include_file_reference
  | PREPROCESSOR_UNDEF DEFINE_PATTERN
  { name="preprocessor directive" }

define_args ::= (LPAREN (DEFINE_PATTERN_ARG (COMMA DEFINE_PATTERN_ARG)* )? RPAREN)
  { name="macro args" }
define_substitution ::= PREPROCESSOR_STRING
  { name="substitution" }

private include_file_reference ::=
    PREPROCESSOR_INCLUDE_SYSTEMPATH
  | PREPROCESSOR_INCLUDE_RELATIVEPATH

pragma ::=
    PRAGMA_CODEPAGE STRING_LITERAL
  | PRAGMA_CTRLCHAR (CHARACTER_LITERAL | NUMBER_LITERAL)?
  | PRAGMA_DEPRECATED PREPROCESSOR_STRING?
  | PRAGMA_DYNAMIC NUMBER_LITERAL
  | PRAGMA_RATIONAL IDENTIFIER (LPAREN NUMBER_LITERAL RPAREN)?
  | PRAGMA_SEMICOLON NUMBER_LITERAL
  | PRAGMA_NEWDECLS (PRAGMA_NEWDECLS_OPTIONAL | PRAGMA_NEWDECLS_REQUIRED)
  | PRAGMA_TABSIZE NUMBER_LITERAL
  | PRAGMA_UNUSED IDENTIFIER (COMMA IDENTIFIER)*
  { name="pragma directive" }

preprocessor_expression ::=
    NUMBER_LITERAL
  | CHARACTER_LITERAL