{
  generate = [
    tokens = "no"
    psi-factory = "yes"
  ]
  
  parserImports=[
    "static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*"
  ]

  parserClass="net.alliedmods.intellij.sourcepawn.parser.SourcePawnParser"
  parserUtilClass="net.alliedmods.intellij.sourcepawn.parser.SourcePawnParserUtils"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SourcePawn"
  psiImplClassSuffix="Impl"
  psiPackage="net.alliedmods.intellij.sourcepawn.psi"
  psiImplPackage="net.alliedmods.intellij.sourcepawn.psi.impl"

  elementTypeHolderClass="net.alliedmods.intellij.sourcepawn.psi.SourcePawnTypes"
  elementTypeClass="net.alliedmods.intellij.sourcepawn.psi.SourcePawnElementType"
  tokenTypeClass="net.alliedmods.intellij.sourcepawn.psi.SourcePawnTokenType"

  extends(".*_expression")=expression
}

root ::= root_item *
private root_item ::= !<<eof>> compilation_unit
private compilation_unit ::=
    (WHITESPACE? NEW_LINE)+
  | HASH preprocessor_directive NEW_LINE
   
private preprocessor_directive ::=
    PREPROCESSOR_INCLUDE preprocessor_include_file
  | PREPROCESSOR_TRYINCLUDE preprocessor_include_file
  
private preprocessor_include_file ::=
    LT WHITESPACE? PREPROCESSOR_INCLUDE_SYSTEMFILE WHITESPACE? GT
  | PREPROCESSOR_INCLUDE_RELATIVEFILE