/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;

import org.jetbrains.annotations.NotNull;

import java.io.Reader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*;
import net.alliedmods.intellij.sourcepawn.SourcePawnUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PREPROCESSOR = 2;
  public static final int IN_PREPROCESSOR_INCLUDE_PRE = 4;
  public static final int IN_PREPROCESSOR_INCLUDE = 6;
  public static final int IN_PREPROCESSOR_INCLUDE_SYSTEMFILE_PRE = 8;
  public static final int IN_PREPROCESSOR_INCLUDE_SYSTEMFILE = 10;
  public static final int IN_PREPROCESSOR_INCLUDE_RELATIVEFILE_PRE = 12;
  public static final int IN_PREPROCESSOR_INCLUDE_RELATIVEFILE = 14;
  public static final int IN_PREPROCESSOR_PRAGMA_PRE = 16;
  public static final int IN_PREPROCESSOR_PRAGMA = 18;
  public static final int IN_PRAGMA_DEPRECATED_STRING_PRE = 20;
  public static final int IN_PRAGMA_DEPRECATED_STRING = 22;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE = 24;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS = 26;
  public static final int IN_CASE = 28;
  public static final int IN_CHARACTER_LITERAL = 30;
  public static final int IN_STRING_LITERAL = 32;
  public static final int IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE = 34;
  public static final int IN_CHARACTER_LITERAL_DECIMAL_ESCAPE = 36;
  public static final int IN_CHARACTER_LITERAL_UNICODE_ESCAPE = 38;
  public static final int IN_LINE_COMMENT = 40;
  public static final int IN_BLOCK_COMMENT = 42;
  public static final int IN_DOC_COMMENT_PRE = 44;
  public static final int IN_DOC_COMMENT = 46;
  public static final int IN_DOC_COMMENT_POST = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\43\1\105\1\44\1\0\1\45\1\35\1\104\1\57"+
    "\1\60\1\37\1\46\1\42\1\33\1\32\1\47\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\41\1\20\1\53\1\36\1\52\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\40"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\51\1\55\1\50\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\2\12\0\1\3\1\4\2\5\1\6"+
    "\1\3\1\7\1\10\1\11\1\10\2\11\1\12\10\11"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\10\11\1\42\1\43\12\44\1\45\1\44\1\46\1\47"+
    "\1\50\1\51\1\50\3\52\1\53\1\54\1\55\1\54"+
    "\2\52\1\56\1\57\10\44\1\60\1\44\2\52\2\61"+
    "\1\52\1\62\1\44\1\63\6\44\1\64\1\65\1\66"+
    "\2\52\1\67\1\70\1\71\1\72\1\73\2\1\2\2"+
    "\1\52\2\74\1\52\1\75\1\52\2\76\1\77\1\52"+
    "\2\75\1\52\1\100\7\0\1\4\1\10\1\0\1\101"+
    "\3\10\22\11\1\102\10\11\1\0\1\103\1\104\1\105"+
    "\3\11\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\4\11\1\131\1\132\4\11"+
    "\1\133\10\11\10\0\1\134\4\0\1\45\1\0\1\51"+
    "\4\0\1\55\4\0\1\57\12\0\1\60\1\0\1\52"+
    "\1\0\2\63\1\0\1\62\1\0\1\63\5\0\1\135"+
    "\2\136\2\137\1\2\1\75\1\140\1\0\1\141\3\0"+
    "\1\142\4\0\1\143\1\144\4\11\1\145\15\11\1\146"+
    "\4\11\1\147\10\11\1\150\1\151\2\11\1\152\2\11"+
    "\1\121\1\153\1\154\1\155\1\156\5\11\1\157\2\11"+
    "\1\160\16\11\25\0\1\52\3\0\1\161\4\0\6\11"+
    "\1\162\6\11\1\163\1\11\1\164\1\165\17\11\1\166"+
    "\3\11\1\167\5\11\1\170\1\171\2\11\1\172\1\173"+
    "\4\11\1\174\6\11\1\175\5\11\1\176\1\11\1\177"+
    "\3\0\1\200\2\0\1\201\1\0\1\202\14\0\2\203"+
    "\2\0\1\76\1\143\1\0\1\204\3\11\1\205\1\206"+
    "\5\11\1\207\1\11\1\210\1\211\2\11\1\212\10\11"+
    "\1\213\3\11\1\214\10\11\1\215\1\11\1\216\1\11"+
    "\1\217\1\11\1\220\1\221\15\11\1\222\1\0\1\223"+
    "\1\224\2\0\1\225\20\0\1\11\1\226\1\11\1\227"+
    "\2\11\1\230\1\11\1\231\1\232\1\233\7\11\1\234"+
    "\1\11\1\235\1\236\1\237\1\240\1\241\11\11\1\242"+
    "\1\11\1\243\1\11\1\244\2\11\1\245\3\11\1\246"+
    "\1\11\1\0\1\247\2\0\1\250\1\0\1\251\1\252"+
    "\2\0\1\253\10\0\1\254\1\11\1\255\1\256\2\11"+
    "\1\257\1\260\1\261\2\11\1\262\1\263\2\11\1\264"+
    "\1\265\1\266\1\11\1\267\1\270\3\11\1\271\1\272"+
    "\2\11\1\273\1\274\3\0\1\275\1\276\6\0\1\277"+
    "\2\0\1\300\1\301\1\302\1\303\1\304\1\11\1\305"+
    "\1\306\1\11\1\307\3\11\2\0\1\310\1\311\1\0"+
    "\1\312\1\313\1\314\1\0\1\315\1\316\1\11\1\317"+
    "\1\320\1\321\1\322\1\0\1\323\1\324\1\0\1\11"+
    "\1\325\1\326\1\11\1\327";

  private static int [] zzUnpackAction() {
    int [] result = new int[746];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u0852\0\u08e0\0\u0852\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43"+
    "\0\u0a8a\0\u0ad1\0\u0852\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0852\0\u0fcf\0\u0852\0\u1016"+
    "\0\u105d\0\u10a4\0\u0852\0\u10eb\0\u1132\0\u1179\0\u0852\0\u0852"+
    "\0\u0852\0\u0852\0\u0852\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\u1323\0\u136a\0\u13b1\0\u0852\0\u0852\0\u0852\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677"+
    "\0\u16be\0\u0852\0\u0852\0\u0852\0\u1705\0\u174c\0\u0852\0\u1793"+
    "\0\u17da\0\u0852\0\u0852\0\u1821\0\u1868\0\u18af\0\u18f6\0\u0852"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u0852\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u0927\0\u1f10"+
    "\0\u1f57\0\u0852\0\u0852\0\u0852\0\u1f9e\0\u1fe5\0\u1f9e\0\u0852"+
    "\0\u0852\0\u0852\0\u0852\0\u202c\0\u0852\0\u2073\0\u0852\0\u20ba"+
    "\0\u0852\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u0852\0\u240e\0\u240e\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u0927\0\u2571\0\u25b8\0\u25ff\0\u2646"+
    "\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e"+
    "\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6"+
    "\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26"+
    "\0\u0852\0\u0852\0\u2f6d\0\u2fb4\0\u2ffb\0\u0852\0\u0852\0\u0852"+
    "\0\u0852\0\u0852\0\u0852\0\u0852\0\u0852\0\u0852\0\u0852\0\u0852"+
    "\0\u3042\0\u3089\0\u0852\0\u0852\0\u0852\0\u30d0\0\u0852\0\u3117"+
    "\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u09fc\0\u327a\0\u32c1\0\u3308"+
    "\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778"+
    "\0\u37bf\0\u3806\0\u384d\0\u0852\0\u3894\0\u38db\0\u3922\0\u16be"+
    "\0\u3969\0\u174c\0\u39b0\0\u17da\0\u1793\0\u39f7\0\u1868\0\u3a3e"+
    "\0\u18f6\0\u18af\0\u3a85\0\u1984\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u1c03\0\u3d92"+
    "\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u1dad\0\u3f3c\0\u1e3b"+
    "\0\u3f83\0\u3fca\0\u4011\0\u1f57\0\u4058\0\u409f\0\u40e6\0\u0852"+
    "\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u0852\0\u4290\0\u0852"+
    "\0\u22f2\0\u42d7\0\u23c7\0\u0852\0\u431e\0\u4365\0\u249c\0\u0852"+
    "\0\u43ac\0\u0852\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u09fc\0\u450f"+
    "\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747"+
    "\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f"+
    "\0\u49c6\0\u09fc\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70"+
    "\0\u4bb7\0\u4bfe\0\u0852\0\u0852\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a"+
    "\0\u4d61\0\u4da8\0\u4def\0\u0852\0\u4e36\0\u0852\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u09fc\0\u50b5"+
    "\0\u50fc\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed"+
    "\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de\0\u5525"+
    "\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d"+
    "\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e\0\u5995"+
    "\0\u59dc\0\u5a23\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u0852\0\u412d"+
    "\0\u5b3f\0\u4249\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9"+
    "\0\u5d30\0\u09fc\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda"+
    "\0\u09fc\0\u5f21\0\u09fc\0\u09fc\0\u5f68\0\u5faf\0\u5ff6\0\u603d"+
    "\0\u6084\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e\0\u6275"+
    "\0\u62bc\0\u6303\0\u634a\0\u09fc\0\u6391\0\u63d8\0\u641f\0\u0852"+
    "\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u09fc\0\u09fc\0\u65c9"+
    "\0\u6610\0\u09fc\0\u09fc\0\u6657\0\u669e\0\u66e5\0\u672c\0\u09fc"+
    "\0\u6773\0\u67ba\0\u6801\0\u6848\0\u688f\0\u68d6\0\u09fc\0\u691d"+
    "\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u09fc\0\u6a80\0\u09fc\0\u6ac7"+
    "\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u0852\0\u6c71\0\u0852"+
    "\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9"+
    "\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u70e1"+
    "\0\u5b3f\0\u7128\0\u7128\0\u09fc\0\u716f\0\u71b6\0\u71fd\0\u09fc"+
    "\0\u09fc\0\u7244\0\u728b\0\u72d2\0\u7319\0\u7360\0\u09fc\0\u73a7"+
    "\0\u09fc\0\u09fc\0\u73ee\0\u7435\0\u09fc\0\u747c\0\u74c3\0\u750a"+
    "\0\u7551\0\u7598\0\u75df\0\u7626\0\u766d\0\u09fc\0\u76b4\0\u76fb"+
    "\0\u7742\0\u09fc\0\u7789\0\u77d0\0\u7817\0\u785e\0\u78a5\0\u78ec"+
    "\0\u7933\0\u797a\0\u09fc\0\u79c1\0\u09fc\0\u7a08\0\u09fc\0\u7a4f"+
    "\0\u09fc\0\u09fc\0\u7a96\0\u7add\0\u7b24\0\u7b6b\0\u7bb2\0\u7bf9"+
    "\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u7da3\0\u7dea\0\u09fc"+
    "\0\u7e31\0\u0852\0\u0852\0\u7e78\0\u7ebf\0\u0852\0\u7f06\0\u7f4d"+
    "\0\u7f94\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u80f7\0\u813e\0\u8185"+
    "\0\u81cc\0\u8213\0\u825a\0\u82a1\0\u82e8\0\u832f\0\u8376\0\u09fc"+
    "\0\u83bd\0\u09fc\0\u8404\0\u844b\0\u09fc\0\u8492\0\u09fc\0\u09fc"+
    "\0\u09fc\0\u84d9\0\u8520\0\u8567\0\u85ae\0\u85f5\0\u863c\0\u8683"+
    "\0\u09fc\0\u86ca\0\u09fc\0\u09fc\0\u09fc\0\u09fc\0\u09fc\0\u8711"+
    "\0\u8758\0\u879f\0\u87e6\0\u882d\0\u8874\0\u88bb\0\u8902\0\u8949"+
    "\0\u09fc\0\u8990\0\u09fc\0\u89d7\0\u09fc\0\u8a1e\0\u8a65\0\u09fc"+
    "\0\u8aac\0\u8af3\0\u8b3a\0\u09fc\0\u8b81\0\u8bc8\0\u0852\0\u8c0f"+
    "\0\u8c56\0\u0852\0\u8c9d\0\u0852\0\u0852\0\u8ce4\0\u8d2b\0\u0852"+
    "\0\u8d72\0\u8db9\0\u8e00\0\u8e47\0\u8e8e\0\u8ed5\0\u8f1c\0\u8f63"+
    "\0\u09fc\0\u8faa\0\u09fc\0\u09fc\0\u8ff1\0\u9038\0\u09fc\0\u09fc"+
    "\0\u09fc\0\u907f\0\u90c6\0\u09fc\0\u09fc\0\u910d\0\u9154\0\u09fc"+
    "\0\u09fc\0\u09fc\0\u919b\0\u09fc\0\u09fc\0\u91e2\0\u9229\0\u9270"+
    "\0\u09fc\0\u09fc\0\u92b7\0\u92fe\0\u09fc\0\u09fc\0\u9345\0\u938c"+
    "\0\u93d3\0\u0852\0\u0852\0\u941a\0\u9461\0\u94a8\0\u94ef\0\u9536"+
    "\0\u957d\0\u0852\0\u95c4\0\u960b\0\u09fc\0\u09fc\0\u09fc\0\u09fc"+
    "\0\u09fc\0\u9652\0\u09fc\0\u09fc\0\u9699\0\u09fc\0\u96e0\0\u9727"+
    "\0\u976e\0\u97b5\0\u97fc\0\u0852\0\u0852\0\u9843\0\u0852\0\u0852"+
    "\0\u0852\0\u988a\0\u0852\0\u0852\0\u98d1\0\u09fc\0\u09fc\0\u09fc"+
    "\0\u09fc\0\u9918\0\u0852\0\u0852\0\u995f\0\u99a6\0\u0852\0\u0852"+
    "\0\u99ed\0\u09fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[746];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\2\46\1\47\1\50\1\51\1\52\1\47\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\1\47\1\115\1\47\1\116\1\47\1\117\1\120"+
    "\1\121\1\47\1\122\1\123\5\46\2\47\1\124\1\125"+
    "\1\37\21\126\1\127\1\126\1\130\1\131\1\132\1\133"+
    "\1\134\33\126\1\135\3\126\1\136\1\126\1\137\16\126"+
    "\1\140\3\126\1\141\154\126\1\142\31\126\1\143\1\126"+
    "\1\144\1\145\3\144\1\146\101\144\1\147\1\150\3\147"+
    "\1\151\44\147\1\152\34\147\1\153\1\154\3\153\1\155"+
    "\101\153\1\147\1\156\3\147\1\157\77\147\1\160\1\147"+
    "\1\126\1\161\3\126\1\162\122\126\1\163\1\164\1\165"+
    "\4\126\1\166\30\126\1\167\3\126\1\170\1\126\1\171"+
    "\20\126\1\172\3\126\1\173\101\126\1\174\1\175\1\176"+
    "\1\177\1\174\1\200\100\174\1\147\1\126\1\201\3\126"+
    "\1\202\102\126\1\203\3\126\1\204\10\126\1\205\3\126"+
    "\1\206\65\126\1\40\3\126\1\207\1\210\1\126\1\211"+
    "\2\126\1\211\1\126\3\211\1\126\10\211\1\210\2\126"+
    "\1\211\24\126\14\211\5\126\2\211\3\126\2\212\2\213"+
    "\100\212\1\214\1\212\1\213\2\215\2\213\1\215\1\216"+
    "\77\215\1\217\10\213\1\220\1\213\2\220\1\213\1\220"+
    "\1\221\1\213\1\221\1\213\2\221\1\213\3\221\5\213"+
    "\1\221\10\213\1\222\17\213\1\221\7\213\5\220\2\213"+
    "\2\222\1\213\7\223\1\224\1\223\2\224\1\223\1\224"+
    "\3\223\1\225\54\223\5\224\14\223\1\226\1\223\5\226"+
    "\2\223\1\227\3\223\3\226\32\223\1\226\5\223\1\226"+
    "\5\223\5\226\5\223\1\147\1\230\1\231\1\232\104\147"+
    "\1\233\2\234\33\147\1\235\51\147\1\236\1\237\33\147"+
    "\1\240\50\147\1\241\1\242\1\243\33\147\1\244\47\147"+
    "\107\245\6\0\1\246\1\0\1\247\2\0\1\247\1\0"+
    "\3\247\1\0\10\247\1\246\2\0\1\247\24\0\14\247"+
    "\5\0\2\247\44\0\1\250\106\0\1\33\45\0\2\251"+
    "\2\0\102\251\2\0\1\36\1\252\1\253\213\0\1\40"+
    "\3\0\1\254\103\0\1\41\105\0\1\254\1\40\1\255"+
    "\111\0\12\47\1\0\11\47\2\0\1\47\24\0\23\47"+
    "\12\0\1\256\1\0\2\256\1\0\1\256\14\0\1\256"+
    "\1\257\42\0\5\256\13\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\12\0\1\256\1\0"+
    "\2\256\1\0\1\256\1\261\1\262\1\263\11\0\1\256"+
    "\1\257\42\0\5\256\13\0\12\47\1\0\1\47\1\264"+
    "\1\265\6\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\7\47\1\266\2\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\10\47\1\267\12\47\11\0\12\47"+
    "\1\0\1\47\1\270\3\47\1\271\3\47\2\0\1\47"+
    "\4\0\1\260\17\0\5\47\1\272\3\47\1\273\11\47"+
    "\11\0\12\47\1\0\3\47\1\274\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\7\47"+
    "\1\275\1\47\2\0\1\47\4\0\1\260\17\0\2\47"+
    "\1\276\1\47\1\277\16\47\11\0\11\47\1\300\1\0"+
    "\6\47\1\301\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\4\47\1\302\16\47\11\0\10\47\1\303\1\47\1\0"+
    "\2\47\1\304\6\47\2\0\1\47\4\0\1\260\17\0"+
    "\2\47\1\305\20\47\11\0\12\47\1\0\7\47\1\306"+
    "\1\47\2\0\1\47\4\0\1\260\17\0\1\307\22\47"+
    "\11\0\12\47\1\0\3\47\1\310\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\1\311"+
    "\2\47\1\312\2\47\1\313\2\47\2\0\1\47\4\0"+
    "\1\260\17\0\2\47\1\314\7\47\1\315\10\47\11\0"+
    "\12\47\1\0\10\47\1\316\2\0\1\47\4\0\1\317"+
    "\17\0\23\47\35\0\1\320\107\0\1\321\2\0\1\322"+
    "\56\0\10\47\1\323\1\47\1\0\5\47\1\324\3\47"+
    "\2\0\1\47\4\0\1\260\17\0\2\47\1\325\20\47"+
    "\40\0\1\326\1\327\106\0\1\330\106\0\1\331\106\0"+
    "\1\332\111\0\1\333\103\0\1\334\106\0\1\335\106\0"+
    "\1\336\7\0\1\337\76\0\1\340\1\341\7\0\1\342"+
    "\75\0\1\343\12\0\1\344\73\0\1\345\13\0\1\346"+
    "\72\0\1\347\14\0\1\350\41\0\10\47\1\351\1\47"+
    "\1\0\3\47\1\352\1\47\1\353\3\47\2\0\1\47"+
    "\4\0\1\260\17\0\5\47\1\354\15\47\11\0\12\47"+
    "\1\0\4\47\1\355\4\47\2\0\1\47\4\0\1\260"+
    "\17\0\4\47\1\356\2\47\1\357\13\47\11\0\12\47"+
    "\1\0\2\47\1\360\1\361\1\47\1\362\3\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\10\47\1\363"+
    "\1\47\1\0\3\47\1\364\5\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\3\47\1\365"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\1\47\1\366\1\367\2\47\1\370\3\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\2\47"+
    "\1\371\2\47\1\372\15\47\11\0\10\47\1\373\1\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\25\0\1\374\151\0\1\375\43\0\1\376\4\0\1\377"+
    "\35\0\1\u0100\104\0\1\u0101\53\0\1\u0102\141\0\1\u0103"+
    "\50\0\1\u0104\37\0\1\u0105\45\0\1\u0106\104\0\1\u0107"+
    "\65\0\1\140\3\0\1\u0108\102\0\1\u0108\1\140\1\u0109"+
    "\104\0\1\145\3\0\1\u010a\102\0\1\u010a\1\145\1\u010b"+
    "\103\0\1\147\1\150\2\0\1\147\1\151\44\147\1\152"+
    "\33\147\2\0\1\u010c\1\u010d\1\u010e\104\0\1\154\3\0"+
    "\1\u010f\102\0\1\u010f\1\154\1\u0110\103\0\1\147\1\156"+
    "\2\0\1\147\1\157\77\147\1\160\2\0\1\u0111\1\u0112"+
    "\1\u0113\104\0\1\161\3\0\1\u0114\102\0\1\u0114\1\161"+
    "\1\u0115\131\0\1\u0116\106\0\1\u0117\145\0\1\u0118\45\0"+
    "\1\u0119\100\0\1\u011a\2\0\1\u011b\111\0\1\u011c\106\0"+
    "\1\u011d\45\0\1\u011e\15\0\1\172\3\0\1\u011f\102\0"+
    "\1\u011f\1\172\1\u0120\104\0\1\u0121\105\0\1\147\1\u0122"+
    "\1\176\1\177\102\147\3\0\1\176\105\0\1\u0123\1\u0124"+
    "\1\u0125\104\0\1\201\3\0\1\u0126\102\0\1\u0126\1\201"+
    "\1\u0127\104\0\1\203\3\0\1\u0128\102\0\1\u0128\1\203"+
    "\1\u0129\174\0\1\u012a\41\0\1\u012b\70\0\12\u012c\1\0"+
    "\11\u012c\2\0\1\u012c\24\0\23\u012c\4\0\1\u012d\3\0"+
    "\1\u012e\12\u012c\1\0\11\u012c\2\0\1\u012c\4\0\1\u012f"+
    "\17\0\23\u012c\3\0\2\u0130\2\0\102\u0130\1\0\1\u0130"+
    "\1\u0131\1\u0132\1\u0133\102\u0130\10\0\1\224\1\0\2\224"+
    "\1\0\1\224\3\0\1\225\54\0\5\224\14\0\1\u0134"+
    "\1\0\5\u0134\2\0\1\227\3\0\3\u0134\32\0\1\u0134"+
    "\5\0\1\u0134\5\0\5\u0134\5\0\1\147\1\230\1\231"+
    "\1\232\102\147\3\0\1\231\104\0\1\147\1\233\2\234"+
    "\33\147\1\235\46\147\2\0\1\u0135\2\234\152\0\1\u0136"+
    "\40\0\1\u0137\106\0\1\u0137\1\236\106\0\1\236\1\237"+
    "\33\0\1\240\7\0\1\u0138\40\0\1\u0139\1\242\1\243"+
    "\104\0\1\u013a\106\0\1\u013a\1\242\143\0\1\u013b\7\0"+
    "\1\u013c\45\0\12\247\1\0\11\247\2\0\1\247\24\0"+
    "\23\247\4\0\1\250\1\u013d\1\u013e\104\0\1\u013f\106\0"+
    "\1\253\1\0\1\253\1\0\1\u0140\102\0\1\253\3\0"+
    "\1\u0140\102\0\2\40\2\0\1\254\110\0\1\256\1\0"+
    "\2\256\1\0\1\256\14\0\1\256\43\0\5\256\14\0"+
    "\1\u0141\1\0\2\u0141\1\0\1\u0141\60\0\5\u0141\46\0"+
    "\1\u0142\56\0\1\261\2\0\1\261\14\0\1\261\66\0"+
    "\2\262\1\0\1\262\14\0\1\262\44\0\4\262\14\0"+
    "\1\263\1\0\5\263\6\0\3\263\2\0\1\263\27\0"+
    "\1\263\5\0\1\263\5\0\5\263\13\0\12\47\1\0"+
    "\3\47\1\u0143\5\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\2\47\1\u0144\20\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\21\47\1\u0145"+
    "\1\47\11\0\12\47\1\0\3\47\1\u0146\5\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\11\47\1\u0147"+
    "\11\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\13\47\1\u0148\7\47\11\0\12\47\1\0"+
    "\1\47\1\u0149\7\47\2\0\1\47\4\0\1\260\17\0"+
    "\2\47\1\u014a\20\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\10\47\1\u014b\12\47\11\0"+
    "\12\47\1\0\1\u014c\4\47\1\u014d\3\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\2\47\1\u014e\20\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\4\47\1\u014f\16\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\2\47\1\u0150\20\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\2\47\1\u0151\5\47\1\u0152\12\47\11\0\12\47"+
    "\1\0\7\47\1\u0153\1\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\2\47\1\u0154\6\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\1\47\1\u0155\7\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\4\47\1\u0156\16\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\4\47"+
    "\1\u0157\16\47\11\0\12\47\1\0\7\47\1\u0158\1\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\1\47"+
    "\1\u0159\21\47\11\0\12\47\1\0\1\u015a\10\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\10\47\1\u015b"+
    "\1\47\1\0\1\47\1\u015c\3\47\1\u015d\3\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\5\47\1\u015e\3\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\3\47\1\u015f\5\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\22\47\1\u0160"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\2\47\1\u0161\20\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\4\47\1\u0162\16\47"+
    "\3\0\41\u0163\1\0\45\u0163\32\0\1\u0164\62\0\12\47"+
    "\1\0\6\47\1\u0165\2\47\2\0\1\47\4\0\1\260"+
    "\17\0\2\47\1\u0166\20\47\11\0\12\47\1\0\1\47"+
    "\1\u0167\7\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\1\47\1\u0168\1\47\1\u0169\5\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\4\0\1\u016a"+
    "\35\0\1\u016b\50\0\1\342\143\0\1\u016c\13\0\1\u016d"+
    "\72\0\1\u016e\56\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\4\47\1\u016f\16\47\11\0\12\47"+
    "\1\0\6\47\1\u0170\2\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\1\u0171\6\47\1\u0172"+
    "\1\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\5\47\1\u0173\3\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\1\u0174\10\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\10\47"+
    "\1\u0175\12\47\11\0\12\47\1\0\6\47\1\u0176\2\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\12\47"+
    "\1\u0177\10\47\11\0\12\47\1\0\1\u0178\10\47\2\0"+
    "\1\47\4\0\1\260\17\0\7\47\1\u0179\13\47\11\0"+
    "\12\47\1\0\2\47\1\u017a\6\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\4\47\1\u017b"+
    "\1\47\1\u017c\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\1\u017d\22\47\11\0\12\47\1\0\1\u017e\10\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\10\47\1\u017f"+
    "\1\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\2\47\1\u0180\20\47\11\0\7\47\1\u0181\2\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\1\u0182\22\47\11\0\12\47\1\0\1\u0183\10\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\2\47\1\u0184"+
    "\20\47\11\0\12\47\1\0\1\u0185\10\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\75\0\1\u0186\103\0\1\u0187"+
    "\41\0\1\u0188\114\0\1\u0189\145\0\1\u018a\46\0\1\u018b"+
    "\107\0\1\u018c\143\0\1\u018d\102\0\1\u018e\52\0\1\u018f"+
    "\107\0\1\u0190\61\0\2\140\2\0\1\u0108\102\0\2\145"+
    "\2\0\1\u010a\101\0\1\147\1\150\1\u010d\1\0\1\147"+
    "\1\151\44\147\1\152\33\147\2\0\2\154\2\0\1\u010f"+
    "\101\0\1\147\1\156\1\u0112\1\0\1\147\1\157\77\147"+
    "\1\160\2\0\2\161\2\0\1\u0114\116\0\1\u0191\112\0"+
    "\1\u0192\110\0\1\u0193\153\0\1\u0194\105\0\1\u0195\41\0"+
    "\1\u0196\157\0\1\u0197\104\0\1\u0198\102\0\1\u0199\22\0"+
    "\2\172\2\0\1\u011f\102\0\1\u0121\3\0\1\u019a\101\0"+
    "\1\147\1\u0122\1\176\1\177\1\147\1\u019b\100\147\2\0"+
    "\1\u0123\1\u0124\1\u0125\1\0\1\u019a\102\0\1\u0124\106\0"+
    "\2\u0124\105\0\2\201\2\0\1\u0126\102\0\2\203\2\0"+
    "\1\u0128\122\0\1\u019c\147\0\1\u019d\25\0\1\u012d\3\0"+
    "\1\u012e\33\0\1\u012f\46\0\1\u012e\1\u012d\1\u019e\144\0"+
    "\1\u019f\46\0\1\u01a0\1\u0132\1\u0133\104\0\1\u0132\106\0"+
    "\2\u0132\124\0\1\227\67\0\1\u0135\106\0\1\u0137\35\0"+
    "\1\u01a1\50\0\1\u013a\35\0\1\u01a2\50\0\1\u013e\1\0"+
    "\1\u013e\1\0\1\250\102\0\1\u013e\3\0\1\250\125\0"+
    "\1\u01a3\70\0\12\47\1\0\5\47\1\u01a4\3\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\6\47\1\u01a5\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\3\47\1\u01a6\5\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\1\47\1\u01a7\7\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\10\47\1\u01a8\1\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\10\47\1\u01a9"+
    "\1\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\7\47\1\u01aa\1\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\3\47\1\u01ab\5\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\2\47\1\u01ac\6\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\6\47\1\u01ad"+
    "\14\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\4\47\1\u01ae\16\47\11\0\12\47\1\0"+
    "\1\u01af\10\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\10\47\1\u01b0\1\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\1\u01b1"+
    "\10\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\6\47\1\u01b2\2\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\3\47\1\u01b3"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\7\47\1\u01b4\13\47\11\0\12\47\1\0\3\47\1\u01b5"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\12\47\1\u01b6"+
    "\10\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\1\u01b7\22\47\11\0\12\47\1\0\5\47"+
    "\1\u01b8\3\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\3\47\1\u01b9\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\2\47"+
    "\1\u01ba\6\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\1\u01bb\22\47\11\0\12\47\1\0\2\47\1\u01bc"+
    "\6\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\1\u01bd\10\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\6\47\1\u01be\2\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\3\47\1\u01bf\5\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\3\47\1\u01c0\5\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\1\u01c1\10\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\2\47\1\u01c2\6\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\5\47\1\u01c3\3\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\6\47\1\u01c4\14\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\2\47\1\u01c5"+
    "\20\47\11\0\12\47\1\0\1\u01c6\10\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\12\47\1\u01c7\10\47"+
    "\4\0\1\u016a\106\0\1\u016b\143\0\1\u01c8\56\0\12\47"+
    "\1\0\1\u01c9\6\47\1\u01ca\1\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\6\47\1\u01cb"+
    "\2\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\1\u01cc\22\47\11\0\12\47\1\0\1\u01cd\2\47\1\u01ce"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\1\47\1\u01cf\7\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\3\47\1\u01d0\6\47\1\0"+
    "\3\47\1\u01d1\5\47\2\0\1\47\4\0\1\260\17\0"+
    "\4\47\1\u01d2\7\47\1\u01d3\1\u01d4\1\u01d5\4\47\11\0"+
    "\10\47\1\u01d6\1\47\1\0\6\47\1\u01d7\2\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\6\47\1\u01d8\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\2\47\1\u01d9\20\47\11\0\12\47\1\0"+
    "\3\47\1\u01da\5\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\7\47\1\u01db\2\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\5\47\1\u01dc\3\47\2\0\1\47\4\0\1\260\17\0"+
    "\2\47\1\u01dd\20\47\11\0\12\47\1\0\3\47\1\u01de"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\6\47\1\u01df\2\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\5\47\1\u01e0\15\47\11\0"+
    "\12\47\1\0\1\u01e1\10\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\u01e2"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\6\47"+
    "\1\u01e3\2\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\3\47\1\u01e4\17\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\5\47\1\u01e5\15\47"+
    "\11\0\12\47\1\0\6\47\1\u01e6\2\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\10\47\1\u01e7\1\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\66\0\1\u01e8\47\0\1\u01e9\100\0\1\u01ea\114\0\1\u01eb"+
    "\112\0\1\u01ec\32\0\1\u01ed\47\0\1\u01ee\106\0\1\u01ef"+
    "\106\0\1\u01f0\111\0\1\u01f1\142\0\1\u01f2\117\0\1\u01f3"+
    "\42\0\1\u01f4\141\0\1\u01f5\53\0\1\u01f6\141\0\1\u01f7"+
    "\47\0\1\u01f8\111\0\1\u01f9\146\0\1\u01fa\41\0\1\u01fb"+
    "\112\0\1\u01fc\61\0\1\u019a\1\u01fd\1\u01fe\166\0\1\u01ff"+
    "\46\0\1\u0200\64\0\2\u012d\2\0\1\u012e\33\0\1\u012f"+
    "\46\0\1\u0201\114\0\1\u0202\1\0\2\u0202\1\0\1\u0202"+
    "\16\0\1\u0203\41\0\5\u0202\13\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\3\47\1\u0204\17\47"+
    "\11\0\12\47\1\0\1\u0205\10\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\1\u0206\22\47\11\0\12\47"+
    "\1\0\5\47\1\u0207\3\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\4\47\1\u0208\4\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\12\47"+
    "\1\u0209\10\47\11\0\10\47\1\u020a\1\47\1\0\7\47"+
    "\1\u020b\1\47\2\0\1\47\4\0\1\260\17\0\6\47"+
    "\1\u020c\14\47\11\0\12\47\1\0\1\47\1\u020d\7\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\10\47"+
    "\1\u020e\1\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\13\47\1\u020f\7\47\11\0\3\47"+
    "\1\u0210\6\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\4\47\1\u0211\7\47\1\u0212\1\u0213\1\u0214\4\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\4\47\1\u0215\16\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\2\47\1\u0216\20\47"+
    "\11\0\12\47\1\0\5\47\1\u0217\3\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\5\47"+
    "\1\u0218\3\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\1\u0219\2\47\1\u021a\5\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\6\47\1\u021b\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\1\47\1\u021c\7\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\2\47\1\u021d"+
    "\20\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\3\47\1\u021e\17\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\1\u021f\22\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\2\47\1\u0220\20\47\11\0\12\47\1\0\3\47"+
    "\1\u0221\5\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\10\47\1\u0222\12\47\11\0\10\47\1\u0223\1\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\1\u0224\22\47\11\0\12\47\1\0\6\47\1\u0225"+
    "\2\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\1\u0226\10\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\5\47\1\u0227\3\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\2\47\1\u0228\6\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\10\47\1\u0229\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\2\47\1\u022a"+
    "\20\47\11\0\12\47\1\0\1\u022b\10\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\7\47"+
    "\1\u022c\1\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\5\47\1\u022d\15\47\11\0\12\47\1\0\10\47"+
    "\1\u022e\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\15\47\1\u022f\5\47\11\0\12\47\1\0\1\47\1\u0230"+
    "\7\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\20\47\1\u0231\2\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\17\47\1\u0232\3\47\11\0"+
    "\12\47\1\0\1\47\1\u0233\7\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\2\47\1\u0234\20\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\u0235\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\7\47\1\u0236\1\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\6\47\1\u0237\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\2\47\1\u0238\6\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\4\47\1\u0239"+
    "\16\47\11\0\12\47\1\0\1\u023a\10\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\10\47\1\u023b\1\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\3\47\1\u023c\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\5\47"+
    "\1\u023d\3\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\2\47\1\u023e\20\47\11\0\12\47\1\0\5\47"+
    "\1\u023f\3\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\3\47\1\u0240\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\70\0\1\u0241\46\0\1\u0242"+
    "\103\0\1\u0243\147\0\1\u0244\104\0\1\u0245\52\0\1\u0246"+
    "\37\0\1\u0247\43\0\1\u0248\107\0\1\u0249\150\0\1\u024a"+
    "\111\0\1\u024b\101\0\1\u024c\41\0\1\u024d\114\0\1\u024e"+
    "\143\0\1\u024f\116\0\1\u0250\76\0\1\u0251\51\0\1\u0252"+
    "\106\0\1\u0253\152\0\1\u0254\17\0\1\u01fd\106\0\2\u01fd"+
    "\122\0\1\u0255\153\0\1\u0256\32\0\1\u0202\1\0\2\u0202"+
    "\1\0\1\u0202\60\0\5\u0202\13\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\2\47\1\u0257\20\47"+
    "\11\0\12\47\1\0\1\u0258\10\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\1\u0259\10\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\4\47\1\u025a\4\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\3\47\1\u025b\5\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\3\47\1\u025c\5\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\4\47\1\u025d\16\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\4\47"+
    "\1\u025e\16\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\15\47\1\u025f\5\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\20\47"+
    "\1\u0260\2\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\17\47\1\u0261\3\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\1\u0262"+
    "\22\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\1\u0263\22\47\11\0\12\47\1\0\1\47"+
    "\1\u0264\7\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\5\47\1\u0265\3\47\2\0\1\47"+
    "\4\0\1\260\17\0\2\47\1\u0266\20\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\4\47"+
    "\1\u0267\16\47\11\0\12\47\1\0\6\47\1\u0268\2\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\1\u0269\10\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\1\47\1\u026a\7\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\1\u026b\10\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\1\u026c\22\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\6\47\1\u026d\14\47\11\0"+
    "\12\47\1\0\4\47\1\u026e\4\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\5\47\1\u026f\15\47\11\0"+
    "\12\47\1\0\6\47\1\u0270\2\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\2\47\1\u0271\20\47\11\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\4\47\1\u0272\16\47\11\0\12\47\1\0\5\47\1\u0273"+
    "\3\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\5\47\1\u0274\3\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\4\47\1\u0275\16\47\11\0"+
    "\10\47\1\u0276\1\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\1\u0277\10\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\4\47\1\u0278\4\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\1\u0279\10\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\1\u027a\22\47"+
    "\11\0\12\47\1\0\3\47\1\u027b\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\10\47\1\u027c\12\47"+
    "\11\0\12\47\1\0\3\47\1\u027d\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\6\47"+
    "\1\u027e\2\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\3\47\1\u027f\5\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\3\47"+
    "\1\u0280\5\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\6\47\1\u0281\14\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\1\u0282\22\47\11\0"+
    "\12\47\1\0\1\u0283\10\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\1\u0284\22\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\13\47\1\u0285"+
    "\7\47\64\0\1\u0286\52\0\1\u0287\103\0\1\u0288\155\0"+
    "\1\u0289\36\0\1\u028a\154\0\1\u028b\43\0\1\u028c\110\0"+
    "\1\u028d\163\0\1\u028e\70\0\1\u028f\110\0\1\u0290\35\0"+
    "\1\u0291\116\0\1\u0292\146\0\1\u0293\101\0\1\u0294\106\0"+
    "\1\u0295\110\0\1\u0296\110\0\1\u0297\43\0\1\u0298\72\0"+
    "\12\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\4\47\1\u0299\16\47\11\0\10\47\1\u029a\1\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\1\u029b\10\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\4\47\1\u029c\4\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\6\47\1\u029d\2\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\2\47\1\u029e\20\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\5\47"+
    "\1\u029f\15\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\6\47\1\u02a0\14\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\13\47"+
    "\1\u02a1\7\47\11\0\10\47\1\u02a2\1\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\2\47\1\u02a3\6\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\11\47\1\u02a4\11\47\11\0\12\47"+
    "\1\0\3\47\1\u02a5\5\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\5\47\1\u02a6\3\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\6\47\1\u02a7\2\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\1\u02a8\10\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\6\47\1\u02a9\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\7\47\1\u02aa\1\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\2\47\1\u02ab\6\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\4\47\1\u02ac\4\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\10\47\1\u02ad"+
    "\1\47\1\0\11\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\5\47\1\u02ae\3\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\2\47\1\u02af"+
    "\20\47\11\0\12\47\1\0\5\47\1\u02b0\3\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\1\u02b1\10\47\2\0\1\47\4\0\1\260\17\0\23\47"+
    "\11\0\12\47\1\0\11\47\2\0\1\47\4\0\1\260"+
    "\17\0\6\47\1\u02b2\14\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\7\47\1\u02b3\13\47"+
    "\11\0\12\47\1\0\1\u02b4\10\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\3\47\1\u02b5"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\23\47\11\0"+
    "\12\47\1\0\3\47\1\u02b6\5\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\32\0\1\u02b7\142\0\1\u02b8\46\0"+
    "\1\u02b9\107\0\1\u02ba\106\0\1\u02bb\110\0\1\u02bc\107\0"+
    "\1\u02bd\153\0\1\u02be\40\0\1\u02bf\107\0\1\u02c0\105\0"+
    "\1\u02c1\141\0\1\u02c2\53\0\1\u02c3\104\0\1\u02c4\70\0"+
    "\12\47\1\0\1\47\1\u02c5\7\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\11\47\2\0"+
    "\1\47\4\0\1\260\17\0\11\47\1\u02c6\11\47\11\0"+
    "\12\47\1\0\1\u02c7\10\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\11\47\2\0\1\47"+
    "\4\0\1\260\17\0\4\47\1\u02c8\16\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\7\47"+
    "\1\u02c9\13\47\11\0\7\47\1\u02ca\2\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\3\47\1\u02cb\5\47\2\0\1\47\4\0\1\260"+
    "\17\0\23\47\11\0\12\47\1\0\3\47\1\u02cc\5\47"+
    "\2\0\1\47\4\0\1\260\17\0\23\47\11\0\12\47"+
    "\1\0\11\47\2\0\1\47\4\0\1\260\17\0\1\u02cd"+
    "\22\47\11\0\12\47\1\0\1\u02ce\10\47\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\11\47"+
    "\2\0\1\47\4\0\1\260\17\0\1\u02cf\22\47\11\0"+
    "\12\47\1\0\5\47\1\u02d0\3\47\2\0\1\47\4\0"+
    "\1\260\17\0\23\47\11\0\12\47\1\0\3\47\1\u02d1"+
    "\5\47\2\0\1\47\4\0\1\260\17\0\23\47\26\0"+
    "\1\u02d2\154\0\1\u02d3\36\0\1\u02d4\114\0\1\u02d5\75\0"+
    "\1\u02d6\114\0\1\u02d7\104\0\1\u02d8\114\0\1\u02d9\77\0"+
    "\1\u02da\114\0\1\u02db\146\0\1\u02dc\25\0\12\47\1\0"+
    "\6\47\1\u02dd\2\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\3\47\1\u02de\5\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\11\0\12\47\1\0"+
    "\3\47\1\u02df\5\47\2\0\1\47\4\0\1\260\17\0"+
    "\23\47\11\0\12\47\1\0\11\47\2\0\1\47\4\0"+
    "\1\260\17\0\10\47\1\u02e0\12\47\11\0\12\47\1\0"+
    "\11\47\2\0\1\47\4\0\1\260\17\0\6\47\1\u02e1"+
    "\14\47\72\0\1\u02e2\40\0\1\u02e3\152\0\1\u02e4\45\0"+
    "\1\u02e5\70\0\12\47\1\0\3\47\1\u02e6\5\47\2\0"+
    "\1\47\4\0\1\260\17\0\23\47\27\0\1\u02e7\151\0"+
    "\1\u02e8\25\0\12\47\1\0\10\47\1\u02e9\2\0\1\47"+
    "\4\0\1\260\17\0\23\47\11\0\12\47\1\0\10\47"+
    "\1\u02ea\2\0\1\47\4\0\1\260\17\0\23\47\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39476];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\2\1\12\0\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\21\1\1\11\1\1\1\11\3\1\1\11"+
    "\3\1\5\11\10\1\3\11\13\1\3\11\2\1\1\11"+
    "\2\1\2\11\4\1\1\11\15\1\1\11\13\1\3\11"+
    "\3\1\4\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\13\1\1\11\1\0\2\1\4\0\2\1\1\0\37\1"+
    "\1\0\1\1\2\11\3\1\13\11\2\1\3\11\1\1"+
    "\1\11\24\1\10\0\1\11\4\0\1\1\1\0\1\1"+
    "\4\0\1\1\4\0\1\1\12\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\1\1\5\0\1\1"+
    "\1\11\5\1\1\11\1\0\1\11\3\0\1\11\2\0"+
    "\1\1\1\11\1\1\1\11\40\1\2\11\7\1\1\11"+
    "\1\1\1\11\27\1\25\0\1\1\3\0\1\11\4\0"+
    "\44\1\1\11\37\1\3\0\1\1\2\0\1\11\1\0"+
    "\1\11\14\0\2\1\2\0\2\1\1\0\75\1\1\0"+
    "\2\11\2\0\1\11\20\0\57\1\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\2\0\1\11\10\0\36\1\3\0"+
    "\2\11\6\0\1\11\2\0\15\1\2\0\2\11\1\0"+
    "\3\11\1\0\2\11\5\1\1\0\2\11\1\0\1\1"+
    "\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[746];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static final boolean DEBUG = true;

  public static final int PAWN_CELL_SIZE = 32;

  private static final char DEFAULT_ESCAPE_CHARACTER = '\\';
  private static final boolean DEFAULT_REQUIRE_SEMICOLONS = false;
  private static final boolean DEFAULT_REQUIRE_NEWDECLS = false;

  //ExtendedSyntaxStrCommentHandler longCommentOrStringHandler
  //    = new ExtendedSyntaxStrCommentHandler();

  private char escapeCharacter;
  private boolean requireSemicolons;
  private boolean requireNewDecls;

  private StringBuilder string = new StringBuilder(32);
  private char character;
  private Object value;

  public SourcePawnLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
    resetSemicolonsRequired();
    resetNewDeclsRequired();
  }

  public char getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(char escapeCharacter) {
    if (getEscapeCharacter() != escapeCharacter) {
      this.escapeCharacter = escapeCharacter;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", escapeCharacter);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(char ch) {
    return ch == getEscapeCharacter();
  }

  public boolean areSemicolonsRequired() {
    return requireSemicolons;
  }

  public void setSemicolonsRequired(boolean requireSemicolons) {
    if (areSemicolonsRequired() != requireSemicolons) {
      this.requireSemicolons = requireSemicolons;
      if (DEBUG) {
        if (requireSemicolons) {
          System.out.println("Semicolons are required");
        } else {
          System.out.println("Semicolons are no longer required");
        }
      }
    }
  }

  public void resetSemicolonsRequired() {
    setSemicolonsRequired(DEFAULT_REQUIRE_SEMICOLONS);
  }

  public boolean areNewDeclsRequired() {
    return requireNewDecls;
  }

  public void setNewDeclsRequired(boolean requireNewDecls) {
    if (areNewDeclsRequired() != requireNewDecls) {
      this.requireNewDecls = requireNewDecls;
      if (DEBUG) {
        if (requireNewDecls) {
          System.out.println("NewDecls are required");
        } else {
          System.out.println("NewDecls are no longer required");
        }
      }
    }
  }

  public void resetNewDeclsRequired() {
    setNewDeclsRequired(DEFAULT_REQUIRE_NEWDECLS);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SourcePawnLexer(java.io.Reader in) {
    switch (PAWN_CELL_SIZE) {
    case 16:
    case 32:
    case 64:
      break;
    default:
      throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
  }

  resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_PRAGMA_DEPRECATED_STRING: {
              String text = string.toString().trim();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
            case 747: break;
            case IN_PREPROCESSOR_PRAGMA_NEWDECLS: {
              yypushback(yylength()); yybegin(YYINITIAL);
            }
            case 748: break;
            case IN_CHARACTER_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 749: break;
            case IN_STRING_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 750: break;
            case IN_LINE_COMMENT: {
              String text = string.toString().trim();
                value = text;
                if (DEBUG) {
                  System.out.printf("line comment = '%s'%n", text);
                }

                yybegin(YYINITIAL);
                return LINE_COMMENT;
            }
            case 751: break;
            case IN_BLOCK_COMMENT: {
              return BAD_CHARACTER;
            }
            case 752: break;
            case IN_DOC_COMMENT_PRE: {
              return BAD_CHARACTER;
            }
            case 753: break;
            case IN_DOC_COMMENT: {
              return BAD_CHARACTER;
            }
            case 754: break;
            case IN_DOC_COMMENT_POST: {
              String text = string.toString().trim();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("doc comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              yypushback(yylength());
                              return DOC_COMMENT;
            }
            case 755: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character * 10) + (ch - '0');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 216: break;
          case 2: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character << 4) + (ch - '0');
                                break;
                              case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                                character = (character << 4) + (ch - 'a');
                                break;
                              case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                                character = (character << 4) + (ch - 'A');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 217: break;
          case 3: 
            { return BAD_CHARACTER;
            }
          case 218: break;
          case 4: 
            { return WHITESPACE;
            }
          case 219: break;
          case 5: 
            { return NEW_LINE;
            }
          case 220: break;
          case 6: 
            { return LBRACKET;
            }
          case 221: break;
          case 7: 
            { return AT_SIGN;
            }
          case 222: break;
          case 8: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 16: value = (short)SourcePawnUtils.parseNumber(yytext()); break;
                          case 32: value = (int)SourcePawnUtils.parseNumber(yytext()); break;
                          case 64: value = (long)SourcePawnUtils.parseNumber(yytext()); break;
                          default: throw new AssertionError(
                                "Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("number %s = %d%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }

                      return NUMBER_LITERAL;
            }
          case 223: break;
          case 9: 
            { return IDENTIFIER;
            }
          case 224: break;
          case 10: 
            { return SEMICOLON;
            }
          case 225: break;
          case 11: 
            { return UNDERSCORE;
            }
          case 226: break;
          case 12: 
            { return PERIOD;
            }
          case 227: break;
          case 13: 
            { return MINUS;
            }
          case 228: break;
          case 14: 
            { return AMPERSAND;
            }
          case 229: break;
          case 15: 
            { return ASSIGN;
            }
          case 230: break;
          case 16: 
            { return ASTERISK;
            }
          case 231: break;
          case 17: 
            { return CARET;
            }
          case 232: break;
          case 18: 
            { return COLON;
            }
          case 233: break;
          case 19: 
            { return COMMA;
            }
          case 234: break;
          case 20: 
            { return EXCLAMATION;
            }
          case 235: break;
          case 21: 
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 236: break;
          case 22: 
            { return PERCENT;
            }
          case 237: break;
          case 23: 
            { return PLUS;
            }
          case 238: break;
          case 24: 
            { return SLASH;
            }
          case 239: break;
          case 25: 
            { return TILDE;
            }
          case 240: break;
          case 26: 
            { return VERTICAL_BAR;
            }
          case 241: break;
          case 27: 
            { return GT;
            }
          case 242: break;
          case 28: 
            { return LT;
            }
          case 243: break;
          case 29: 
            { return LBRACE;
            }
          case 244: break;
          case 30: 
            { return RBRACE;
            }
          case 245: break;
          case 31: 
            { return RBRACKET;
            }
          case 246: break;
          case 32: 
            { return LPAREN;
            }
          case 247: break;
          case 33: 
            { return RPAREN;
            }
          case 248: break;
          case 34: 
            { string.setLength(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 249: break;
          case 35: 
            { string.setLength(0); yybegin(IN_STRING_LITERAL);
            }
          case 250: break;
          case 36: 
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 251: break;
          case 37: 
            { yybegin(IN_PREPROCESSOR_INCLUDE); return WHITESPACE;
            }
          case 252: break;
          case 38: 
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMFILE_PRE); return LT;
            }
          case 253: break;
          case 39: 
            { string.setLength(0);
                          yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEFILE_PRE);
            }
          case 254: break;
          case 40: 
            { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMFILE);
            }
          case 255: break;
          case 41: 
            { yybegin(IN_PREPROCESSOR_INCLUDE_SYSTEMFILE); return WHITESPACE;
            }
          case 256: break;
          case 42: 
            { string.append(yytext());
            }
          case 257: break;
          case 43: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("system file = \"%s\"%n", text);
                          }
                          
                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          return PREPROCESSOR_INCLUDE_SYSTEMFILE;
            }
          case 258: break;
          case 44: 
            { yypushback(yylength()); yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEFILE);
            }
          case 259: break;
          case 45: 
            { yybegin(IN_PREPROCESSOR_INCLUDE_RELATIVEFILE);
            }
          case 260: break;
          case 46: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("relative file = \"%s\"%n", text);
                          }
                          
                          yybegin(YYINITIAL);
                          return PREPROCESSOR_INCLUDE_RELATIVEFILE;
            }
          case 261: break;
          case 47: 
            { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITESPACE;
            }
          case 262: break;
          case 48: 
            { string.setLength(0);
                          yybegin(IN_PRAGMA_DEPRECATED_STRING);
                           /* no return, ignore preceeding whitespace */
            }
          case 263: break;
          case 49: 
            { String text = string.toString().trim();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
          case 264: break;
          case 50: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITESPACE;
            }
          case 265: break;
          case 51: 
            { /* ignore whitespace */
            }
          case 266: break;
          case 52: 
            { character = yycharat(0);
                          if (isEscapeCharacter(character)) {
                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);
                          }
            }
          case 267: break;
          case 53: 
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 268: break;
          case 54: 
            { String text = Character.toString(character);
                          value = character;
                          if (DEBUG) {
                            System.out.printf("character = \'%s\'%n", text);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 269: break;
          case 55: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("string = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 270: break;
          case 56: 
            { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE);
            }
          case 271: break;
          case 57: 
            { character = yycharat(0);
                          if (character == 'x') {
                            yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);
                          } else {
                            switch(yycharat(0)) {
                              case 'a':
                                character = '\u0007';
                                break;
                              case 'b':
                                character = '\b';
                                break;
                              case 'e':
                                character = '\u001B';
                                break;
                              case 'f':
                                character = '\f';
                                break;
                              case 'n':
                                character = '\n';
                                break;
                              case 'r':
                                character = '\r';
                                break;
                              case 't':
                                character = '\t';
                                break;
                              case 'v':
                                character = '\u000B';
                                break;
                              default:
                                throw new AssertionError(
                                    "Unsupported control character: " + yycharat(0));
                            }

                            yybegin(IN_CHARACTER_LITERAL);
                          }
            }
          case 272: break;
          case 58: 
            { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 273: break;
          case 59: 
            { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL);
            }
          case 274: break;
          case 60: 
            { String text = string.toString().trim();
                value = text;
                if (DEBUG) {
                  System.out.printf("line comment = '%s'%n", text);
                }

                yybegin(YYINITIAL);
                yypushback(yylength());
                return LINE_COMMENT;
            }
          case 275: break;
          case 61: 
            { string.append(' ');
            }
          case 276: break;
          case 62: 
            { yybegin(IN_DOC_COMMENT);
            }
          case 277: break;
          case 63: 
            { /* ignore leading asterisks */
            }
          case 278: break;
          case 64: 
            { String text = string.toString().trim();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("doc comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              yypushback(yylength());
                              return DOC_COMMENT;
            }
          case 279: break;
          case 65: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return TAG;
            }
          case 280: break;
          case 66: 
            { return AS;
            }
          case 281: break;
          case 67: 
            { return RANGE;
            }
          case 282: break;
          case 68: 
            { return DECREMENT;
            }
          case 283: break;
          case 69: 
            { return SUBEQ;
            }
          case 284: break;
          case 70: 
            { return AND;
            }
          case 285: break;
          case 71: 
            { return ANDEQ;
            }
          case 286: break;
          case 72: 
            { return EQUALTO;
            }
          case 287: break;
          case 73: 
            { return MULEQ;
            }
          case 288: break;
          case 74: 
            { return XOREQ;
            }
          case 289: break;
          case 75: 
            { return SCOPE_RESOLUTION;
            }
          case 290: break;
          case 76: 
            { return NEQUALTO;
            }
          case 291: break;
          case 77: 
            { return MODEQ;
            }
          case 292: break;
          case 78: 
            { return ADDEQ;
            }
          case 293: break;
          case 79: 
            { return INCREMENT;
            }
          case 294: break;
          case 80: 
            { return DIVEQ;
            }
          case 295: break;
          case 81: 
            { string.setLength(0); yybegin(IN_BLOCK_COMMENT);
            }
          case 296: break;
          case 82: 
            { string.setLength(0); yybegin(IN_LINE_COMMENT);
            }
          case 297: break;
          case 83: 
            { return OREQ;
            }
          case 298: break;
          case 84: 
            { return OR;
            }
          case 299: break;
          case 85: 
            { return GTEQ;
            }
          case 300: break;
          case 86: 
            { return SRA;
            }
          case 301: break;
          case 87: 
            { return LTEQ;
            }
          case 302: break;
          case 88: 
            { return SL;
            }
          case 303: break;
          case 89: 
            { return IF;
            }
          case 304: break;
          case 90: 
            { return IN;
            }
          case 305: break;
          case 91: 
            { return DO;
            }
          case 306: break;
          case 92: 
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 307: break;
          case 93: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 25;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 26;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yybegin(YYINITIAL); return LABEL;
            }
          case 308: break;
          case 94: 
            { if (isEscapeCharacter(yycharat(0))) {
                            char ctrl = yycharat(1);
                            switch (ctrl) {
                              case 'a':case 'b':case 'e':case 'f':
                              case 'n':case 'r':case 't':case 'v':
                              case 'x':
                              case '%':
                              case '"':
                              case '\'':
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                string.append(yytext());
                                break;
                              default:
                                if (isEscapeCharacter(ctrl)) {
                                  string.append(yytext());
                                  break;
                                }

                                yybegin(YYINITIAL);
                                return BAD_CHARACTER;
                            }
                          } else {
                            string.append(yycharat(0));
                            yypushback(1);
                          }
            }
          case 309: break;
          case 95: 
            { /* line continuation */
            }
          case 310: break;
          case 96: 
            { String text = string.toString().trim();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("block comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              return BLOCK_COMMENT;
            }
          case 311: break;
          case 97: 
            { yybegin(IN_DOC_COMMENT_POST);
            }
          case 312: break;
          case 98: 
            { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST);
            }
          case 313: break;
          case 99: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 32: value = (float)SourcePawnUtils.parseRational(yytext()); break;
                          case 64: value = (double)SourcePawnUtils.parseRational(yytext()); break;
                          default: throw new AssertionError(
                                "Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("rational %s = %f%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }
            }
          case 314: break;
          case 100: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return IDENTIFIER;
            }
          case 315: break;
          case 101: 
            { return TRY;
            }
          case 316: break;
          case 102: 
            { return FOR;
            }
          case 317: break;
          case 103: 
            { return LET;
            }
          case 318: break;
          case 104: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return TAG;
            }
          case 319: break;
          case 105: 
            { return ELLIPSIS;
            }
          case 320: break;
          case 106: 
            { return VAR;
            }
          case 321: break;
          case 107: 
            { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE);
            }
          case 322: break;
          case 108: 
            { return SRAEQ;
            }
          case 323: break;
          case 109: 
            { return SRL;
            }
          case 324: break;
          case 110: 
            { return SLEQ;
            }
          case 325: break;
          case 111: 
            { return INT;
            }
          case 326: break;
          case 112: 
            { return NEW;
            }
          case 327: break;
          case 113: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 25;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 328: break;
          case 114: 
            { return THIS;
            }
          case 329: break;
          case 115: 
            { return EXIT;
            }
          case 330: break;
          case 116: 
            { return ELSE;
            }
          case 331: break;
          case 117: 
            { return ENUM;
            }
          case 332: break;
          case 118: 
            { return VOID;
            }
          case 333: break;
          case 119: 
            { return SRLEQ;
            }
          case 334: break;
          case 120: 
            { yybegin(IN_CASE); return CASE;
            }
          case 335: break;
          case 121: 
            { return CHAR;
            }
          case 336: break;
          case 122: 
            { return INTN;
            }
          case 337: break;
          case 123: 
            { return INT8;
            }
          case 338: break;
          case 124: 
            { return NULL;
            }
          case 339: break;
          case 125: 
            { return DECL;
            }
          case 340: break;
          case 126: 
            { return WITH;
            }
          case 341: break;
          case 127: 
            { return GOTO;
            }
          case 342: break;
          case 128: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 343: break;
          case 129: 
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 344: break;
          case 130: 
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 345: break;
          case 131: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 28;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 29;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { string.append(yytext());
            }
          case 346: break;
          case 132: 
            { return BREAK;
            }
          case 347: break;
          case 133: 
            { return TAGOF;
            }
          case 348: break;
          case 134: 
            { return THROW;
            }
          case 349: break;
          case 135: 
            { return USING;
            }
          case 350: break;
          case 136: 
            { return UINTN;
            }
          case 351: break;
          case 137: 
            { return UINT8;
            }
          case 352: break;
          case 138: 
            { return UNION;
            }
          case 353: break;
          case 139: 
            { return STOCK;
            }
          case 354: break;
          case 140: 
            { return SLEEP;
            }
          case 355: break;
          case 141: 
            { return CONST;
            }
          case 356: break;
          case 142: 
            { return CATCH;
            }
          case 357: break;
          case 143: 
            { return INT16;
            }
          case 358: break;
          case 144: 
            { return INT64;
            }
          case 359: break;
          case 145: 
            { return INT32;
            }
          case 360: break;
          case 146: 
            { return WHILE;
            }
          case 361: break;
          case 147: 
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 362: break;
          case 148: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ERROR;
            }
          case 363: break;
          case 149: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 364: break;
          case 150: 
            { return OBJECT;
            }
          case 365: break;
          case 151: 
            { return TYPEOF;
            }
          case 366: break;
          case 152: 
            { return RETURN;
            }
          case 367: break;
          case 153: 
            { return UINT16;
            }
          case 368: break;
          case 154: 
            { return UINT64;
            }
          case 369: break;
          case 155: 
            { return UINT32;
            }
          case 370: break;
          case 156: 
            { return ASSERT;
            }
          case 371: break;
          case 157: 
            { return STRUCT;
            }
          case 372: break;
          case 158: 
            { return STATIC;
            }
          case 373: break;
          case 159: 
            { return SEALED;
            }
          case 374: break;
          case 160: 
            { return SIZEOF;
            }
          case 375: break;
          case 161: 
            { return SWITCH;
            }
          case 376: break;
          case 162: 
            { return IMPORT;
            }
          case 377: break;
          case 163: 
            { return NATIVE;
            }
          case 378: break;
          case 164: 
            { return DOUBLE;
            }
          case 379: break;
          case 165: 
            { return DELETE;
            }
          case 380: break;
          case 166: 
            { return PUBLIC;
            }
          case 381: break;
          case 167: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 382: break;
          case 168: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 383: break;
          case 169: 
            { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE;
            }
          case 384: break;
          case 170: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA;
            }
          case 385: break;
          case 171: 
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 386: break;
          case 172: 
            { return BUILTIN;
            }
          case 387: break;
          case 173: 
            { return TYPESET;
            }
          case 388: break;
          case 174: 
            { return TYPEDEF;
            }
          case 389: break;
          case 175: 
            { return FOREACH;
            }
          case 390: break;
          case 176: 
            { return FORWARD;
            }
          case 391: break;
          case 177: 
            { return FUNCTAG;
            }
          case 392: break;
          case 178: 
            { return FINALLY;
            }
          case 393: break;
          case 179: 
            { return ACQUIRE;
            }
          case 394: break;
          case 180: 
            { return VARIANT;
            }
          case 395: break;
          case 181: 
            { return VIRTUAL;
            }
          case 396: break;
          case 182: 
            { return VIEW_AS;
            }
          case 397: break;
          case 183: 
            { return CELLSOF;
            }
          case 398: break;
          case 184: 
            { return CAST_TO;
            }
          case 399: break;
          case 185: 
            { return DEFAULT;
            }
          case 400: break;
          case 186: 
            { return DEFINED;
            }
          case 401: break;
          case 187: 
            { return PRIVATE;
            }
          case 402: break;
          case 188: 
            { return PACKAGE;
            }
          case 403: break;
          case 189: 
            { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_INCLUDE;
            }
          case 404: break;
          case 190: 
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 405: break;
          case 191: 
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 406: break;
          case 192: 
            { return OPERATOR;
            }
          case 407: break;
          case 193: 
            { return READONLY;
            }
          case 408: break;
          case 194: 
            { return EXPLICIT;
            }
          case 409: break;
          case 195: 
            { return FUNCTION;
            }
          case 410: break;
          case 196: 
            { return FUNCENUM;
            }
          case 411: break;
          case 197: 
            { return VOLATILE;
            }
          case 412: break;
          case 198: 
            { return CONTINUE;
            }
          case 413: break;
          case 199: 
            { return IMPLICIT;
            }
          case 414: break;
          case 200: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 415: break;
          case 201: 
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 416: break;
          case 202: 
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 417: break;
          case 203: 
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 418: break;
          case 204: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS;
            }
          case 419: break;
          case 205: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL;
            }
          case 420: break;
          case 206: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED;
            }
          case 421: break;
          case 207: 
            { return INTERFACE;
            }
          case 422: break;
          case 208: 
            { return NAMESPACE;
            }
          case 423: break;
          case 209: 
            { return METHODMAP;
            }
          case 424: break;
          case 210: 
            { return PROTECTED;
            }
          case 425: break;
          case 211: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 426: break;
          case 212: 
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 427: break;
          case 213: 
            { yybegin(IN_PREPROCESSOR_INCLUDE_PRE); return PREPROCESSOR_TRYINCLUDE;
            }
          case 428: break;
          case 214: 
            { yybegin(IN_PRAGMA_DEPRECATED_STRING_PRE); return PRAGMA_DEPRECATED;
            }
          case 429: break;
          case 215: 
            { return NULLABLE;
            }
          case 430: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
