/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;

import org.jetbrains.annotations.NotNull;

import java.io.Reader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*;
import net.alliedmods.intellij.sourcepawn.SourcePawnUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PREPROCESSOR = 2;
  public static final int IN_PREPROCESSOR_PRAGMA = 4;
  public static final int IN_PRAGMA_DEPRECATED_STRING = 6;
  public static final int IN_CHARACTER_LITERAL = 8;
  public static final int IN_STRING_LITERAL = 10;
  public static final int IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE = 12;
  public static final int IN_CHARACTER_LITERAL_DECIMAL_ESCAPE = 14;
  public static final int IN_CHARACTER_LITERAL_UNICODE_ESCAPE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\42\1\105\1\43\1\0\1\44\1\35\1\104\1\57"+
    "\1\60\1\37\1\45\1\41\1\33\1\32\1\46\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\53\1\20\1\52\1\36\1\51\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\40"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\50\1\55\1\47\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\2\5\1\6\1\3"+
    "\1\7\1\10\1\11\1\10\2\11\1\12\10\11\1\13"+
    "\1\14\1\15\1\11\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\3\1\34\1\35\1\36\1\37\1\40\10\11"+
    "\1\41\1\42\22\43\1\44\1\45\1\46\1\44\1\47"+
    "\1\50\2\44\1\51\1\52\1\53\1\54\1\55\2\1"+
    "\2\2\1\0\1\4\1\10\1\0\3\10\22\11\1\56"+
    "\10\11\1\57\1\60\1\61\3\11\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\4\11\1\103"+
    "\1\104\4\11\1\105\10\11\10\0\1\106\14\0\2\107"+
    "\2\110\1\2\1\111\4\11\1\112\15\11\1\113\4\11"+
    "\1\114\10\11\1\115\2\11\1\116\2\11\1\117\1\120"+
    "\1\121\5\11\1\122\2\11\1\123\16\11\26\0\6\11"+
    "\1\124\6\11\1\125\1\11\1\126\1\127\17\11\1\130"+
    "\3\11\1\131\5\11\1\132\1\133\2\11\1\134\1\135"+
    "\4\11\1\136\6\11\1\137\5\11\1\140\1\11\1\141"+
    "\3\0\1\142\2\0\1\143\1\0\1\144\14\0\1\111"+
    "\1\0\1\145\3\11\1\146\1\147\5\11\1\150\1\11"+
    "\1\151\1\152\2\11\1\153\10\11\1\154\3\11\1\155"+
    "\10\11\1\156\1\11\1\157\1\11\1\160\1\11\1\161"+
    "\1\162\15\11\1\163\1\0\1\164\1\165\2\0\1\166"+
    "\16\0\1\11\1\167\1\11\1\170\2\11\1\171\1\11"+
    "\1\172\1\173\1\174\7\11\1\175\1\11\1\176\1\177"+
    "\1\200\1\201\1\202\11\11\1\203\1\11\1\204\1\11"+
    "\1\205\2\11\1\206\3\11\1\207\1\11\1\0\1\210"+
    "\2\0\1\211\1\0\1\212\1\213\2\0\1\214\6\0"+
    "\1\215\1\11\1\216\1\217\2\11\1\220\1\221\1\222"+
    "\2\11\1\223\1\224\2\11\1\225\1\226\1\227\1\11"+
    "\1\230\1\231\3\11\1\232\1\233\2\11\1\234\1\235"+
    "\3\0\1\236\1\237\6\0\1\240\1\241\1\242\1\243"+
    "\1\244\1\245\1\11\1\246\1\247\1\11\1\250\3\11"+
    "\2\0\1\251\1\252\1\0\1\253\1\254\1\255\1\0"+
    "\1\11\1\256\1\257\1\260\1\261\1\0\1\262\1\263"+
    "\1\0\1\11\1\264\1\265\1\11\1\266";

  private static int [] zzUnpackAction() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u027f\0\u030d\0\u027f\0\u0354\0\u039b"+
    "\0\u03e2\0\u039b\0\u0429\0\u0470\0\u04b7\0\u027f\0\u04fe\0\u0545"+
    "\0\u058c\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u027f\0\u096e"+
    "\0\u027f\0\u09b5\0\u09fc\0\u0a43\0\u027f\0\u0a8a\0\u0ad1\0\u0b18"+
    "\0\u0b5f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u027f\0\u027f"+
    "\0\u027f\0\u0354\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u027f\0\u12dc\0\u027f\0\u027f"+
    "\0\u1323\0\u136a\0\u1323\0\u027f\0\u027f\0\u027f\0\u027f\0\u13b1"+
    "\0\u027f\0\u13f8\0\u027f\0\u0354\0\u143f\0\u1486\0\u14cd\0\u1514"+
    "\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c"+
    "\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984"+
    "\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u027f\0\u027f"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f"+
    "\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f\0\u027f"+
    "\0\u1e82\0\u027f\0\u1ec9\0\u027f\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u039b\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u027f"+
    "\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u027f\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u039b\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089"+
    "\0\u30d0\0\u039b\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u027f\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b"+
    "\0\u027f\0\u34b2\0\u027f\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u039b\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e"+
    "\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae"+
    "\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011\0\u4058\0\u2a28\0\u409f"+
    "\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u039b\0\u4290"+
    "\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u039b\0\u443a\0\u039b"+
    "\0\u039b\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b"+
    "\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u039b\0\u48aa\0\u48f1\0\u4938\0\u027f\0\u497f\0\u49c6\0\u4a0d"+
    "\0\u4a54\0\u4a9b\0\u039b\0\u039b\0\u4ae2\0\u4b29\0\u039b\0\u039b"+
    "\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u039b\0\u4c8c\0\u4cd3\0\u4d1a"+
    "\0\u4d61\0\u4da8\0\u4def\0\u039b\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b"+
    "\0\u4f52\0\u039b\0\u4f99\0\u039b\0\u4fe0\0\u5027\0\u506e\0\u50b5"+
    "\0\u50fc\0\u5143\0\u027f\0\u518a\0\u027f\0\u51d1\0\u5218\0\u525f"+
    "\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497"+
    "\0\u54de\0\u5525\0\u5525\0\u039b\0\u556c\0\u55b3\0\u55fa\0\u039b"+
    "\0\u039b\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d\0\u039b\0\u57a4"+
    "\0\u039b\0\u039b\0\u57eb\0\u5832\0\u039b\0\u5879\0\u58c0\0\u5907"+
    "\0\u594e\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u039b\0\u5ab1\0\u5af8"+
    "\0\u5b3f\0\u039b\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9"+
    "\0\u5d30\0\u5d77\0\u039b\0\u5dbe\0\u039b\0\u5e05\0\u039b\0\u5e4c"+
    "\0\u039b\0\u039b\0\u5e93\0\u5eda\0\u5f21\0\u5f68\0\u5faf\0\u5ff6"+
    "\0\u603d\0\u6084\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u039b"+
    "\0\u622e\0\u027f\0\u027f\0\u6275\0\u62bc\0\u027f\0\u6303\0\u634a"+
    "\0\u6391\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582"+
    "\0\u65c9\0\u6610\0\u6657\0\u669e\0\u66e5\0\u039b\0\u672c\0\u039b"+
    "\0\u6773\0\u67ba\0\u039b\0\u6801\0\u039b\0\u039b\0\u039b\0\u6848"+
    "\0\u688f\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u039b\0\u6a39"+
    "\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u6a80\0\u6ac7\0\u6b0e"+
    "\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8\0\u039b\0\u6cff"+
    "\0\u039b\0\u6d46\0\u039b\0\u6d8d\0\u6dd4\0\u039b\0\u6e1b\0\u6e62"+
    "\0\u6ea9\0\u039b\0\u6ef0\0\u6f37\0\u027f\0\u6f7e\0\u6fc5\0\u027f"+
    "\0\u700c\0\u027f\0\u027f\0\u7053\0\u709a\0\u027f\0\u70e1\0\u7128"+
    "\0\u716f\0\u71b6\0\u71fd\0\u7244\0\u039b\0\u728b\0\u039b\0\u039b"+
    "\0\u72d2\0\u7319\0\u039b\0\u039b\0\u039b\0\u7360\0\u73a7\0\u039b"+
    "\0\u039b\0\u73ee\0\u7435\0\u039b\0\u039b\0\u039b\0\u747c\0\u039b"+
    "\0\u039b\0\u74c3\0\u750a\0\u7551\0\u039b\0\u039b\0\u7598\0\u75df"+
    "\0\u039b\0\u039b\0\u7626\0\u766d\0\u76b4\0\u027f\0\u027f\0\u76fb"+
    "\0\u7742\0\u7789\0\u77d0\0\u7817\0\u785e\0\u027f\0\u039b\0\u039b"+
    "\0\u039b\0\u039b\0\u039b\0\u78a5\0\u039b\0\u039b\0\u78ec\0\u039b"+
    "\0\u7933\0\u797a\0\u79c1\0\u7a08\0\u7a4f\0\u027f\0\u027f\0\u7a96"+
    "\0\u027f\0\u027f\0\u027f\0\u7add\0\u7b24\0\u039b\0\u039b\0\u039b"+
    "\0\u039b\0\u7b6b\0\u027f\0\u027f\0\u7bb2\0\u7bf9\0\u027f\0\u027f"+
    "\0\u7c40\0\u039b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\21\1\22\1\23\1\24\1\25\1\22\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\22\1\70\1\22\1\71\1\22\1\72\1\73"+
    "\1\74\1\22\1\75\1\76\5\21\2\22\1\77\1\100"+
    "\1\12\1\101\1\13\3\101\1\102\13\101\1\103\1\101"+
    "\1\104\1\105\1\106\1\107\1\110\33\101\1\111\3\101"+
    "\1\112\1\101\1\113\16\101\1\13\3\101\1\102\13\101"+
    "\1\114\1\115\1\116\4\101\1\117\30\101\1\120\3\101"+
    "\1\121\1\101\1\122\17\101\1\123\1\124\2\125\1\123"+
    "\1\126\100\123\1\125\2\127\2\101\100\127\1\130\1\127"+
    "\1\101\2\131\2\101\1\131\1\132\77\131\1\133\10\101"+
    "\1\134\1\101\2\134\1\101\1\134\1\135\1\101\1\135"+
    "\1\101\2\135\1\101\3\135\5\101\1\135\7\101\1\136"+
    "\20\101\1\135\7\101\5\134\2\101\2\136\1\101\7\137"+
    "\1\140\1\137\2\140\1\137\1\140\3\137\1\141\54\137"+
    "\5\140\14\137\1\142\1\137\5\142\2\137\1\143\3\137"+
    "\3\142\32\137\1\142\5\137\1\142\5\137\5\142\5\137"+
    "\110\0\1\13\3\0\1\144\103\0\1\14\105\0\1\144"+
    "\1\13\1\145\111\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\23\22\12\0\1\146\1\0\2\146\1\0\1\146"+
    "\14\0\1\146\1\147\42\0\5\146\14\0\1\146\1\0"+
    "\2\146\1\0\1\146\1\150\1\151\1\152\11\0\1\146"+
    "\1\147\42\0\5\146\13\0\12\22\1\0\1\22\1\153"+
    "\1\154\6\22\2\0\1\22\24\0\23\22\11\0\7\22"+
    "\1\155\2\22\1\0\11\22\2\0\1\22\24\0\10\22"+
    "\1\156\12\22\11\0\12\22\1\0\1\22\1\157\3\22"+
    "\1\160\3\22\2\0\1\22\24\0\5\22\1\161\3\22"+
    "\1\162\11\22\11\0\12\22\1\0\3\22\1\163\5\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\7\22"+
    "\1\164\1\22\2\0\1\22\24\0\2\22\1\165\1\22"+
    "\1\166\16\22\11\0\11\22\1\167\1\0\6\22\1\170"+
    "\2\22\2\0\1\22\24\0\4\22\1\171\16\22\11\0"+
    "\10\22\1\172\1\22\1\0\2\22\1\173\6\22\2\0"+
    "\1\22\24\0\2\22\1\174\20\22\11\0\12\22\1\0"+
    "\7\22\1\175\1\22\2\0\1\22\24\0\1\176\22\22"+
    "\11\0\12\22\1\0\3\22\1\177\5\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\1\200\2\22\1\201"+
    "\2\22\1\202\2\22\2\0\1\22\24\0\2\22\1\203"+
    "\7\22\1\204\10\22\11\0\12\22\1\0\10\22\1\205"+
    "\2\0\1\22\24\0\23\22\35\0\1\206\107\0\1\207"+
    "\2\0\1\210\56\0\10\22\1\211\1\22\1\0\5\22"+
    "\1\212\3\22\2\0\1\22\24\0\2\22\1\213\20\22"+
    "\40\0\1\214\1\215\106\0\1\216\106\0\1\217\106\0"+
    "\1\220\106\0\1\221\106\0\1\222\106\0\1\223\6\0"+
    "\1\224\77\0\1\225\106\0\1\226\11\0\1\227\74\0"+
    "\1\230\12\0\1\231\73\0\1\232\13\0\1\233\107\0"+
    "\1\234\41\0\10\22\1\235\1\22\1\0\3\22\1\236"+
    "\1\22\1\237\3\22\2\0\1\22\24\0\5\22\1\240"+
    "\15\22\11\0\12\22\1\0\4\22\1\241\4\22\2\0"+
    "\1\22\24\0\4\22\1\242\2\22\1\243\13\22\11\0"+
    "\12\22\1\0\2\22\1\244\1\245\1\22\1\246\3\22"+
    "\2\0\1\22\24\0\23\22\11\0\10\22\1\247\1\22"+
    "\1\0\3\22\1\250\5\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\3\22\1\251\5\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\1\22\1\252\1\253"+
    "\2\22\1\254\3\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\2\22\1\255"+
    "\2\22\1\256\15\22\11\0\10\22\1\257\1\22\1\0"+
    "\11\22\2\0\1\22\24\0\23\22\25\0\1\260\151\0"+
    "\1\261\43\0\1\262\4\0\1\263\35\0\1\264\104\0"+
    "\1\265\53\0\1\266\141\0\1\267\50\0\1\270\37\0"+
    "\1\271\45\0\1\272\104\0\1\273\112\0\1\274\106\0"+
    "\1\275\145\0\1\276\45\0\1\277\100\0\1\300\2\0"+
    "\1\301\111\0\1\302\106\0\1\303\45\0\1\304\15\0"+
    "\1\123\106\0\1\124\106\0\1\126\1\305\1\306\103\0"+
    "\2\307\2\0\102\307\1\0\1\307\1\310\1\305\1\306"+
    "\102\307\10\0\1\140\1\0\2\140\1\0\1\140\3\0"+
    "\1\141\54\0\5\140\14\0\1\311\1\0\5\311\2\0"+
    "\1\143\3\0\3\311\32\0\1\311\5\0\1\311\5\0"+
    "\5\311\6\0\2\13\2\0\1\144\110\0\1\146\1\0"+
    "\2\146\1\0\1\146\14\0\1\146\43\0\5\146\14\0"+
    "\1\312\1\0\2\312\1\0\1\312\60\0\5\312\16\0"+
    "\1\150\2\0\1\150\14\0\1\150\66\0\2\151\1\0"+
    "\1\151\14\0\1\151\44\0\4\151\14\0\1\152\1\0"+
    "\5\152\6\0\3\152\2\0\1\152\27\0\1\152\5\0"+
    "\1\152\5\0\5\152\13\0\12\22\1\0\3\22\1\313"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\2\22\1\314\20\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\21\22\1\315"+
    "\1\22\11\0\12\22\1\0\3\22\1\316\5\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\11\22\1\317\11\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\13\22\1\320\7\22\11\0"+
    "\12\22\1\0\1\22\1\321\7\22\2\0\1\22\24\0"+
    "\2\22\1\322\20\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\10\22\1\323\12\22\11\0\12\22\1\0"+
    "\1\324\4\22\1\325\3\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\2\22"+
    "\1\326\20\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\4\22\1\327\16\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\2\22\1\330\20\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\2\22\1\331\5\22"+
    "\1\332\12\22\11\0\12\22\1\0\7\22\1\333\1\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\2\22"+
    "\1\334\6\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\1\22\1\335\7\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\4\22"+
    "\1\336\16\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\4\22\1\337\16\22\11\0\12\22\1\0\7\22"+
    "\1\340\1\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\1\22\1\341\21\22"+
    "\11\0\12\22\1\0\1\342\10\22\2\0\1\22\24\0"+
    "\23\22\11\0\10\22\1\343\1\22\1\0\1\22\1\344"+
    "\3\22\1\345\3\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\5\22\1\346\3\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\3\22\1\347\5\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\22\22\1\350\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\2\22\1\351\20\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\4\22\1\352\16\22"+
    "\35\0\1\353\62\0\12\22\1\0\6\22\1\354\2\22"+
    "\2\0\1\22\24\0\2\22\1\355\20\22\11\0\12\22"+
    "\1\0\1\22\1\356\7\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\1\22\1\357\1\22\1\360\5\22"+
    "\2\0\1\22\24\0\23\22\41\0\1\361\12\0\1\362"+
    "\73\0\1\363\56\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\4\22\1\364\16\22\11\0\12\22\1\0\6\22"+
    "\1\365\2\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\1\366\6\22\1\367\1\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\5\22\1\370\3\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\1\371\10\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\10\22\1\372\12\22\11\0\12\22"+
    "\1\0\6\22\1\373\2\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\12\22"+
    "\1\374\10\22\11\0\12\22\1\0\1\375\10\22\2\0"+
    "\1\22\24\0\7\22\1\376\13\22\11\0\12\22\1\0"+
    "\2\22\1\377\6\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\4\22\1\u0100\1\22\1\u0101\2\22\2\0"+
    "\1\22\24\0\1\u0102\22\22\11\0\12\22\1\0\1\u0103"+
    "\10\22\2\0\1\22\24\0\23\22\11\0\10\22\1\u0104"+
    "\1\22\1\0\11\22\2\0\1\22\24\0\2\22\1\u0105"+
    "\20\22\11\0\7\22\1\u0106\2\22\1\0\11\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\1\u0107\22\22\11\0\12\22\1\0\1\u0108"+
    "\10\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\2\22\1\u0109\20\22\11\0"+
    "\12\22\1\0\1\u010a\10\22\2\0\1\22\24\0\23\22"+
    "\75\0\1\u010b\103\0\1\u010c\41\0\1\u010d\114\0\1\u010e"+
    "\145\0\1\u010f\46\0\1\u0110\107\0\1\u0111\143\0\1\u0112"+
    "\102\0\1\u0113\52\0\1\u0114\107\0\1\u0115\75\0\1\u0116"+
    "\112\0\1\u0117\110\0\1\u0118\153\0\1\u0119\105\0\1\u011a"+
    "\41\0\1\u011b\157\0\1\u011c\104\0\1\u011d\102\0\1\u011e"+
    "\22\0\1\305\106\0\2\305\105\0\1\u011f\1\305\1\306"+
    "\123\0\1\143\112\0\1\u0120\70\0\12\22\1\0\5\22"+
    "\1\u0121\3\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\6\22\1\u0122\2\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\3\22\1\u0123\5\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\1\22\1\u0124\7\22"+
    "\2\0\1\22\24\0\23\22\11\0\10\22\1\u0125\1\22"+
    "\1\0\11\22\2\0\1\22\24\0\23\22\11\0\10\22"+
    "\1\u0126\1\22\1\0\11\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\7\22\1\u0127\1\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\3\22\1\u0128\5\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\2\22"+
    "\1\u0129\6\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\6\22\1\u012a\14\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\4\22"+
    "\1\u012b\16\22\11\0\12\22\1\0\1\u012c\10\22\2\0"+
    "\1\22\24\0\23\22\11\0\10\22\1\u012d\1\22\1\0"+
    "\11\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\1\u012e\10\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\6\22\1\u012f\2\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\3\22\1\u0130\5\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\7\22\1\u0131\13\22\11\0\12\22\1\0\3\22"+
    "\1\u0132\5\22\2\0\1\22\24\0\12\22\1\u0133\10\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\1\u0134"+
    "\22\22\11\0\12\22\1\0\5\22\1\u0135\3\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\3\22\1\u0136"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\2\22\1\u0137\6\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\1\u0138\22\22"+
    "\11\0\12\22\1\0\2\22\1\u0139\6\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\1\u013a\10\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\6\22\1\u013b"+
    "\2\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\3\22\1\u013c\5\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\3\22\1\u013d\5\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\1\u013e\10\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\2\22\1\u013f\6\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\5\22"+
    "\1\u0140\3\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\6\22\1\u0141\14\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\2\22"+
    "\1\u0142\20\22\11\0\12\22\1\0\1\u0143\10\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\12\22\1\u0144\10\22\41\0\1\u0145\56\0"+
    "\12\22\1\0\1\u0146\6\22\1\u0147\1\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\6\22\1\u0148\2\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\1\u0149\22\22\11\0\12\22\1\0"+
    "\1\u014a\2\22\1\u014b\5\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\1\22\1\u014c\7\22\2\0\1\22"+
    "\24\0\23\22\11\0\3\22\1\u014d\6\22\1\0\3\22"+
    "\1\u014e\5\22\2\0\1\22\24\0\4\22\1\u014f\7\22"+
    "\1\u0150\1\u0151\1\u0152\4\22\11\0\10\22\1\u0153\1\22"+
    "\1\0\6\22\1\u0154\2\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\6\22\1\u0155\2\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\2\22\1\u0156\20\22\11\0\12\22\1\0\3\22"+
    "\1\u0157\5\22\2\0\1\22\24\0\23\22\11\0\7\22"+
    "\1\u0158\2\22\1\0\11\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\5\22\1\u0159\3\22\2\0\1\22"+
    "\24\0\2\22\1\u015a\20\22\11\0\12\22\1\0\3\22"+
    "\1\u015b\5\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\6\22\1\u015c\2\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\5\22"+
    "\1\u015d\15\22\11\0\12\22\1\0\1\u015e\10\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\u015f\24\0\23\22\11\0\12\22\1\0\6\22\1\u0160"+
    "\2\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\3\22\1\u0161\17\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\5\22\1\u0162"+
    "\15\22\11\0\12\22\1\0\6\22\1\u0163\2\22\2\0"+
    "\1\22\24\0\23\22\11\0\10\22\1\u0164\1\22\1\0"+
    "\11\22\2\0\1\22\24\0\23\22\66\0\1\u0165\47\0"+
    "\1\u0166\100\0\1\u0167\114\0\1\u0168\112\0\1\u0169\32\0"+
    "\1\u016a\47\0\1\u016b\106\0\1\u016c\106\0\1\u016d\111\0"+
    "\1\u016e\142\0\1\u016f\117\0\1\u0170\42\0\1\u0171\141\0"+
    "\1\u0172\53\0\1\u0173\141\0\1\u0174\47\0\1\u0175\111\0"+
    "\1\u0176\146\0\1\u0177\41\0\1\u0178\112\0\1\u0179\67\0"+
    "\1\u017a\1\0\2\u017a\1\0\1\u017a\16\0\1\u017b\41\0"+
    "\5\u017a\13\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\3\22\1\u017c\17\22\11\0\12\22\1\0\1\u017d\10\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\1\u017e\22\22\11\0\12\22\1\0"+
    "\5\22\1\u017f\3\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\4\22\1\u0180\4\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\12\22\1\u0181\10\22\11\0\10\22\1\u0182\1\22\1\0"+
    "\7\22\1\u0183\1\22\2\0\1\22\24\0\6\22\1\u0184"+
    "\14\22\11\0\12\22\1\0\1\22\1\u0185\7\22\2\0"+
    "\1\22\24\0\23\22\11\0\10\22\1\u0186\1\22\1\0"+
    "\11\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\13\22\1\u0187\7\22\11\0"+
    "\3\22\1\u0188\6\22\1\0\11\22\2\0\1\22\24\0"+
    "\4\22\1\u0189\7\22\1\u018a\1\u018b\1\u018c\4\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\4\22\1\u018d"+
    "\16\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\2\22\1\u018e\20\22\11\0\12\22\1\0\5\22\1\u018f"+
    "\3\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\5\22\1\u0190\3\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\1\u0191\2\22\1\u0192\5\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\6\22\1\u0193\2\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\1\22"+
    "\1\u0194\7\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\2\22\1\u0195\20\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\3\22"+
    "\1\u0196\17\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\1\u0197\22\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\2\22\1\u0198\20\22\11\0\12\22\1\0"+
    "\3\22\1\u0199\5\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\10\22\1\u019a"+
    "\12\22\11\0\10\22\1\u019b\1\22\1\0\11\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\1\u019c\22\22\11\0\12\22\1\0\6\22"+
    "\1\u019d\2\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\1\u019e\10\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\5\22\1\u019f\3\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\2\22\1\u01a0\6\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\10\22\1\u01a1"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\2\22\1\u01a2\20\22\11\0\12\22"+
    "\1\0\1\u01a3\10\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\7\22\1\u01a4\1\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\5\22\1\u01a5\15\22\11\0\12\22\1\0\10\22\1\u01a6"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\15\22\1\u01a7\5\22\11\0\12\22"+
    "\1\0\1\22\1\u01a8\7\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\20\22"+
    "\1\u01a9\2\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\17\22\1\u01aa\3\22\11\0\12\22\1\0\1\22"+
    "\1\u01ab\7\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\2\22\1\u01ac\20\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\u01ad\24\0\23\22"+
    "\11\0\12\22\1\0\7\22\1\u01ae\1\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\6\22\1\u01af\2\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\2\22"+
    "\1\u01b0\6\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\4\22\1\u01b1\16\22"+
    "\11\0\12\22\1\0\1\u01b2\10\22\2\0\1\22\24\0"+
    "\23\22\11\0\10\22\1\u01b3\1\22\1\0\11\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\3\22\1\u01b4"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\5\22\1\u01b5\3\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\2\22\1\u01b6"+
    "\20\22\11\0\12\22\1\0\5\22\1\u01b7\3\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\3\22\1\u01b8"+
    "\5\22\2\0\1\22\24\0\23\22\70\0\1\u01b9\46\0"+
    "\1\u01ba\103\0\1\u01bb\147\0\1\u01bc\104\0\1\u01bd\52\0"+
    "\1\u01be\37\0\1\u01bf\43\0\1\u01c0\107\0\1\u01c1\150\0"+
    "\1\u01c2\111\0\1\u01c3\101\0\1\u01c4\41\0\1\u01c5\114\0"+
    "\1\u01c6\143\0\1\u01c7\116\0\1\u01c8\76\0\1\u01c9\51\0"+
    "\1\u01ca\106\0\1\u01cb\152\0\1\u01cc\25\0\1\u017a\1\0"+
    "\2\u017a\1\0\1\u017a\60\0\5\u017a\13\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\2\22\1\u01cd\20\22\11\0"+
    "\12\22\1\0\1\u01ce\10\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\1\u01cf\10\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\4\22\1\u01d0\4\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\3\22\1\u01d1"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\3\22\1\u01d2\5\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\4\22\1\u01d3"+
    "\16\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\4\22\1\u01d4\16\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\15\22\1\u01d5\5\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\20\22\1\u01d6\2\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\17\22\1\u01d7"+
    "\3\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\1\u01d8\22\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\1\u01d9\22\22\11\0\12\22\1\0\1\22\1\u01da"+
    "\7\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\5\22\1\u01db\3\22\2\0\1\22\24\0\2\22\1\u01dc"+
    "\20\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\4\22\1\u01dd\16\22\11\0\12\22\1\0\6\22\1\u01de"+
    "\2\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\1\u01df\10\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\1\22\1\u01e0\7\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\1\u01e1\10\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\1\u01e2\22\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\6\22\1\u01e3\14\22\11\0\12\22\1\0\4\22"+
    "\1\u01e4\4\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\5\22\1\u01e5\15\22"+
    "\11\0\12\22\1\0\6\22\1\u01e6\2\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\2\22\1\u01e7\20\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\4\22\1\u01e8\16\22\11\0\12\22"+
    "\1\0\5\22\1\u01e9\3\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\5\22\1\u01ea\3\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\4\22\1\u01eb\16\22\11\0\10\22\1\u01ec\1\22"+
    "\1\0\11\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\1\u01ed\10\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\4\22\1\u01ee\4\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\1\u01ef\10\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\1\u01f0\22\22\11\0\12\22\1\0\3\22\1\u01f1"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\10\22\1\u01f2\12\22\11\0"+
    "\12\22\1\0\3\22\1\u01f3\5\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\6\22\1\u01f4\2\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\3\22\1\u01f5"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\3\22\1\u01f6\5\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\6\22\1\u01f7"+
    "\14\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\1\u01f8\22\22\11\0\12\22\1\0\1\u01f9\10\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\1\u01fa\22\22\11\0\12\22\1\0\11\22"+
    "\2\0\1\22\24\0\13\22\1\u01fb\7\22\64\0\1\u01fc"+
    "\52\0\1\u01fd\103\0\1\u01fe\155\0\1\u01ff\36\0\1\u0200"+
    "\154\0\1\u0201\43\0\1\u0202\110\0\1\u0203\163\0\1\u0204"+
    "\70\0\1\u0205\110\0\1\u0206\35\0\1\u0207\116\0\1\u0208"+
    "\146\0\1\u0209\101\0\1\u020a\106\0\1\u020b\110\0\1\u020c"+
    "\31\0\12\22\1\0\11\22\2\0\1\22\24\0\4\22"+
    "\1\u020d\16\22\11\0\10\22\1\u020e\1\22\1\0\11\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\1\u020f"+
    "\10\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\4\22\1\u0210\4\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\6\22\1\u0211\2\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\2\22\1\u0212\20\22\11\0\12\22\1\0\11\22\2\0"+
    "\1\22\24\0\5\22\1\u0213\15\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\6\22\1\u0214\14\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\13\22\1\u0215"+
    "\7\22\11\0\10\22\1\u0216\1\22\1\0\11\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\2\22\1\u0217"+
    "\6\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\11\22\1\u0218\11\22\11\0"+
    "\12\22\1\0\3\22\1\u0219\5\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\5\22\1\u021a\3\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\6\22\1\u021b"+
    "\2\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\1\u021c\10\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\6\22\1\u021d\2\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\7\22\1\u021e\1\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\2\22\1\u021f\6\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\4\22"+
    "\1\u0220\4\22\2\0\1\22\24\0\23\22\11\0\10\22"+
    "\1\u0221\1\22\1\0\11\22\2\0\1\22\24\0\23\22"+
    "\11\0\12\22\1\0\5\22\1\u0222\3\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\2\22\1\u0223\20\22\11\0\12\22\1\0\5\22"+
    "\1\u0224\3\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\1\u0225\10\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\6\22\1\u0226"+
    "\14\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\7\22\1\u0227\13\22\11\0\12\22\1\0\1\u0228\10\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\3\22"+
    "\1\u0229\5\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\3\22\1\u022a\5\22\2\0\1\22\24\0\23\22"+
    "\32\0\1\u022b\142\0\1\u022c\46\0\1\u022d\107\0\1\u022e"+
    "\106\0\1\u022f\110\0\1\u0230\107\0\1\u0231\153\0\1\u0232"+
    "\40\0\1\u0233\107\0\1\u0234\105\0\1\u0235\141\0\1\u0236"+
    "\33\0\12\22\1\0\1\22\1\u0237\7\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\11\22\2\0\1\22"+
    "\24\0\11\22\1\u0238\11\22\11\0\12\22\1\0\1\u0239"+
    "\10\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\11\22\2\0\1\22\24\0\4\22\1\u023a\16\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\7\22\1\u023b"+
    "\13\22\11\0\7\22\1\u023c\2\22\1\0\11\22\2\0"+
    "\1\22\24\0\23\22\11\0\12\22\1\0\3\22\1\u023d"+
    "\5\22\2\0\1\22\24\0\23\22\11\0\12\22\1\0"+
    "\3\22\1\u023e\5\22\2\0\1\22\24\0\23\22\11\0"+
    "\12\22\1\0\11\22\2\0\1\22\24\0\1\u023f\22\22"+
    "\11\0\12\22\1\0\1\u0240\10\22\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\11\22\2\0\1\22\24\0"+
    "\1\u0241\22\22\11\0\12\22\1\0\5\22\1\u0242\3\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\3\22"+
    "\1\u0243\5\22\2\0\1\22\24\0\23\22\26\0\1\u0244"+
    "\154\0\1\u0245\36\0\1\u0246\114\0\1\u0247\75\0\1\u0248"+
    "\114\0\1\u0249\104\0\1\u024a\114\0\1\u024b\77\0\1\u024c"+
    "\73\0\12\22\1\0\6\22\1\u024d\2\22\2\0\1\22"+
    "\24\0\23\22\11\0\12\22\1\0\3\22\1\u024e\5\22"+
    "\2\0\1\22\24\0\23\22\11\0\12\22\1\0\3\22"+
    "\1\u024f\5\22\2\0\1\22\24\0\23\22\11\0\12\22"+
    "\1\0\11\22\2\0\1\22\24\0\10\22\1\u0250\12\22"+
    "\11\0\12\22\1\0\11\22\2\0\1\22\24\0\6\22"+
    "\1\u0251\14\22\72\0\1\u0252\40\0\1\u0253\152\0\1\u0254"+
    "\45\0\1\u0255\70\0\12\22\1\0\3\22\1\u0256\5\22"+
    "\2\0\1\22\24\0\23\22\27\0\1\u0257\151\0\1\u0258"+
    "\25\0\12\22\1\0\10\22\1\u0259\2\0\1\22\24\0"+
    "\23\22\11\0\12\22\1\0\10\22\1\u025a\2\0\1\22"+
    "\24\0\23\22\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31879];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\1\11\1\1\1\11\1\1\1\11\7\1"+
    "\1\11\20\1\1\11\1\1\1\11\3\1\1\11\4\1"+
    "\5\11\10\1\3\11\23\1\1\11\1\1\2\11\3\1"+
    "\4\11\1\1\1\11\1\1\1\11\1\0\2\1\1\0"+
    "\37\1\2\11\3\1\15\11\1\1\1\11\1\1\1\11"+
    "\23\1\10\0\1\11\14\0\2\1\1\11\43\1\1\11"+
    "\5\1\1\11\1\1\1\11\27\1\26\0\44\1\1\11"+
    "\37\1\3\0\1\1\2\0\1\11\1\0\1\11\14\0"+
    "\1\1\1\0\75\1\1\0\2\11\2\0\1\11\16\0"+
    "\57\1\1\0\1\11\2\0\1\11\1\0\2\11\2\0"+
    "\1\11\6\0\36\1\3\0\2\11\6\0\1\11\15\1"+
    "\2\0\2\11\1\0\3\11\1\0\5\1\1\0\2\11"+
    "\1\0\1\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final boolean DEBUG = true;

  public static final int PAWN_CELL_SIZE = 32;

  private static final char DEFAULT_ESCAPE_CHARACTER = '\\';
  private static final boolean DEFAULT_REQUIRE_SEMICOLONS = false;

  //ExtendedSyntaxStrCommentHandler longCommentOrStringHandler
  //    = new ExtendedSyntaxStrCommentHandler();

  private char escapeCharacter;
  private boolean requireSemicolons;

  private StringBuilder string = new StringBuilder(32);
  private char character;
  private Object value;

  public SourcePawnLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
    resetSemicolonsRequired();
  }

  public char getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(char escapeCharacter) {
    if (getEscapeCharacter() != escapeCharacter) {
      this.escapeCharacter = escapeCharacter;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", escapeCharacter);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(char ch) {
    return ch == getEscapeCharacter();
  }

  public boolean areSemicolonsRequired() {
    return requireSemicolons;
  }

  public void setSemicolonsRequired(boolean requireSemicolons) {
    if (areSemicolonsRequired() != requireSemicolons) {
      this.requireSemicolons = requireSemicolons;
      if (DEBUG) {
        if (requireSemicolons) {
          System.out.println("Semicolons are required");
        } else {
          System.out.println("Semicolons are no longer required");
        }
      }
    }
  }

  public void resetSemicolonsRequired() {
    setSemicolonsRequired(DEFAULT_REQUIRE_SEMICOLONS);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SourcePawnLexer(java.io.Reader in) {
    switch (PAWN_CELL_SIZE) {
    case 16:
    case 32:
    case 64:
      break;
    default:
      throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
  }

  resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_CHARACTER_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 603: break;
            case IN_STRING_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 604: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character * 10) + (ch - '0');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 183: break;
          case 2: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character << 4) + (ch - '0');
                                break;
                              case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                                character = (character << 4) + (ch - 'a');
                                break;
                              case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                                character = (character << 4) + (ch - 'A');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 184: break;
          case 3: 
            { return BAD_CHARACTER;
            }
          case 185: break;
          case 4: 
            { return WHITESPACE;
            }
          case 186: break;
          case 5: 
            { return NEW_LINE;
            }
          case 187: break;
          case 6: 
            { return LBRACKET;
            }
          case 188: break;
          case 7: 
            { return AT_SIGN;
            }
          case 189: break;
          case 8: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 16: value = (short)SourcePawnUtils.parseNumber(yytext()); break;
                          case 32: value = (int)SourcePawnUtils.parseNumber(yytext()); break;
                          case 64: value = (long)SourcePawnUtils.parseNumber(yytext()); break;
                          default: throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("number %s = %d%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }

                      return NUMBER_LITERAL;
            }
          case 190: break;
          case 9: 
            { return IDENTIFIER;
            }
          case 191: break;
          case 10: 
            { return SEMICOLON;
            }
          case 192: break;
          case 11: 
            { return UNDERSCORE;
            }
          case 193: break;
          case 12: 
            { return PERIOD;
            }
          case 194: break;
          case 13: 
            { return MINUS;
            }
          case 195: break;
          case 14: 
            { return AMPERSAND;
            }
          case 196: break;
          case 15: 
            { return ASSIGN;
            }
          case 197: break;
          case 16: 
            { return ASTERISK;
            }
          case 198: break;
          case 17: 
            { return CARET;
            }
          case 199: break;
          case 18: 
            { return COMMA;
            }
          case 200: break;
          case 19: 
            { return EXCLAMATION;
            }
          case 201: break;
          case 20: 
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 202: break;
          case 21: 
            { return PERCENT;
            }
          case 203: break;
          case 22: 
            { return PLUS;
            }
          case 204: break;
          case 23: 
            { return SLASH;
            }
          case 205: break;
          case 24: 
            { return TILDE;
            }
          case 206: break;
          case 25: 
            { return VERTICAL_BAR;
            }
          case 207: break;
          case 26: 
            { return GT;
            }
          case 208: break;
          case 27: 
            { return LT;
            }
          case 209: break;
          case 28: 
            { return LBRACE;
            }
          case 210: break;
          case 29: 
            { return RBRACE;
            }
          case 211: break;
          case 30: 
            { return RBRACKET;
            }
          case 212: break;
          case 31: 
            { return LPAREN;
            }
          case 213: break;
          case 32: 
            { return RPAREN;
            }
          case 214: break;
          case 33: 
            { string.setLength(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 215: break;
          case 34: 
            { string.setLength(0); yybegin(IN_STRING_LITERAL);
            }
          case 216: break;
          case 35: 
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 217: break;
          case 36: 
            { string.append(yytext());
            }
          case 218: break;
          case 37: 
            { /* ignore leading whitespace */
            }
          case 219: break;
          case 38: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
          case 220: break;
          case 39: 
            { character = yycharat(0);
                          if (isEscapeCharacter(character)) {
                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);
                          }
            }
          case 221: break;
          case 40: 
            { String text = Character.toString(character);
                          value = character;
                          if (DEBUG) {
                            System.out.printf("character = \'%s\'%n", text);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 222: break;
          case 41: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("string = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 223: break;
          case 42: 
            { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE);
            }
          case 224: break;
          case 43: 
            { character = yycharat(0);
                          if (character == 'x') {
                            yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);
                          } else {
                            switch(yycharat(0)) {
                              case 'a':
                                character = '\u0007';
                                break;
                              case 'b':
                                character = '\b';
                                break;
                              case 'e':
                                character = '\u001B';
                                break;
                              case 'f':
                                character = '\f';
                                break;
                              case 'n':
                                character = '\n';
                                break;
                              case 'r':
                                character = '\r';
                                break;
                              case 't':
                                character = '\t';
                                break;
                              case 'v':
                                character = '\u000B';
                                break;
                              default:
                                throw new AssertionError(
                                    "Unsupported control character: " + yycharat(0));
                            }

                            yybegin(IN_CHARACTER_LITERAL);
                          }
            }
          case 225: break;
          case 44: 
            { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 226: break;
          case 45: 
            { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL);
            }
          case 227: break;
          case 46: 
            { return AS;
            }
          case 228: break;
          case 47: 
            { return RANGE;
            }
          case 229: break;
          case 48: 
            { return DECREMENT;
            }
          case 230: break;
          case 49: 
            { return SUBEQ;
            }
          case 231: break;
          case 50: 
            { return AND;
            }
          case 232: break;
          case 51: 
            { return ANDEQ;
            }
          case 233: break;
          case 52: 
            { return EQUALTO;
            }
          case 234: break;
          case 53: 
            { return MULEQ;
            }
          case 235: break;
          case 54: 
            { return XOREQ;
            }
          case 236: break;
          case 55: 
            { return NEQUALTO;
            }
          case 237: break;
          case 56: 
            { return MODEQ;
            }
          case 238: break;
          case 57: 
            { return ADDEQ;
            }
          case 239: break;
          case 58: 
            { return INCREMENT;
            }
          case 240: break;
          case 59: 
            { return DIVEQ;
            }
          case 241: break;
          case 60: 
            { return OREQ;
            }
          case 242: break;
          case 61: 
            { return OR;
            }
          case 243: break;
          case 62: 
            { return GTEQ;
            }
          case 244: break;
          case 63: 
            { return SRA;
            }
          case 245: break;
          case 64: 
            { return LTEQ;
            }
          case 246: break;
          case 65: 
            { return SL;
            }
          case 247: break;
          case 66: 
            { return SCOPE_RESOLUTION;
            }
          case 248: break;
          case 67: 
            { return IF;
            }
          case 249: break;
          case 68: 
            { return IN;
            }
          case 250: break;
          case 69: 
            { return DO;
            }
          case 251: break;
          case 70: 
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 252: break;
          case 71: 
            { /* line continuation */
            }
          case 253: break;
          case 72: 
            { if (isEscapeCharacter(yycharat(0))) {
                            char ctrl = yycharat(1);
                            switch (ctrl) {
                              case 'a':case 'b':case 'e':case 'f':
                              case 'n':case 'r':case 't':case 'v':
                              case 'x':
                              case '%':
                              case '"':
                              case '\'':
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                string.append(yytext());
                                break;
                              default:
                                if (isEscapeCharacter(ctrl)) {
                                  string.append(yytext());
                                  break;
                                }

                                yybegin(YYINITIAL);
                                return BAD_CHARACTER;
                            }
                          } else {
                            string.append(yycharat(0));
                            yypushback(1);
                          }
            }
          case 254: break;
          case 73: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 32: value = (float)SourcePawnUtils.parseRational(yytext()); break;
                          case 64: value = (double)SourcePawnUtils.parseRational(yytext()); break;
                          default: throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("rational %s = %f%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }
            }
          case 255: break;
          case 74: 
            { return TRY;
            }
          case 256: break;
          case 75: 
            { return FOR;
            }
          case 257: break;
          case 76: 
            { return LET;
            }
          case 258: break;
          case 77: 
            { return ELLIPSIS;
            }
          case 259: break;
          case 78: 
            { return VAR;
            }
          case 260: break;
          case 79: 
            { return SRAEQ;
            }
          case 261: break;
          case 80: 
            { return SRL;
            }
          case 262: break;
          case 81: 
            { return SLEQ;
            }
          case 263: break;
          case 82: 
            { return INT;
            }
          case 264: break;
          case 83: 
            { return NEW;
            }
          case 265: break;
          case 84: 
            { return THIS;
            }
          case 266: break;
          case 85: 
            { return EXIT;
            }
          case 267: break;
          case 86: 
            { return ELSE;
            }
          case 268: break;
          case 87: 
            { return ENUM;
            }
          case 269: break;
          case 88: 
            { return VOID;
            }
          case 270: break;
          case 89: 
            { return SRLEQ;
            }
          case 271: break;
          case 90: 
            { return CASE;
            }
          case 272: break;
          case 91: 
            { return CHAR;
            }
          case 273: break;
          case 92: 
            { return INTN;
            }
          case 274: break;
          case 93: 
            { return INT8;
            }
          case 275: break;
          case 94: 
            { return NULL;
            }
          case 276: break;
          case 95: 
            { return DECL;
            }
          case 277: break;
          case 96: 
            { return WITH;
            }
          case 278: break;
          case 97: 
            { return GOTO;
            }
          case 279: break;
          case 98: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 280: break;
          case 99: 
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 281: break;
          case 100: 
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 282: break;
          case 101: 
            { return BREAK;
            }
          case 283: break;
          case 102: 
            { return TAGOF;
            }
          case 284: break;
          case 103: 
            { return THROW;
            }
          case 285: break;
          case 104: 
            { return USING;
            }
          case 286: break;
          case 105: 
            { return UINTN;
            }
          case 287: break;
          case 106: 
            { return UINT8;
            }
          case 288: break;
          case 107: 
            { return UNION;
            }
          case 289: break;
          case 108: 
            { return STOCK;
            }
          case 290: break;
          case 109: 
            { return SLEEP;
            }
          case 291: break;
          case 110: 
            { return CONST;
            }
          case 292: break;
          case 111: 
            { return CATCH;
            }
          case 293: break;
          case 112: 
            { return INT16;
            }
          case 294: break;
          case 113: 
            { return INT64;
            }
          case 295: break;
          case 114: 
            { return INT32;
            }
          case 296: break;
          case 115: 
            { return WHILE;
            }
          case 297: break;
          case 116: 
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 298: break;
          case 117: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ERROR;
            }
          case 299: break;
          case 118: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 300: break;
          case 119: 
            { return OBJECT;
            }
          case 301: break;
          case 120: 
            { return TYPEOF;
            }
          case 302: break;
          case 121: 
            { return RETURN;
            }
          case 303: break;
          case 122: 
            { return UINT16;
            }
          case 304: break;
          case 123: 
            { return UINT64;
            }
          case 305: break;
          case 124: 
            { return UINT32;
            }
          case 306: break;
          case 125: 
            { return ASSERT;
            }
          case 307: break;
          case 126: 
            { return STRUCT;
            }
          case 308: break;
          case 127: 
            { return STATIC;
            }
          case 309: break;
          case 128: 
            { return SEALED;
            }
          case 310: break;
          case 129: 
            { return SIZEOF;
            }
          case 311: break;
          case 130: 
            { return SWITCH;
            }
          case 312: break;
          case 131: 
            { return IMPORT;
            }
          case 313: break;
          case 132: 
            { return NATIVE;
            }
          case 314: break;
          case 133: 
            { return DOUBLE;
            }
          case 315: break;
          case 134: 
            { return DELETE;
            }
          case 316: break;
          case 135: 
            { return PUBLIC;
            }
          case 317: break;
          case 136: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 318: break;
          case 137: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 319: break;
          case 138: 
            { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE;
            }
          case 320: break;
          case 139: 
            { yybegin(IN_PREPROCESSOR_PRAGMA); return PREPROCESSOR_PRAGMA;
            }
          case 321: break;
          case 140: 
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 322: break;
          case 141: 
            { return BUILTIN;
            }
          case 323: break;
          case 142: 
            { return TYPESET;
            }
          case 324: break;
          case 143: 
            { return TYPEDEF;
            }
          case 325: break;
          case 144: 
            { return FOREACH;
            }
          case 326: break;
          case 145: 
            { return FORWARD;
            }
          case 327: break;
          case 146: 
            { return FUNCTAG;
            }
          case 328: break;
          case 147: 
            { return FINALLY;
            }
          case 329: break;
          case 148: 
            { return ACQUIRE;
            }
          case 330: break;
          case 149: 
            { return VARIANT;
            }
          case 331: break;
          case 150: 
            { return VIRTUAL;
            }
          case 332: break;
          case 151: 
            { return VIEW_AS;
            }
          case 333: break;
          case 152: 
            { return CELLSOF;
            }
          case 334: break;
          case 153: 
            { return CAST_TO;
            }
          case 335: break;
          case 154: 
            { return DEFAULT;
            }
          case 336: break;
          case 155: 
            { return DEFINED;
            }
          case 337: break;
          case 156: 
            { return PRIVATE;
            }
          case 338: break;
          case 157: 
            { return PACKAGE;
            }
          case 339: break;
          case 158: 
            { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE;
            }
          case 340: break;
          case 159: 
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 341: break;
          case 160: 
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 342: break;
          case 161: 
            { return OPERATOR;
            }
          case 343: break;
          case 162: 
            { return READONLY;
            }
          case 344: break;
          case 163: 
            { return EXPLICIT;
            }
          case 345: break;
          case 164: 
            { return FUNCTION;
            }
          case 346: break;
          case 165: 
            { return FUNCENUM;
            }
          case 347: break;
          case 166: 
            { return VOLATILE;
            }
          case 348: break;
          case 167: 
            { return CONTINUE;
            }
          case 349: break;
          case 168: 
            { return IMPLICIT;
            }
          case 350: break;
          case 169: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 351: break;
          case 170: 
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 352: break;
          case 171: 
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 353: break;
          case 172: 
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 354: break;
          case 173: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS;
            }
          case 355: break;
          case 174: 
            { return INTERFACE;
            }
          case 356: break;
          case 175: 
            { return NAMESPACE;
            }
          case 357: break;
          case 176: 
            { return METHODMAP;
            }
          case 358: break;
          case 177: 
            { return PROTECTED;
            }
          case 359: break;
          case 178: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 360: break;
          case 179: 
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 361: break;
          case 180: 
            { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE;
            }
          case 362: break;
          case 181: 
            { string.setLength(0);
                      yybegin(IN_PRAGMA_DEPRECATED_STRING);
                      return PRAGMA_DEPRECATED;
            }
          case 363: break;
          case 182: 
            { return NULLABLE;
            }
          case 364: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
