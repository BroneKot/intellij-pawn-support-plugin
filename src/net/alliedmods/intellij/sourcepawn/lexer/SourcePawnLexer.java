/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;

import org.jetbrains.annotations.NotNull;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_CHARACTER_LITERAL = 2;
  public static final int IN_STRING_LITERAL = 4;
  public static final int IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE = 6;
  public static final int IN_CHARACTER_LITERAL_DECIMAL_ESCAPE = 8;
  public static final int IN_CHARACTER_LITERAL_UNICODE_ESCAPE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\16\1\3\22\0\1\1\1\0\1\15\2\0\1\17\1\0\1\14\10\0\12\5\1\0\1"+
    "\12\4\0\1\4\6\7\24\6\1\0\1\20\2\0\1\13\1\0\2\10\2\7\2\10\7\6\1\11\3\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\2\6\12\0\1\16\242\0\2\16\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\16\1\20\1\21\1\22\1\23\2\1\2\2\2\24"+
    "\2\25\1\2\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\21\0\42\0\63\0\104\0\125\0\146\0\167"+
    "\0\146\0\210\0\231\0\231\0\231\0\146\0\146\0\146"+
    "\0\146\0\146\0\252\0\252\0\273\0\146\0\146\0\146"+
    "\0\146\0\314\0\146\0\335\0\146\0\146\0\356\0\377"+
    "\0\u0110\0\u0121\0\356";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\7\4\14\1\7"+
    "\1\15\1\16\1\17\3\7\2\20\2\21\10\20\1\22"+
    "\1\20\1\21\2\20\2\23\2\21\11\23\1\24\1\21"+
    "\1\23\1\25\5\21\1\26\2\21\2\27\2\21\2\30"+
    "\1\21\1\30\1\21\5\31\1\32\4\31\1\33\13\31"+
    "\1\34\1\31\2\34\1\31\1\35\6\31\22\0\1\10"+
    "\21\0\1\11\22\0\6\14\1\0\1\14\5\0\2\36"+
    "\2\0\12\36\1\0\3\36\1\37\1\40\1\41\12\36"+
    "\1\0\2\36\5\0\1\32\4\0\1\33\13\0\1\42"+
    "\1\0\2\42\1\0\1\35\7\0\1\43\1\40\1\41"+
    "\16\0\1\40\20\0\2\40\30\0\1\35\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\1\1\11\1\1\1\11\4\1\5\11\3\1"+
    "\4\11\1\1\1\11\1\1\2\11\4\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[35];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final boolean DEBUG = true;

  private static final char DEFAULT_ESCAPE_CHARACTER = '\\';
  private static final boolean REQUIRE_SEMICOLONS = false;

  //ExtendedSyntaxStrCommentHandler longCommentOrStringHandler
  //    = new ExtendedSyntaxStrCommentHandler();

  private char escapeCharacter;
  private boolean requireSemicolons;

  private StringBuilder string = new StringBuilder(32);
  private char character;

  public void resetState() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
    setSemicolonsRequired(REQUIRE_SEMICOLONS);
  }

  public char getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(char escapeCharacter) {
    if (getEscapeCharacter() != escapeCharacter) {
      this.escapeCharacter = escapeCharacter;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", escapeCharacter);
      }
    }
  }

  public boolean isEscapeCharacter(char ch) {
    return ch == getEscapeCharacter();
  }

  public boolean areSemicolonsRequired() {
    return requireSemicolons;
  }

  public void setSemicolonsRequired(boolean requireSemicolons) {
    if (areSemicolonsRequired() != requireSemicolons) {
      this.requireSemicolons = requireSemicolons;
      if (DEBUG) {
        if (requireSemicolons) {
          System.out.println("Semicolons are required");
        } else {
          System.out.println("Semicolons are no longer required");
        }
      }
    }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SourcePawnLexer(java.io.Reader in) {
    resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_CHARACTER_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [138] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 36: break;
            case IN_STRING_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [258] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 37: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [195] { int character = 0;"+ZZ_NL+"                          for (int i = 0; i < yylength(); i++) {"+ZZ_NL+"                            char ch = yycharat(i);"+ZZ_NL+"                            switch (ch) {"+ZZ_NL+"                              case \'0\':case \'1\':case \'2\':case \'3\':case \'4\':"+ZZ_NL+"                              case \'5\':case \'6\':case \'7\':case \'8\':case \'9\':"+ZZ_NL+"                                character = (character * 10) + (ch - \'0\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \';\':"+ZZ_NL+"                                if (i != (yylength()-1)) {"+ZZ_NL+"                                  throw new AssertionError("+ZZ_NL+"                                      \"semicolon should be the final character in the sequence\");"+ZZ_NL+"                                }"+ZZ_NL+""+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError(\"Unsupported control character: \" + ch);"+ZZ_NL+"                            }"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          this.character = (char)character;"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character * 10) + (ch - '0');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 22: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { int character = 0;"+ZZ_NL+"                          for (int i = 0; i < yylength(); i++) {"+ZZ_NL+"                            char ch = yycharat(i);"+ZZ_NL+"                            switch (ch) {"+ZZ_NL+"                              case \'0\':case \'1\':case \'2\':case \'3\':case \'4\':"+ZZ_NL+"                              case \'5\':case \'6\':case \'7\':case \'8\':case \'9\':"+ZZ_NL+"                                character = (character << 4) + (ch - \'0\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'a\':case \'b\':case \'c\':case \'d\':case \'e\':case \'f\':"+ZZ_NL+"                                character = (character << 4) + (ch - \'a\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'A\':case \'B\':case \'C\':case \'D\':case \'E\':case \'F\':"+ZZ_NL+"                                character = (character << 4) + (ch - \'A\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \';\':"+ZZ_NL+"                                if (i != (yylength()-1)) {"+ZZ_NL+"                                  throw new AssertionError("+ZZ_NL+"                                      \"semicolon should be the final character in the sequence\");"+ZZ_NL+"                                }"+ZZ_NL+""+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError(\"Unsupported control character: \" + ch);"+ZZ_NL+"                            }"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          this.character = (char)character;"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character << 4) + (ch - '0');
                                break;
                              case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                                character = (character << 4) + (ch - 'a');
                                break;
                              case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                                character = (character << 4) + (ch - 'A');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 23: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          case 24: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return WHITESPACE; }");
            { return WHITESPACE;
            }
          case 25: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return NEW_LINE; }");
            { return NEW_LINE;
            }
          case 26: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return AT_SIGN; }");
            { return AT_SIGN;
            }
          case 27: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          case 28: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return UNDERSCORE; }");
            { return UNDERSCORE;
            }
          case 29: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { yybegin(IN_CHARACTER_LITERAL); string.setLength(0); }");
            { yybegin(IN_CHARACTER_LITERAL); string.setLength(0);
            }
          case 30: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { yybegin(IN_STRING_LITERAL); string.setLength(0); }");
            { yybegin(IN_STRING_LITERAL); string.setLength(0);
            }
          case 31: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { char ch = yycharat(0);"+ZZ_NL+"                          if (isEscapeCharacter(ch)) {"+ZZ_NL+"                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            string.append(ch);"+ZZ_NL+"                          } }");
            { char ch = yycharat(0);
                          if (isEscapeCharacter(ch)) {
                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);
                          } else {
                            string.append(ch);
                          }
            }
          case 32: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 33: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { String text = string.toString();"+ZZ_NL+"                          System.out.printf(\"yytext = \\\"%s\\\"%n\", text);"+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return CHARACTER_LITERAL; }");
            { String text = string.toString();
                          System.out.printf("yytext = \"%s\"%n", text);
                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 34: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 35: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { String text = string.toString();"+ZZ_NL+"                          System.out.printf(\"yytext = \\\"%s\\\"%n\", text);"+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return STRING_LITERAL; }");
            { String text = string.toString();
                          System.out.printf("yytext = \"%s\"%n", text);
                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 36: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [190] { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE); }");
            { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE);
            }
          case 37: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { switch(yycharat(0)) {"+ZZ_NL+"                            case \'a\':"+ZZ_NL+"                              character = \'\\u0007\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'b\':"+ZZ_NL+"                              character = \'\\b\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'e\':"+ZZ_NL+"                              character = \'\\u001B\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'f\':"+ZZ_NL+"                              character = \'\\f\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'n\':"+ZZ_NL+"                              character = \'\\n\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'r\':"+ZZ_NL+"                              character = \'\\r\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'t\':"+ZZ_NL+"                              character = \'\\t\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'v\':"+ZZ_NL+"                              character = \'\\u000B\';"+ZZ_NL+"                              break;"+ZZ_NL+"                            case \'x\':"+ZZ_NL+"                              yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);"+ZZ_NL+"                              break;"+ZZ_NL+"                            default:"+ZZ_NL+"                              throw new AssertionError("+ZZ_NL+"                                  \"Unsupported control character: \" + yycharat(0));"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { switch(yycharat(0)) {
                            case 'a':
                              character = '\u0007';
                              break;
                            case 'b':
                              character = '\b';
                              break;
                            case 'e':
                              character = '\u001B';
                              break;
                            case 'f':
                              character = '\f';
                              break;
                            case 'n':
                              character = '\n';
                              break;
                            case 'r':
                              character = '\r';
                              break;
                            case 't':
                              character = '\t';
                              break;
                            case 'v':
                              character = '\u000B';
                              break;
                            case 'x':
                              yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);
                              break;
                            default:
                              throw new AssertionError(
                                  "Unsupported control character: " + yycharat(0));
                          }

                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 38: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [189] { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL); }");
            { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 39: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL); }");
            { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL);
            }
          case 40: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { if (isEscapeCharacter(yycharat(0))) {"+ZZ_NL+"                            char ctrl = yycharat(1);"+ZZ_NL+"                            switch (ctrl) {"+ZZ_NL+"                              case \'a\':case \'b\':case \'e\':case \'f\':"+ZZ_NL+"                              case \'n\':case \'r\':case \'t\':case \'v\':"+ZZ_NL+"                              case \'x\':"+ZZ_NL+"                              case \'%\':"+ZZ_NL+"                              case \'\"\':"+ZZ_NL+"                              case \'\\\'\':"+ZZ_NL+"                              case \'0\':case \'1\':case \'2\':case \'3\':case \'4\':"+ZZ_NL+"                              case \'5\':case \'6\':case \'7\':case \'8\':case \'9\':"+ZZ_NL+"                                System.out.printf(\"appending \\\"%s\\\"%n\", yytext());"+ZZ_NL+"                                string.append(yytext());"+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                if (isEscapeCharacter(ctrl)) {"+ZZ_NL+"                                  System.out.printf(\"appending \\\"%s\\\"%n\", yytext());"+ZZ_NL+"                                  string.append(yytext());"+ZZ_NL+"                                  break;"+ZZ_NL+"                                }"+ZZ_NL+""+ZZ_NL+"                                System.out.printf(\"invalid escape sequence \\\"%s\\\"%n\", yytext());"+ZZ_NL+"                                yybegin(YYINITIAL);"+ZZ_NL+"                                return BAD_CHARACTER;"+ZZ_NL+"                            }"+ZZ_NL+"                          } else {"+ZZ_NL+"                            string.append(yycharat(0));"+ZZ_NL+"                            yypushback(1);"+ZZ_NL+"                          } }");
            { if (isEscapeCharacter(yycharat(0))) {
                            char ctrl = yycharat(1);
                            switch (ctrl) {
                              case 'a':case 'b':case 'e':case 'f':
                              case 'n':case 'r':case 't':case 'v':
                              case 'x':
                              case '%':
                              case '"':
                              case '\'':
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                System.out.printf("appending \"%s\"%n", yytext());
                                string.append(yytext());
                                break;
                              default:
                                if (isEscapeCharacter(ctrl)) {
                                  System.out.printf("appending \"%s\"%n", yytext());
                                  string.append(yytext());
                                  break;
                                }

                                System.out.printf("invalid escape sequence \"%s\"%n", yytext());
                                yybegin(YYINITIAL);
                                return BAD_CHARACTER;
                            }
                          } else {
                            string.append(yycharat(0));
                            yypushback(1);
                          }
            }
          case 41: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] {  }");
            { 
            }
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SourcePawnLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SourcePawnLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SourcePawnLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
