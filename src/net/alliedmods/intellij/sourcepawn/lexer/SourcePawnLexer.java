/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;

import org.jetbrains.annotations.NotNull;

import java.io.Reader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*;
import net.alliedmods.intellij.sourcepawn.SourcePawnUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PREPROCESSOR = 2;
  public static final int IN_PREPROCESSOR_PRAGMA = 4;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS = 6;
  public static final int IN_PRAGMA_DEPRECATED_STRING = 8;
  public static final int IN_CHARACTER_LITERAL = 10;
  public static final int IN_STRING_LITERAL = 12;
  public static final int IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE = 14;
  public static final int IN_CHARACTER_LITERAL_DECIMAL_ESCAPE = 16;
  public static final int IN_CHARACTER_LITERAL_UNICODE_ESCAPE = 18;
  public static final int IN_LINE_COMMENT = 20;
  public static final int IN_BLOCK_COMMENT = 22;
  public static final int IN_DOC_COMMENT = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\42\1\105\1\43\1\0\1\44\1\35\1\104\1\57"+
    "\1\60\1\37\1\45\1\41\1\33\1\32\1\46\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\53\1\20\1\52\1\36\1\51\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\40"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\50\1\55\1\47\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\3\0\1\3\1\4\2\5\1\6"+
    "\1\3\1\7\1\10\1\11\1\10\2\11\1\12\10\11"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\3\1\34\1\35\1\36\1\37\1\40"+
    "\10\11\1\41\1\42\22\43\1\44\3\43\1\45\1\46"+
    "\1\45\1\47\1\50\2\45\1\51\1\52\1\53\1\54"+
    "\1\55\2\1\2\2\2\45\2\56\3\45\1\57\2\45"+
    "\1\60\1\57\1\60\1\0\1\4\1\10\1\0\3\10"+
    "\22\11\1\61\10\11\1\62\1\63\1\64\3\11\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\4\11\1\110\1\111\4\11\1\112\10\11"+
    "\10\0\1\113\15\0\1\44\2\0\2\114\2\115\1\2"+
    "\3\0\1\57\1\116\1\0\1\60\1\57\1\60\1\117"+
    "\1\120\4\11\1\121\15\11\1\122\4\11\1\123\10\11"+
    "\1\124\2\11\1\125\2\11\1\77\1\126\1\127\1\130"+
    "\1\131\5\11\1\132\2\11\1\133\16\11\27\0\2\45"+
    "\2\134\1\0\6\11\1\135\6\11\1\136\1\11\1\137"+
    "\1\140\17\11\1\141\3\11\1\142\5\11\1\143\1\144"+
    "\2\11\1\145\1\146\4\11\1\147\6\11\1\150\5\11"+
    "\1\151\1\11\1\152\3\0\1\153\2\0\1\154\1\0"+
    "\1\155\16\0\1\120\1\0\1\156\3\11\1\157\1\160"+
    "\5\11\1\161\1\11\1\162\1\163\2\11\1\164\10\11"+
    "\1\165\3\11\1\166\10\11\1\167\1\11\1\170\1\11"+
    "\1\171\1\11\1\172\1\173\15\11\1\174\1\0\1\175"+
    "\1\176\2\0\1\177\20\0\1\11\1\200\1\11\1\201"+
    "\2\11\1\202\1\11\1\203\1\204\1\205\7\11\1\206"+
    "\1\11\1\207\1\210\1\211\1\212\1\213\11\11\1\214"+
    "\1\11\1\215\1\11\1\216\2\11\1\217\3\11\1\220"+
    "\1\11\1\0\1\221\2\0\1\222\1\0\1\223\1\224"+
    "\2\0\1\225\10\0\1\226\1\11\1\227\1\230\2\11"+
    "\1\231\1\232\1\233\2\11\1\234\1\235\2\11\1\236"+
    "\1\237\1\240\1\11\1\241\1\242\3\11\1\243\1\244"+
    "\2\11\1\245\1\246\3\0\1\247\1\250\6\0\1\251"+
    "\2\0\1\252\1\253\1\254\1\255\1\256\1\11\1\257"+
    "\1\260\1\11\1\261\3\11\2\0\1\262\1\263\1\0"+
    "\1\264\1\265\1\266\1\0\1\267\1\270\1\11\1\271"+
    "\1\272\1\273\1\274\1\0\1\275\1\276\1\0\1\11"+
    "\1\277\1\300\1\11\1\301";

  private static int [] zzUnpackAction() {
    int [] result = new int[656];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u039b"+
    "\0\u0429\0\u039b\0\u0470\0\u04b7\0\u04fe\0\u04b7\0\u0545\0\u058c"+
    "\0\u05d3\0\u039b\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u039b\0\u0a8a\0\u039b\0\u0ad1\0\u0b18\0\u0b5f"+
    "\0\u039b\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u039b\0\u039b\0\u039b"+
    "\0\u039b\0\u039b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u039b\0\u039b\0\u039b\0\u0470\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u039b\0\u14cd\0\u039b\0\u039b\0\u1514"+
    "\0\u155b\0\u1514\0\u039b\0\u039b\0\u039b\0\u039b\0\u15a2\0\u039b"+
    "\0\u15e9\0\u039b\0\u1630\0\u1677\0\u039b\0\u16be\0\u039b\0\u1705"+
    "\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u0470"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e"+
    "\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u039b\0\u039b\0\u22ab\0\u22f2\0\u2339\0\u039b"+
    "\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b\0\u039b"+
    "\0\u039b\0\u2380\0\u23c7\0\u039b\0\u039b\0\u039b\0\u240e\0\u039b"+
    "\0\u2455\0\u039b\0\u249c\0\u24e3\0\u252a\0\u2571\0\u04b7\0\u25b8"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u039b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u13b1\0\u2f26\0\u2f6d\0\u2fb4\0\u039b\0\u2ffb"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u039b"+
    "\0\u3233\0\u327a\0\u32c1\0\u3308\0\u039b\0\u334f\0\u3396\0\u33dd"+
    "\0\u3424\0\u346b\0\u04b7\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce"+
    "\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u04b7\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u039b\0\u3be8"+
    "\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u039b\0\u3dd9"+
    "\0\u039b\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u4011\0\u04b7\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb"+
    "\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b"+
    "\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863"+
    "\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u2ffb\0\u3117"+
    "\0\u315e\0\u039b\0\u3233\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70"+
    "\0\u4bb7\0\u4bfe\0\u04b7\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61"+
    "\0\u4da8\0\u04b7\0\u4def\0\u04b7\0\u04b7\0\u4e36\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u5143\0\u518a\0\u51d1\0\u5218\0\u04b7\0\u525f\0\u52a6\0\u52ed"+
    "\0\u039b\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u04b7\0\u04b7"+
    "\0\u5497\0\u54de\0\u04b7\0\u04b7\0\u5525\0\u556c\0\u55b3\0\u55fa"+
    "\0\u04b7\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u04b7"+
    "\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u04b7\0\u594e\0\u04b7"+
    "\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u039b\0\u5b3f"+
    "\0\u039b\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30"+
    "\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68"+
    "\0\u5f68\0\u04b7\0\u5faf\0\u5ff6\0\u603d\0\u04b7\0\u04b7\0\u6084"+
    "\0\u60cb\0\u6112\0\u6159\0\u61a0\0\u04b7\0\u61e7\0\u04b7\0\u04b7"+
    "\0\u622e\0\u6275\0\u04b7\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8"+
    "\0\u641f\0\u6466\0\u64ad\0\u04b7\0\u64f4\0\u653b\0\u6582\0\u04b7"+
    "\0\u65c9\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba"+
    "\0\u04b7\0\u6801\0\u04b7\0\u6848\0\u04b7\0\u688f\0\u04b7\0\u04b7"+
    "\0\u68d6\0\u691d\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7"+
    "\0\u6b0e\0\u6b55\0\u6b9c\0\u6be3\0\u6c2a\0\u04b7\0\u6c71\0\u039b"+
    "\0\u039b\0\u6cb8\0\u6cff\0\u039b\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b"+
    "\0\u6e62\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5\0\u700c\0\u7053"+
    "\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6\0\u04b7\0\u71fd\0\u04b7"+
    "\0\u7244\0\u728b\0\u04b7\0\u72d2\0\u04b7\0\u04b7\0\u04b7\0\u7319"+
    "\0\u7360\0\u73a7\0\u73ee\0\u7435\0\u747c\0\u74c3\0\u04b7\0\u750a"+
    "\0\u04b7\0\u04b7\0\u04b7\0\u04b7\0\u04b7\0\u7551\0\u7598\0\u75df"+
    "\0\u7626\0\u766d\0\u76b4\0\u76fb\0\u7742\0\u7789\0\u04b7\0\u77d0"+
    "\0\u04b7\0\u7817\0\u04b7\0\u785e\0\u78a5\0\u04b7\0\u78ec\0\u7933"+
    "\0\u797a\0\u04b7\0\u79c1\0\u7a08\0\u039b\0\u7a4f\0\u7a96\0\u039b"+
    "\0\u7add\0\u039b\0\u039b\0\u7b24\0\u7b6b\0\u039b\0\u7bb2\0\u7bf9"+
    "\0\u7c40\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u7da3\0\u04b7\0\u7dea"+
    "\0\u04b7\0\u04b7\0\u7e31\0\u7e78\0\u04b7\0\u04b7\0\u04b7\0\u7ebf"+
    "\0\u7f06\0\u04b7\0\u04b7\0\u7f4d\0\u7f94\0\u04b7\0\u04b7\0\u04b7"+
    "\0\u7fdb\0\u04b7\0\u04b7\0\u8022\0\u8069\0\u80b0\0\u04b7\0\u04b7"+
    "\0\u80f7\0\u813e\0\u04b7\0\u04b7\0\u8185\0\u81cc\0\u8213\0\u039b"+
    "\0\u039b\0\u825a\0\u82a1\0\u82e8\0\u832f\0\u8376\0\u83bd\0\u039b"+
    "\0\u8404\0\u844b\0\u04b7\0\u04b7\0\u04b7\0\u04b7\0\u04b7\0\u8492"+
    "\0\u04b7\0\u04b7\0\u84d9\0\u04b7\0\u8520\0\u8567\0\u85ae\0\u85f5"+
    "\0\u863c\0\u039b\0\u039b\0\u8683\0\u039b\0\u039b\0\u039b\0\u86ca"+
    "\0\u039b\0\u039b\0\u8711\0\u04b7\0\u04b7\0\u04b7\0\u04b7\0\u8758"+
    "\0\u039b\0\u039b\0\u879f\0\u87e6\0\u039b\0\u039b\0\u882d\0\u04b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[656];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\25\1\26\1\27\1\30\1\31\1\26\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\26\1\74\1\26\1\75\1\26\1\76\1\77"+
    "\1\100\1\26\1\101\1\102\5\25\2\26\1\103\1\104"+
    "\1\16\1\105\1\17\3\105\1\106\13\105\1\107\1\105"+
    "\1\110\1\111\1\112\1\113\1\114\33\105\1\115\3\105"+
    "\1\116\1\105\1\117\16\105\1\17\3\105\1\106\13\105"+
    "\1\120\1\121\1\122\4\105\1\123\30\105\1\124\3\105"+
    "\1\125\1\105\1\126\20\105\1\127\3\105\1\130\10\105"+
    "\1\131\3\105\1\132\64\105\1\133\1\127\2\134\1\133"+
    "\1\135\100\133\1\134\2\136\2\105\100\136\1\137\1\136"+
    "\1\105\2\140\2\105\1\140\1\141\77\140\1\142\10\105"+
    "\1\143\1\105\2\143\1\105\1\143\1\144\1\105\1\144"+
    "\1\105\2\144\1\105\3\144\5\105\1\144\7\105\1\145"+
    "\20\105\1\144\7\105\5\143\2\105\2\145\1\105\7\146"+
    "\1\147\1\146\2\147\1\146\1\147\3\146\1\150\54\146"+
    "\5\147\14\146\1\151\1\146\5\151\2\146\1\152\3\146"+
    "\3\151\32\146\1\151\5\146\1\151\5\146\5\151\5\146"+
    "\1\153\1\154\1\155\1\156\102\153\1\157\1\160\1\161"+
    "\2\162\33\160\1\163\46\160\1\157\1\164\1\165\2\166"+
    "\33\164\1\167\47\164\110\0\1\17\3\0\1\170\103\0"+
    "\1\20\105\0\1\170\1\17\1\171\111\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\23\26\12\0\1\172\1\0"+
    "\2\172\1\0\1\172\14\0\1\172\1\173\42\0\5\172"+
    "\14\0\1\172\1\0\2\172\1\0\1\172\1\174\1\175"+
    "\1\176\11\0\1\172\1\173\42\0\5\172\13\0\12\26"+
    "\1\0\1\26\1\177\1\200\6\26\2\0\1\26\24\0"+
    "\23\26\11\0\7\26\1\201\2\26\1\0\11\26\2\0"+
    "\1\26\24\0\10\26\1\202\12\26\11\0\12\26\1\0"+
    "\1\26\1\203\3\26\1\204\3\26\2\0\1\26\24\0"+
    "\5\26\1\205\3\26\1\206\11\26\11\0\12\26\1\0"+
    "\3\26\1\207\5\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\7\26\1\210\1\26\2\0\1\26\24\0"+
    "\2\26\1\211\1\26\1\212\16\26\11\0\11\26\1\213"+
    "\1\0\6\26\1\214\2\26\2\0\1\26\24\0\4\26"+
    "\1\215\16\26\11\0\10\26\1\216\1\26\1\0\2\26"+
    "\1\217\6\26\2\0\1\26\24\0\2\26\1\220\20\26"+
    "\11\0\12\26\1\0\7\26\1\221\1\26\2\0\1\26"+
    "\24\0\1\222\22\26\11\0\12\26\1\0\3\26\1\223"+
    "\5\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\1\224\2\26\1\225\2\26\1\226\2\26\2\0\1\26"+
    "\24\0\2\26\1\227\7\26\1\230\10\26\11\0\12\26"+
    "\1\0\10\26\1\231\2\0\1\26\24\0\23\26\35\0"+
    "\1\232\107\0\1\233\2\0\1\234\56\0\10\26\1\235"+
    "\1\26\1\0\5\26\1\236\3\26\2\0\1\26\24\0"+
    "\2\26\1\237\20\26\40\0\1\240\1\241\106\0\1\242"+
    "\106\0\1\243\106\0\1\244\106\0\1\245\106\0\1\246"+
    "\106\0\1\247\6\0\1\250\77\0\1\251\1\252\6\0"+
    "\1\253\76\0\1\254\11\0\1\255\74\0\1\256\12\0"+
    "\1\257\73\0\1\260\13\0\1\261\107\0\1\262\41\0"+
    "\10\26\1\263\1\26\1\0\3\26\1\264\1\26\1\265"+
    "\3\26\2\0\1\26\24\0\5\26\1\266\15\26\11\0"+
    "\12\26\1\0\4\26\1\267\4\26\2\0\1\26\24\0"+
    "\4\26\1\270\2\26\1\271\13\26\11\0\12\26\1\0"+
    "\2\26\1\272\1\273\1\26\1\274\3\26\2\0\1\26"+
    "\24\0\23\26\11\0\10\26\1\275\1\26\1\0\3\26"+
    "\1\276\5\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\3\26\1\277\5\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\1\26\1\300\1\301\2\26\1\302"+
    "\3\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\2\26\1\303\2\26\1\304"+
    "\15\26\11\0\10\26\1\305\1\26\1\0\11\26\2\0"+
    "\1\26\24\0\23\26\25\0\1\306\151\0\1\307\43\0"+
    "\1\310\4\0\1\311\35\0\1\312\104\0\1\313\53\0"+
    "\1\314\141\0\1\315\50\0\1\316\37\0\1\317\45\0"+
    "\1\320\104\0\1\321\112\0\1\322\106\0\1\323\145\0"+
    "\1\324\45\0\1\325\100\0\1\326\2\0\1\327\111\0"+
    "\1\330\106\0\1\331\45\0\1\332\15\0\1\127\3\0"+
    "\1\333\102\0\1\333\1\127\1\334\174\0\1\335\41\0"+
    "\1\336\63\0\1\133\106\0\1\135\1\127\1\334\103\0"+
    "\2\337\2\0\102\337\1\0\1\337\1\340\1\341\1\342"+
    "\102\337\10\0\1\147\1\0\2\147\1\0\1\147\3\0"+
    "\1\150\54\0\5\147\14\0\1\343\1\0\5\343\2\0"+
    "\1\152\3\0\3\343\32\0\1\343\5\0\1\343\5\0"+
    "\5\343\5\0\1\157\1\153\2\0\104\157\1\154\1\155"+
    "\1\156\103\157\2\0\1\155\105\0\1\344\106\0\1\345"+
    "\2\162\33\0\1\346\50\0\1\347\2\162\104\0\1\344"+
    "\44\0\1\350\41\0\1\351\106\0\1\352\106\0\1\351"+
    "\2\353\142\0\1\354\6\0\1\355\41\0\2\17\2\0"+
    "\1\170\110\0\1\172\1\0\2\172\1\0\1\172\14\0"+
    "\1\172\43\0\5\172\14\0\1\356\1\0\2\356\1\0"+
    "\1\356\60\0\5\356\16\0\1\174\2\0\1\174\14\0"+
    "\1\174\66\0\2\175\1\0\1\175\14\0\1\175\44\0"+
    "\4\175\14\0\1\176\1\0\5\176\6\0\3\176\2\0"+
    "\1\176\27\0\1\176\5\0\1\176\5\0\5\176\13\0"+
    "\12\26\1\0\3\26\1\357\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\2\26\1\360\20\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\21\26\1\361\1\26\11\0\12\26\1\0"+
    "\3\26\1\362\5\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\11\26\1\363"+
    "\11\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\13\26\1\364\7\26\11\0\12\26\1\0\1\26\1\365"+
    "\7\26\2\0\1\26\24\0\2\26\1\366\20\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\10\26\1\367"+
    "\12\26\11\0\12\26\1\0\1\370\4\26\1\371\3\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\2\26\1\372\20\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\4\26\1\373\16\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\2\26"+
    "\1\374\20\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\2\26\1\375\5\26\1\376\12\26\11\0\12\26"+
    "\1\0\7\26\1\377\1\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\2\26\1\u0100\6\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\1\26\1\u0101\7\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\4\26\1\u0102\16\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\4\26\1\u0103\16\26"+
    "\11\0\12\26\1\0\7\26\1\u0104\1\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\1\26\1\u0105\21\26\11\0\12\26\1\0\1\u0106"+
    "\10\26\2\0\1\26\24\0\23\26\11\0\10\26\1\u0107"+
    "\1\26\1\0\1\26\1\u0108\3\26\1\u0109\3\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\5\26\1\u010a"+
    "\3\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\3\26\1\u010b\5\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\22\26\1\u010c"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\2\26"+
    "\1\u010d\20\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\4\26\1\u010e\16\26\35\0\1\u010f\62\0\12\26"+
    "\1\0\6\26\1\u0110\2\26\2\0\1\26\24\0\2\26"+
    "\1\u0111\20\26\11\0\12\26\1\0\1\26\1\u0112\7\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\1\26"+
    "\1\u0113\1\26\1\u0114\5\26\2\0\1\26\24\0\23\26"+
    "\4\0\1\u0115\35\0\1\u0116\50\0\1\253\143\0\1\u0117"+
    "\12\0\1\u0118\73\0\1\u0119\56\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\4\26\1\u011a\16\26\11\0\12\26"+
    "\1\0\6\26\1\u011b\2\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\1\u011c\6\26\1\u011d\1\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\5\26\1\u011e"+
    "\3\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\1\u011f\10\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\10\26\1\u0120\12\26"+
    "\11\0\12\26\1\0\6\26\1\u0121\2\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\12\26\1\u0122\10\26\11\0\12\26\1\0\1\u0123"+
    "\10\26\2\0\1\26\24\0\7\26\1\u0124\13\26\11\0"+
    "\12\26\1\0\2\26\1\u0125\6\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\4\26\1\u0126\1\26\1\u0127"+
    "\2\26\2\0\1\26\24\0\1\u0128\22\26\11\0\12\26"+
    "\1\0\1\u0129\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\10\26\1\u012a\1\26\1\0\11\26\2\0\1\26\24\0"+
    "\2\26\1\u012b\20\26\11\0\7\26\1\u012c\2\26\1\0"+
    "\11\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\1\u012d\22\26\11\0\12\26"+
    "\1\0\1\u012e\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\2\26\1\u012f"+
    "\20\26\11\0\12\26\1\0\1\u0130\10\26\2\0\1\26"+
    "\24\0\23\26\75\0\1\u0131\103\0\1\u0132\41\0\1\u0133"+
    "\114\0\1\u0134\145\0\1\u0135\46\0\1\u0136\107\0\1\u0137"+
    "\143\0\1\u0138\102\0\1\u0139\52\0\1\u013a\107\0\1\u013b"+
    "\75\0\1\u013c\112\0\1\u013d\110\0\1\u013e\153\0\1\u013f"+
    "\105\0\1\u0140\41\0\1\u0141\157\0\1\u0142\104\0\1\u0143"+
    "\102\0\1\u0144\22\0\2\127\2\0\1\333\122\0\1\u0145"+
    "\147\0\1\u0146\25\0\1\u0147\1\341\1\342\104\0\1\341"+
    "\106\0\2\341\124\0\1\152\66\0\1\157\1\u0148\2\0"+
    "\33\157\1\0\6\157\1\0\41\157\1\u0149\2\162\33\157"+
    "\1\346\6\157\1\0\40\157\46\0\1\350\41\0\1\347"+
    "\105\0\1\u014a\1\u014b\35\u014a\1\0\6\u014a\1\0\41\u014a"+
    "\1\352\35\u014a\1\0\6\u014a\1\0\40\u014a\2\0\2\353"+
    "\142\0\1\354\73\0\1\u014c\70\0\12\26\1\0\5\26"+
    "\1\u014d\3\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\6\26\1\u014e\2\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\3\26\1\u014f\5\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\1\26\1\u0150\7\26"+
    "\2\0\1\26\24\0\23\26\11\0\10\26\1\u0151\1\26"+
    "\1\0\11\26\2\0\1\26\24\0\23\26\11\0\10\26"+
    "\1\u0152\1\26\1\0\11\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\7\26\1\u0153\1\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\3\26\1\u0154\5\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\2\26"+
    "\1\u0155\6\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\6\26\1\u0156\14\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\4\26"+
    "\1\u0157\16\26\11\0\12\26\1\0\1\u0158\10\26\2\0"+
    "\1\26\24\0\23\26\11\0\10\26\1\u0159\1\26\1\0"+
    "\11\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\1\u015a\10\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\6\26\1\u015b\2\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\3\26\1\u015c\5\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\7\26\1\u015d\13\26\11\0\12\26\1\0\3\26"+
    "\1\u015e\5\26\2\0\1\26\24\0\12\26\1\u015f\10\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\1\u0160"+
    "\22\26\11\0\12\26\1\0\5\26\1\u0161\3\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\3\26\1\u0162"+
    "\5\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\2\26\1\u0163\6\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\1\u0164\22\26"+
    "\11\0\12\26\1\0\2\26\1\u0165\6\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\1\u0166\10\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\6\26\1\u0167"+
    "\2\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\3\26\1\u0168\5\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\3\26\1\u0169\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\1\u016a\10\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\2\26\1\u016b\6\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\5\26"+
    "\1\u016c\3\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\6\26\1\u016d\14\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\2\26"+
    "\1\u016e\20\26\11\0\12\26\1\0\1\u016f\10\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\12\26\1\u0170\10\26\4\0\1\u0115\106\0"+
    "\1\u0116\143\0\1\u0171\56\0\12\26\1\0\1\u0172\6\26"+
    "\1\u0173\1\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\6\26\1\u0174\2\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\1\u0175"+
    "\22\26\11\0\12\26\1\0\1\u0176\2\26\1\u0177\5\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\1\26"+
    "\1\u0178\7\26\2\0\1\26\24\0\23\26\11\0\3\26"+
    "\1\u0179\6\26\1\0\3\26\1\u017a\5\26\2\0\1\26"+
    "\24\0\4\26\1\u017b\7\26\1\u017c\1\u017d\1\u017e\4\26"+
    "\11\0\10\26\1\u017f\1\26\1\0\6\26\1\u0180\2\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\6\26"+
    "\1\u0181\2\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\2\26\1\u0182\20\26"+
    "\11\0\12\26\1\0\3\26\1\u0183\5\26\2\0\1\26"+
    "\24\0\23\26\11\0\7\26\1\u0184\2\26\1\0\11\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\5\26"+
    "\1\u0185\3\26\2\0\1\26\24\0\2\26\1\u0186\20\26"+
    "\11\0\12\26\1\0\3\26\1\u0187\5\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\6\26\1\u0188\2\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\5\26\1\u0189\15\26\11\0\12\26"+
    "\1\0\1\u018a\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\u018b\24\0\23\26\11\0"+
    "\12\26\1\0\6\26\1\u018c\2\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\3\26\1\u018d\17\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\5\26\1\u018e\15\26\11\0\12\26\1\0"+
    "\6\26\1\u018f\2\26\2\0\1\26\24\0\23\26\11\0"+
    "\10\26\1\u0190\1\26\1\0\11\26\2\0\1\26\24\0"+
    "\23\26\66\0\1\u0191\47\0\1\u0192\100\0\1\u0193\114\0"+
    "\1\u0194\112\0\1\u0195\32\0\1\u0196\47\0\1\u0197\106\0"+
    "\1\u0198\106\0\1\u0199\111\0\1\u019a\142\0\1\u019b\117\0"+
    "\1\u019c\42\0\1\u019d\141\0\1\u019e\53\0\1\u019f\141\0"+
    "\1\u01a0\47\0\1\u01a1\111\0\1\u01a2\146\0\1\u01a3\41\0"+
    "\1\u01a4\112\0\1\u01a5\143\0\1\u01a6\46\0\1\u01a7\72\0"+
    "\1\u01a8\1\0\2\u01a8\1\0\1\u01a8\16\0\1\u01a9\41\0"+
    "\5\u01a8\13\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\3\26\1\u01aa\17\26\11\0\12\26\1\0\1\u01ab\10\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\1\u01ac\22\26\11\0\12\26\1\0"+
    "\5\26\1\u01ad\3\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\4\26\1\u01ae\4\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\12\26\1\u01af\10\26\11\0\10\26\1\u01b0\1\26\1\0"+
    "\7\26\1\u01b1\1\26\2\0\1\26\24\0\6\26\1\u01b2"+
    "\14\26\11\0\12\26\1\0\1\26\1\u01b3\7\26\2\0"+
    "\1\26\24\0\23\26\11\0\10\26\1\u01b4\1\26\1\0"+
    "\11\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\13\26\1\u01b5\7\26\11\0"+
    "\3\26\1\u01b6\6\26\1\0\11\26\2\0\1\26\24\0"+
    "\4\26\1\u01b7\7\26\1\u01b8\1\u01b9\1\u01ba\4\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\4\26\1\u01bb"+
    "\16\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\2\26\1\u01bc\20\26\11\0\12\26\1\0\5\26\1\u01bd"+
    "\3\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\5\26\1\u01be\3\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\1\u01bf\2\26\1\u01c0\5\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\6\26\1\u01c1\2\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\1\26"+
    "\1\u01c2\7\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\2\26\1\u01c3\20\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\3\26"+
    "\1\u01c4\17\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\1\u01c5\22\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\2\26\1\u01c6\20\26\11\0\12\26\1\0"+
    "\3\26\1\u01c7\5\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\10\26\1\u01c8"+
    "\12\26\11\0\10\26\1\u01c9\1\26\1\0\11\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\1\u01ca\22\26\11\0\12\26\1\0\6\26"+
    "\1\u01cb\2\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\1\u01cc\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\5\26\1\u01cd\3\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\2\26\1\u01ce\6\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\10\26\1\u01cf"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\2\26\1\u01d0\20\26\11\0\12\26"+
    "\1\0\1\u01d1\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\7\26\1\u01d2\1\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\5\26\1\u01d3\15\26\11\0\12\26\1\0\10\26\1\u01d4"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\11\26"+
    "\2\0\1\26\24\0\15\26\1\u01d5\5\26\11\0\12\26"+
    "\1\0\1\26\1\u01d6\7\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\20\26"+
    "\1\u01d7\2\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\17\26\1\u01d8\3\26\11\0\12\26\1\0\1\26"+
    "\1\u01d9\7\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\2\26\1\u01da\20\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\u01db\24\0\23\26"+
    "\11\0\12\26\1\0\7\26\1\u01dc\1\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\6\26\1\u01dd\2\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\2\26"+
    "\1\u01de\6\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\4\26\1\u01df\16\26"+
    "\11\0\12\26\1\0\1\u01e0\10\26\2\0\1\26\24\0"+
    "\23\26\11\0\10\26\1\u01e1\1\26\1\0\11\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\3\26\1\u01e2"+
    "\5\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\5\26\1\u01e3\3\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\2\26\1\u01e4"+
    "\20\26\11\0\12\26\1\0\5\26\1\u01e5\3\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\3\26\1\u01e6"+
    "\5\26\2\0\1\26\24\0\23\26\70\0\1\u01e7\46\0"+
    "\1\u01e8\103\0\1\u01e9\147\0\1\u01ea\104\0\1\u01eb\52\0"+
    "\1\u01ec\37\0\1\u01ed\43\0\1\u01ee\107\0\1\u01ef\150\0"+
    "\1\u01f0\111\0\1\u01f1\101\0\1\u01f2\41\0\1\u01f3\114\0"+
    "\1\u01f4\143\0\1\u01f5\116\0\1\u01f6\76\0\1\u01f7\51\0"+
    "\1\u01f8\106\0\1\u01f9\152\0\1\u01fa\34\0\1\u01fb\153\0"+
    "\1\u01fc\32\0\1\u01a8\1\0\2\u01a8\1\0\1\u01a8\60\0"+
    "\5\u01a8\13\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\2\26\1\u01fd\20\26\11\0\12\26\1\0\1\u01fe\10\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\1\u01ff"+
    "\10\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\4\26\1\u0200\4\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\3\26\1\u0201\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\3\26\1\u0202\5\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\4\26\1\u0203\16\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\4\26\1\u0204\16\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\15\26\1\u0205"+
    "\5\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\20\26\1\u0206\2\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\17\26\1\u0207\3\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\1\u0208\22\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\1\u0209\22\26\11\0"+
    "\12\26\1\0\1\26\1\u020a\7\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\5\26\1\u020b\3\26\2\0"+
    "\1\26\24\0\2\26\1\u020c\20\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\4\26\1\u020d\16\26\11\0"+
    "\12\26\1\0\6\26\1\u020e\2\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\1\u020f\10\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\1\26\1\u0210\7\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\1\u0211"+
    "\10\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\1\u0212\22\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\6\26\1\u0213\14\26"+
    "\11\0\12\26\1\0\4\26\1\u0214\4\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\5\26\1\u0215\15\26\11\0\12\26\1\0\6\26"+
    "\1\u0216\2\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\2\26\1\u0217\20\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\4\26"+
    "\1\u0218\16\26\11\0\12\26\1\0\5\26\1\u0219\3\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\5\26"+
    "\1\u021a\3\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\4\26\1\u021b\16\26"+
    "\11\0\10\26\1\u021c\1\26\1\0\11\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\1\u021d\10\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\4\26\1\u021e"+
    "\4\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\1\u021f\10\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\1\u0220\22\26\11\0"+
    "\12\26\1\0\3\26\1\u0221\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\10\26\1\u0222\12\26\11\0\12\26\1\0\3\26\1\u0223"+
    "\5\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\6\26\1\u0224\2\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\3\26\1\u0225\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\3\26\1\u0226\5\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\6\26\1\u0227\14\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\1\u0228\22\26\11\0\12\26"+
    "\1\0\1\u0229\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\1\u022a\22\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\13\26"+
    "\1\u022b\7\26\64\0\1\u022c\52\0\1\u022d\103\0\1\u022e"+
    "\155\0\1\u022f\36\0\1\u0230\154\0\1\u0231\43\0\1\u0232"+
    "\110\0\1\u0233\163\0\1\u0234\70\0\1\u0235\110\0\1\u0236"+
    "\35\0\1\u0237\116\0\1\u0238\146\0\1\u0239\101\0\1\u023a"+
    "\106\0\1\u023b\110\0\1\u023c\110\0\1\u023d\43\0\1\u023e"+
    "\72\0\12\26\1\0\11\26\2\0\1\26\24\0\4\26"+
    "\1\u023f\16\26\11\0\10\26\1\u0240\1\26\1\0\11\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\1\u0241"+
    "\10\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\4\26\1\u0242\4\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\6\26\1\u0243\2\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\2\26\1\u0244\20\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\5\26\1\u0245\15\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\6\26\1\u0246\14\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\13\26\1\u0247"+
    "\7\26\11\0\10\26\1\u0248\1\26\1\0\11\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\2\26\1\u0249"+
    "\6\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\11\26\1\u024a\11\26\11\0"+
    "\12\26\1\0\3\26\1\u024b\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\5\26\1\u024c\3\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\6\26\1\u024d"+
    "\2\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\1\u024e\10\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\6\26\1\u024f\2\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\7\26\1\u0250\1\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\2\26\1\u0251\6\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\4\26"+
    "\1\u0252\4\26\2\0\1\26\24\0\23\26\11\0\10\26"+
    "\1\u0253\1\26\1\0\11\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\5\26\1\u0254\3\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\11\26\2\0\1\26"+
    "\24\0\2\26\1\u0255\20\26\11\0\12\26\1\0\5\26"+
    "\1\u0256\3\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\1\u0257\10\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\11\26\2\0\1\26\24\0\6\26\1\u0258"+
    "\14\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\7\26\1\u0259\13\26\11\0\12\26\1\0\1\u025a\10\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\3\26"+
    "\1\u025b\5\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\3\26\1\u025c\5\26\2\0\1\26\24\0\23\26"+
    "\32\0\1\u025d\142\0\1\u025e\46\0\1\u025f\107\0\1\u0260"+
    "\106\0\1\u0261\110\0\1\u0262\107\0\1\u0263\153\0\1\u0264"+
    "\40\0\1\u0265\107\0\1\u0266\105\0\1\u0267\141\0\1\u0268"+
    "\53\0\1\u0269\104\0\1\u026a\70\0\12\26\1\0\1\26"+
    "\1\u026b\7\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\11\26\1\u026c\11\26"+
    "\11\0\12\26\1\0\1\u026d\10\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\11\26\2\0\1\26\24\0"+
    "\4\26\1\u026e\16\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\7\26\1\u026f\13\26\11\0\7\26\1\u0270"+
    "\2\26\1\0\11\26\2\0\1\26\24\0\23\26\11\0"+
    "\12\26\1\0\3\26\1\u0271\5\26\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\3\26\1\u0272\5\26\2\0"+
    "\1\26\24\0\23\26\11\0\12\26\1\0\11\26\2\0"+
    "\1\26\24\0\1\u0273\22\26\11\0\12\26\1\0\1\u0274"+
    "\10\26\2\0\1\26\24\0\23\26\11\0\12\26\1\0"+
    "\11\26\2\0\1\26\24\0\1\u0275\22\26\11\0\12\26"+
    "\1\0\5\26\1\u0276\3\26\2\0\1\26\24\0\23\26"+
    "\11\0\12\26\1\0\3\26\1\u0277\5\26\2\0\1\26"+
    "\24\0\23\26\26\0\1\u0278\154\0\1\u0279\36\0\1\u027a"+
    "\114\0\1\u027b\75\0\1\u027c\114\0\1\u027d\104\0\1\u027e"+
    "\114\0\1\u027f\77\0\1\u0280\114\0\1\u0281\146\0\1\u0282"+
    "\25\0\12\26\1\0\6\26\1\u0283\2\26\2\0\1\26"+
    "\24\0\23\26\11\0\12\26\1\0\3\26\1\u0284\5\26"+
    "\2\0\1\26\24\0\23\26\11\0\12\26\1\0\3\26"+
    "\1\u0285\5\26\2\0\1\26\24\0\23\26\11\0\12\26"+
    "\1\0\11\26\2\0\1\26\24\0\10\26\1\u0286\12\26"+
    "\11\0\12\26\1\0\11\26\2\0\1\26\24\0\6\26"+
    "\1\u0287\14\26\72\0\1\u0288\40\0\1\u0289\152\0\1\u028a"+
    "\45\0\1\u028b\70\0\12\26\1\0\3\26\1\u028c\5\26"+
    "\2\0\1\26\24\0\23\26\27\0\1\u028d\151\0\1\u028e"+
    "\25\0\12\26\1\0\10\26\1\u028f\2\0\1\26\24\0"+
    "\23\26\11\0\12\26\1\0\10\26\1\u0290\2\0\1\26"+
    "\24\0\23\26\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\3\0\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\20\1\1\11\1\1\1\11\3\1\1\11"+
    "\4\1\5\11\10\1\3\11\26\1\1\11\1\1\2\11"+
    "\3\1\4\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\10\1\1\0\2\1\1\0\37\1\2\11"+
    "\3\1\12\11\2\1\3\11\1\1\1\11\1\1\1\11"+
    "\23\1\10\0\1\11\15\0\1\1\2\0\1\11\4\1"+
    "\3\0\1\1\1\11\1\0\3\1\1\11\41\1\1\11"+
    "\7\1\1\11\1\1\1\11\27\1\27\0\2\1\1\11"+
    "\1\1\1\0\44\1\1\11\37\1\3\0\1\1\2\0"+
    "\1\11\1\0\1\11\16\0\1\1\1\0\75\1\1\0"+
    "\2\11\2\0\1\11\20\0\57\1\1\0\1\11\2\0"+
    "\1\11\1\0\2\11\2\0\1\11\10\0\36\1\3\0"+
    "\2\11\6\0\1\11\2\0\15\1\2\0\2\11\1\0"+
    "\3\11\1\0\2\11\5\1\1\0\2\11\1\0\1\1"+
    "\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[656];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final boolean DEBUG = true;

  public static final int PAWN_CELL_SIZE = 32;

  private static final char DEFAULT_ESCAPE_CHARACTER = '\\';
  private static final boolean DEFAULT_REQUIRE_SEMICOLONS = false;
  private static final boolean DEFAULT_REQUIRE_NEWDECLS = false;

  //ExtendedSyntaxStrCommentHandler longCommentOrStringHandler
  //    = new ExtendedSyntaxStrCommentHandler();

  private char escapeCharacter;
  private boolean requireSemicolons;
  private boolean requireNewDecls;

  private StringBuilder string = new StringBuilder(32);
  private char character;
  private Object value;

  public SourcePawnLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
    resetSemicolonsRequired();
    resetNewDeclsRequired();
  }

  public char getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(char escapeCharacter) {
    if (getEscapeCharacter() != escapeCharacter) {
      this.escapeCharacter = escapeCharacter;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", escapeCharacter);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(char ch) {
    return ch == getEscapeCharacter();
  }

  public boolean areSemicolonsRequired() {
    return requireSemicolons;
  }

  public void setSemicolonsRequired(boolean requireSemicolons) {
    if (areSemicolonsRequired() != requireSemicolons) {
      this.requireSemicolons = requireSemicolons;
      if (DEBUG) {
        if (requireSemicolons) {
          System.out.println("Semicolons are required");
        } else {
          System.out.println("Semicolons are no longer required");
        }
      }
    }
  }

  public void resetSemicolonsRequired() {
    setSemicolonsRequired(DEFAULT_REQUIRE_SEMICOLONS);
  }

  public boolean areNewDeclsRequired() {
    return requireNewDecls;
  }

  public void setNewDeclsRequired(boolean requireNewDecls) {
    if (areNewDeclsRequired() != requireNewDecls) {
      this.requireNewDecls = requireNewDecls;
      if (DEBUG) {
        if (requireNewDecls) {
          System.out.println("NewDecls are required");
        } else {
          System.out.println("NewDecls are no longer required");
        }
      }
    }
  }

  public void resetNewDeclsRequired() {
    setNewDeclsRequired(DEFAULT_REQUIRE_NEWDECLS);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SourcePawnLexer(java.io.Reader in) {
    switch (PAWN_CELL_SIZE) {
    case 16:
    case 32:
    case 64:
      break;
    default:
      throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
  }

  resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_PREPROCESSOR_PRAGMA_NEWDECLS: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 657: break;
            case IN_PRAGMA_DEPRECATED_STRING: {
              String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
            case 658: break;
            case IN_CHARACTER_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 659: break;
            case IN_STRING_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 660: break;
            case IN_LINE_COMMENT: {
              String text = string.toString();
                        value = text;
                        if (DEBUG) {
                          System.out.printf("line comment = '%s'%n", text);
                        }

                        yybegin(YYINITIAL);
                        yypushback(yylength());
                        return LINE_COMMENT;
            }
            case 661: break;
            case IN_BLOCK_COMMENT: {
              return BAD_CHARACTER;
            }
            case 662: break;
            case IN_DOC_COMMENT: {
              return BAD_CHARACTER;
            }
            case 663: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character * 10) + (ch - '0');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 194: break;
          case 2: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character << 4) + (ch - '0');
                                break;
                              case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                                character = (character << 4) + (ch - 'a');
                                break;
                              case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                                character = (character << 4) + (ch - 'A');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 195: break;
          case 3: 
            { return BAD_CHARACTER;
            }
          case 196: break;
          case 4: 
            { return WHITESPACE;
            }
          case 197: break;
          case 5: 
            { return NEW_LINE;
            }
          case 198: break;
          case 6: 
            { return LBRACKET;
            }
          case 199: break;
          case 7: 
            { return AT_SIGN;
            }
          case 200: break;
          case 8: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 16: value = (short)SourcePawnUtils.parseNumber(yytext()); break;
                          case 32: value = (int)SourcePawnUtils.parseNumber(yytext()); break;
                          case 64: value = (long)SourcePawnUtils.parseNumber(yytext()); break;
                          default: throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("number %s = %d%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }

                      return NUMBER_LITERAL;
            }
          case 201: break;
          case 9: 
            { return IDENTIFIER;
            }
          case 202: break;
          case 10: 
            { return SEMICOLON;
            }
          case 203: break;
          case 11: 
            { return UNDERSCORE;
            }
          case 204: break;
          case 12: 
            { return PERIOD;
            }
          case 205: break;
          case 13: 
            { return MINUS;
            }
          case 206: break;
          case 14: 
            { return AMPERSAND;
            }
          case 207: break;
          case 15: 
            { return ASSIGN;
            }
          case 208: break;
          case 16: 
            { return ASTERISK;
            }
          case 209: break;
          case 17: 
            { return CARET;
            }
          case 210: break;
          case 18: 
            { return COMMA;
            }
          case 211: break;
          case 19: 
            { return EXCLAMATION;
            }
          case 212: break;
          case 20: 
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 213: break;
          case 21: 
            { return PERCENT;
            }
          case 214: break;
          case 22: 
            { return PLUS;
            }
          case 215: break;
          case 23: 
            { return SLASH;
            }
          case 216: break;
          case 24: 
            { return TILDE;
            }
          case 217: break;
          case 25: 
            { return VERTICAL_BAR;
            }
          case 218: break;
          case 26: 
            { return GT;
            }
          case 219: break;
          case 27: 
            { return LT;
            }
          case 220: break;
          case 28: 
            { return LBRACE;
            }
          case 221: break;
          case 29: 
            { return RBRACE;
            }
          case 222: break;
          case 30: 
            { return RBRACKET;
            }
          case 223: break;
          case 31: 
            { return LPAREN;
            }
          case 224: break;
          case 32: 
            { return RPAREN;
            }
          case 225: break;
          case 33: 
            { string.setLength(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 226: break;
          case 34: 
            { string.setLength(0); yybegin(IN_STRING_LITERAL);
            }
          case 227: break;
          case 35: 
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 228: break;
          case 36: 
            { /* ignore whitespace */
            }
          case 229: break;
          case 37: 
            { string.append(yytext());
            }
          case 230: break;
          case 38: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
          case 231: break;
          case 39: 
            { character = yycharat(0);
                          if (isEscapeCharacter(character)) {
                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);
                          }
            }
          case 232: break;
          case 40: 
            { String text = Character.toString(character);
                          value = character;
                          if (DEBUG) {
                            System.out.printf("character = \'%s\'%n", text);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 233: break;
          case 41: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("string = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 234: break;
          case 42: 
            { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE);
            }
          case 235: break;
          case 43: 
            { character = yycharat(0);
                          if (character == 'x') {
                            yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);
                          } else {
                            switch(yycharat(0)) {
                              case 'a':
                                character = '\u0007';
                                break;
                              case 'b':
                                character = '\b';
                                break;
                              case 'e':
                                character = '\u001B';
                                break;
                              case 'f':
                                character = '\f';
                                break;
                              case 'n':
                                character = '\n';
                                break;
                              case 'r':
                                character = '\r';
                                break;
                              case 't':
                                character = '\t';
                                break;
                              case 'v':
                                character = '\u000B';
                                break;
                              default:
                                throw new AssertionError(
                                    "Unsupported control character: " + yycharat(0));
                            }

                            yybegin(IN_CHARACTER_LITERAL);
                          }
            }
          case 236: break;
          case 44: 
            { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 237: break;
          case 45: 
            { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL);
            }
          case 238: break;
          case 46: 
            { String text = string.toString();
                        value = text;
                        if (DEBUG) {
                          System.out.printf("line comment = '%s'%n", text);
                        }

                        yybegin(YYINITIAL);
                        yypushback(yylength());
                        return LINE_COMMENT;
            }
          case 239: break;
          case 47: 
            { string.append(' ');
            }
          case 240: break;
          case 48: 
            { 
            }
          case 241: break;
          case 49: 
            { return AS;
            }
          case 242: break;
          case 50: 
            { return RANGE;
            }
          case 243: break;
          case 51: 
            { return DECREMENT;
            }
          case 244: break;
          case 52: 
            { return SUBEQ;
            }
          case 245: break;
          case 53: 
            { return AND;
            }
          case 246: break;
          case 54: 
            { return ANDEQ;
            }
          case 247: break;
          case 55: 
            { return EQUALTO;
            }
          case 248: break;
          case 56: 
            { return MULEQ;
            }
          case 249: break;
          case 57: 
            { return XOREQ;
            }
          case 250: break;
          case 58: 
            { return NEQUALTO;
            }
          case 251: break;
          case 59: 
            { return MODEQ;
            }
          case 252: break;
          case 60: 
            { return ADDEQ;
            }
          case 253: break;
          case 61: 
            { return INCREMENT;
            }
          case 254: break;
          case 62: 
            { return DIVEQ;
            }
          case 255: break;
          case 63: 
            { string.setLength(0); yybegin(IN_BLOCK_COMMENT);
            }
          case 256: break;
          case 64: 
            { string.setLength(0); yybegin(IN_LINE_COMMENT);
            }
          case 257: break;
          case 65: 
            { return OREQ;
            }
          case 258: break;
          case 66: 
            { return OR;
            }
          case 259: break;
          case 67: 
            { return GTEQ;
            }
          case 260: break;
          case 68: 
            { return SRA;
            }
          case 261: break;
          case 69: 
            { return LTEQ;
            }
          case 262: break;
          case 70: 
            { return SL;
            }
          case 263: break;
          case 71: 
            { return SCOPE_RESOLUTION;
            }
          case 264: break;
          case 72: 
            { return IF;
            }
          case 265: break;
          case 73: 
            { return IN;
            }
          case 266: break;
          case 74: 
            { return DO;
            }
          case 267: break;
          case 75: 
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 268: break;
          case 76: 
            { if (isEscapeCharacter(yycharat(0))) {
                            char ctrl = yycharat(1);
                            switch (ctrl) {
                              case 'a':case 'b':case 'e':case 'f':
                              case 'n':case 'r':case 't':case 'v':
                              case 'x':
                              case '%':
                              case '"':
                              case '\'':
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                string.append(yytext());
                                break;
                              default:
                                if (isEscapeCharacter(ctrl)) {
                                  string.append(yytext());
                                  break;
                                }

                                yybegin(YYINITIAL);
                                return BAD_CHARACTER;
                            }
                          } else {
                            string.append(yycharat(0));
                            yypushback(1);
                          }
            }
          case 269: break;
          case 77: 
            { /* line continuation */
            }
          case 270: break;
          case 78: 
            { String text = string.toString();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("block comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              return BLOCK_COMMENT;
            }
          case 271: break;
          case 79: 
            { String text = string.toString();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("doc comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              return DOC_COMMENT;
            }
          case 272: break;
          case 80: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 32: value = (float)SourcePawnUtils.parseRational(yytext()); break;
                          case 64: value = (double)SourcePawnUtils.parseRational(yytext()); break;
                          default: throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("rational %s = %f%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }
            }
          case 273: break;
          case 81: 
            { return TRY;
            }
          case 274: break;
          case 82: 
            { return FOR;
            }
          case 275: break;
          case 83: 
            { return LET;
            }
          case 276: break;
          case 84: 
            { return ELLIPSIS;
            }
          case 277: break;
          case 85: 
            { return VAR;
            }
          case 278: break;
          case 86: 
            { string.setLength(0); yybegin(IN_DOC_COMMENT);
            }
          case 279: break;
          case 87: 
            { return SRAEQ;
            }
          case 280: break;
          case 88: 
            { return SRL;
            }
          case 281: break;
          case 89: 
            { return SLEQ;
            }
          case 282: break;
          case 90: 
            { return INT;
            }
          case 283: break;
          case 91: 
            { return NEW;
            }
          case 284: break;
          case 92: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { string.append(yytext());
            }
          case 285: break;
          case 93: 
            { return THIS;
            }
          case 286: break;
          case 94: 
            { return EXIT;
            }
          case 287: break;
          case 95: 
            { return ELSE;
            }
          case 288: break;
          case 96: 
            { return ENUM;
            }
          case 289: break;
          case 97: 
            { return VOID;
            }
          case 290: break;
          case 98: 
            { return SRLEQ;
            }
          case 291: break;
          case 99: 
            { return CASE;
            }
          case 292: break;
          case 100: 
            { return CHAR;
            }
          case 293: break;
          case 101: 
            { return INTN;
            }
          case 294: break;
          case 102: 
            { return INT8;
            }
          case 295: break;
          case 103: 
            { return NULL;
            }
          case 296: break;
          case 104: 
            { return DECL;
            }
          case 297: break;
          case 105: 
            { return WITH;
            }
          case 298: break;
          case 106: 
            { return GOTO;
            }
          case 299: break;
          case 107: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 300: break;
          case 108: 
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 301: break;
          case 109: 
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 302: break;
          case 110: 
            { return BREAK;
            }
          case 303: break;
          case 111: 
            { return TAGOF;
            }
          case 304: break;
          case 112: 
            { return THROW;
            }
          case 305: break;
          case 113: 
            { return USING;
            }
          case 306: break;
          case 114: 
            { return UINTN;
            }
          case 307: break;
          case 115: 
            { return UINT8;
            }
          case 308: break;
          case 116: 
            { return UNION;
            }
          case 309: break;
          case 117: 
            { return STOCK;
            }
          case 310: break;
          case 118: 
            { return SLEEP;
            }
          case 311: break;
          case 119: 
            { return CONST;
            }
          case 312: break;
          case 120: 
            { return CATCH;
            }
          case 313: break;
          case 121: 
            { return INT16;
            }
          case 314: break;
          case 122: 
            { return INT64;
            }
          case 315: break;
          case 123: 
            { return INT32;
            }
          case 316: break;
          case 124: 
            { return WHILE;
            }
          case 317: break;
          case 125: 
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 318: break;
          case 126: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ERROR;
            }
          case 319: break;
          case 127: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 320: break;
          case 128: 
            { return OBJECT;
            }
          case 321: break;
          case 129: 
            { return TYPEOF;
            }
          case 322: break;
          case 130: 
            { return RETURN;
            }
          case 323: break;
          case 131: 
            { return UINT16;
            }
          case 324: break;
          case 132: 
            { return UINT64;
            }
          case 325: break;
          case 133: 
            { return UINT32;
            }
          case 326: break;
          case 134: 
            { return ASSERT;
            }
          case 327: break;
          case 135: 
            { return STRUCT;
            }
          case 328: break;
          case 136: 
            { return STATIC;
            }
          case 329: break;
          case 137: 
            { return SEALED;
            }
          case 330: break;
          case 138: 
            { return SIZEOF;
            }
          case 331: break;
          case 139: 
            { return SWITCH;
            }
          case 332: break;
          case 140: 
            { return IMPORT;
            }
          case 333: break;
          case 141: 
            { return NATIVE;
            }
          case 334: break;
          case 142: 
            { return DOUBLE;
            }
          case 335: break;
          case 143: 
            { return DELETE;
            }
          case 336: break;
          case 144: 
            { return PUBLIC;
            }
          case 337: break;
          case 145: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 338: break;
          case 146: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 339: break;
          case 147: 
            { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE;
            }
          case 340: break;
          case 148: 
            { yybegin(IN_PREPROCESSOR_PRAGMA); return PREPROCESSOR_PRAGMA;
            }
          case 341: break;
          case 149: 
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 342: break;
          case 150: 
            { return BUILTIN;
            }
          case 343: break;
          case 151: 
            { return TYPESET;
            }
          case 344: break;
          case 152: 
            { return TYPEDEF;
            }
          case 345: break;
          case 153: 
            { return FOREACH;
            }
          case 346: break;
          case 154: 
            { return FORWARD;
            }
          case 347: break;
          case 155: 
            { return FUNCTAG;
            }
          case 348: break;
          case 156: 
            { return FINALLY;
            }
          case 349: break;
          case 157: 
            { return ACQUIRE;
            }
          case 350: break;
          case 158: 
            { return VARIANT;
            }
          case 351: break;
          case 159: 
            { return VIRTUAL;
            }
          case 352: break;
          case 160: 
            { return VIEW_AS;
            }
          case 353: break;
          case 161: 
            { return CELLSOF;
            }
          case 354: break;
          case 162: 
            { return CAST_TO;
            }
          case 355: break;
          case 163: 
            { return DEFAULT;
            }
          case 356: break;
          case 164: 
            { return DEFINED;
            }
          case 357: break;
          case 165: 
            { return PRIVATE;
            }
          case 358: break;
          case 166: 
            { return PACKAGE;
            }
          case 359: break;
          case 167: 
            { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE;
            }
          case 360: break;
          case 168: 
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 361: break;
          case 169: 
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 362: break;
          case 170: 
            { return OPERATOR;
            }
          case 363: break;
          case 171: 
            { return READONLY;
            }
          case 364: break;
          case 172: 
            { return EXPLICIT;
            }
          case 365: break;
          case 173: 
            { return FUNCTION;
            }
          case 366: break;
          case 174: 
            { return FUNCENUM;
            }
          case 367: break;
          case 175: 
            { return VOLATILE;
            }
          case 368: break;
          case 176: 
            { return CONTINUE;
            }
          case 369: break;
          case 177: 
            { return IMPLICIT;
            }
          case 370: break;
          case 178: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 371: break;
          case 179: 
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 372: break;
          case 180: 
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 373: break;
          case 181: 
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 374: break;
          case 182: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return PRAGMA_NEWDECLS;
            }
          case 375: break;
          case 183: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL;
            }
          case 376: break;
          case 184: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED;
            }
          case 377: break;
          case 185: 
            { return INTERFACE;
            }
          case 378: break;
          case 186: 
            { return NAMESPACE;
            }
          case 379: break;
          case 187: 
            { return METHODMAP;
            }
          case 380: break;
          case 188: 
            { return PROTECTED;
            }
          case 381: break;
          case 189: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 382: break;
          case 190: 
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 383: break;
          case 191: 
            { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE;
            }
          case 384: break;
          case 192: 
            { string.setLength(0);
                      yybegin(IN_PRAGMA_DEPRECATED_STRING);
                      return PRAGMA_DEPRECATED;
            }
          case 385: break;
          case 193: 
            { return NULLABLE;
            }
          case 386: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
