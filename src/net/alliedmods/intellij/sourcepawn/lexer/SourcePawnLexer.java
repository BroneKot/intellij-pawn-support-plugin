/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;

import org.jetbrains.annotations.NotNull;

import java.io.Reader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*;
import net.alliedmods.intellij.sourcepawn.SourcePawnUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PREPROCESSOR = 2;
  public static final int IN_PREPROCESSOR_PRAGMA_PRE = 4;
  public static final int IN_PREPROCESSOR_PRAGMA = 6;
  public static final int IN_PRAGMA_DEPRECATED_STRING_PRE = 8;
  public static final int IN_PRAGMA_DEPRECATED_STRING = 10;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE = 12;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS = 14;
  public static final int IN_CASE = 16;
  public static final int IN_CHARACTER_LITERAL = 18;
  public static final int IN_STRING_LITERAL = 20;
  public static final int IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE = 22;
  public static final int IN_CHARACTER_LITERAL_DECIMAL_ESCAPE = 24;
  public static final int IN_CHARACTER_LITERAL_UNICODE_ESCAPE = 26;
  public static final int IN_LINE_COMMENT = 28;
  public static final int IN_BLOCK_COMMENT = 30;
  public static final int IN_DOC_COMMENT_PRE = 32;
  public static final int IN_DOC_COMMENT = 34;
  public static final int IN_DOC_COMMENT_POST = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\43\1\105\1\44\1\0\1\45\1\35\1\104\1\57"+
    "\1\60\1\37\1\46\1\42\1\33\1\32\1\47\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\41\1\20\1\53\1\36\1\52\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\40"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\51\1\55\1\50\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\12\0\1\3\1\4\2\5\1\6"+
    "\1\3\1\7\1\10\1\11\1\10\2\11\1\12\10\11"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\10\11\1\42\1\43\12\44\1\45\10\44\1\46\1\44"+
    "\2\47\2\50\2\47\1\51\1\44\1\52\6\44\1\53"+
    "\1\54\1\55\2\47\1\56\1\57\1\60\1\61\1\62"+
    "\2\1\2\2\1\47\2\63\1\47\1\64\1\47\2\65"+
    "\1\66\1\47\2\64\1\47\1\67\7\0\1\4\1\10"+
    "\2\0\3\10\22\11\1\70\10\11\1\0\1\71\1\72"+
    "\1\73\3\11\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\4\11\1\117\1\120"+
    "\4\11\1\121\10\11\10\0\1\122\4\0\1\45\12\0"+
    "\1\46\1\0\1\47\1\0\2\52\1\0\1\51\1\0"+
    "\1\52\5\0\1\123\2\124\2\125\1\2\1\64\1\126"+
    "\1\0\1\127\3\0\1\130\4\0\1\131\1\132\4\11"+
    "\1\133\15\11\1\134\4\11\1\135\10\11\1\136\1\137"+
    "\2\11\1\140\2\11\1\107\1\141\1\142\1\143\1\144"+
    "\5\11\1\145\2\11\1\146\16\11\25\0\1\47\3\0"+
    "\1\147\4\0\6\11\1\150\6\11\1\151\1\11\1\152"+
    "\1\153\17\11\1\154\3\11\1\155\5\11\1\156\1\157"+
    "\2\11\1\160\1\161\4\11\1\162\6\11\1\163\5\11"+
    "\1\164\1\11\1\165\3\0\1\166\2\0\1\167\1\0"+
    "\1\170\14\0\2\171\2\0\1\65\1\131\1\0\1\172"+
    "\3\11\1\173\1\174\5\11\1\175\1\11\1\176\1\177"+
    "\2\11\1\200\10\11\1\201\3\11\1\202\10\11\1\203"+
    "\1\11\1\204\1\11\1\205\1\11\1\206\1\207\15\11"+
    "\1\210\1\0\1\211\1\212\2\0\1\213\20\0\1\11"+
    "\1\214\1\11\1\215\2\11\1\216\1\11\1\217\1\220"+
    "\1\221\7\11\1\222\1\11\1\223\1\224\1\225\1\226"+
    "\1\227\11\11\1\230\1\11\1\231\1\11\1\232\2\11"+
    "\1\233\3\11\1\234\1\11\1\0\1\235\2\0\1\236"+
    "\1\0\1\237\1\240\2\0\1\241\10\0\1\242\1\11"+
    "\1\243\1\244\2\11\1\245\1\246\1\247\2\11\1\250"+
    "\1\251\2\11\1\252\1\253\1\254\1\11\1\255\1\256"+
    "\3\11\1\257\1\260\2\11\1\261\1\262\3\0\1\263"+
    "\1\264\6\0\1\265\2\0\1\266\1\267\1\270\1\271"+
    "\1\272\1\11\1\273\1\274\1\11\1\275\3\11\2\0"+
    "\1\276\1\277\1\0\1\300\1\301\1\302\1\0\1\303"+
    "\1\304\1\11\1\305\1\306\1\307\1\310\1\0\1\311"+
    "\1\312\1\0\1\11\1\313\1\314\1\11\1\315";

  private static int [] zzUnpackAction() {
    int [] result = new int[712];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u06a8\0\u0736\0\u06a8\0\u077d\0\u07c4\0\u080b"+
    "\0\u0852\0\u0899\0\u08e0\0\u0927\0\u06a8\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u06a8\0\u0e25"+
    "\0\u06a8\0\u0e6c\0\u0eb3\0\u0efa\0\u06a8\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u1016\0\u105d\0\u10a4"+
    "\0\u10eb\0\u1132\0\u1179\0\u11c0\0\u1207\0\u06a8\0\u06a8\0\u06a8"+
    "\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677"+
    "\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u06a8\0\u1868"+
    "\0\u18af\0\u06a8\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u077d\0\u1aa0\0\u1ae7\0\u06a8\0\u06a8\0\u06a8\0\u1b2e\0\u1b75"+
    "\0\u1b2e\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u1bbc\0\u06a8\0\u1c03"+
    "\0\u06a8\0\u1c4a\0\u06a8\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad"+
    "\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u06a8\0\u1f9e"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u077d\0\u2101\0\u2148"+
    "\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8"+
    "\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u06a8\0\u06a8\0\u2afd\0\u2b44\0\u2b8b\0\u06a8"+
    "\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u06a8\0\u06a8"+
    "\0\u06a8\0\u06a8\0\u2bd2\0\u2c19\0\u06a8\0\u06a8\0\u06a8\0\u2c60"+
    "\0\u06a8\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u0852\0\u2e0a"+
    "\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u06a8\0\u3424\0\u346b"+
    "\0\u34b2\0\u1514\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c"+
    "\0\u36a3\0\u36ea\0\u3731\0\u3778\0\u1793\0\u37bf\0\u3806\0\u384d"+
    "\0\u3894\0\u38db\0\u3922\0\u193d\0\u3969\0\u19cb\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u1ae7\0\u3a85\0\u3acc\0\u3b13\0\u06a8\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u3c76\0\u06a8\0\u3cbd\0\u06a8\0\u1e82\0\u3d04"+
    "\0\u1f57\0\u06a8\0\u3d4b\0\u3d92\0\u202c\0\u06a8\0\u3dd9\0\u06a8"+
    "\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u0852\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202"+
    "\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u0852"+
    "\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b"+
    "\0\u06a8\0\u06a8\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5"+
    "\0\u481c\0\u06a8\0\u4863\0\u06a8\0\u48aa\0\u48f1\0\u4938\0\u497f"+
    "\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b\0\u0852\0\u4ae2\0\u4b29\0\u4b70"+
    "\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\u4da8"+
    "\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0"+
    "\0\u5027\0\u506e\0\u50b5\0\u50fc\0\u5143\0\u518a\0\u51d1\0\u5218"+
    "\0\u525f\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450"+
    "\0\u5450\0\u5497\0\u54de\0\u5525\0\u06a8\0\u3b5a\0\u556c\0\u3c76"+
    "\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716\0\u575d\0\u0852"+
    "\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u0852\0\u594e"+
    "\0\u0852\0\u0852\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8"+
    "\0\u5b3f\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u5ca2\0\u5ce9\0\u5d30"+
    "\0\u5d77\0\u0852\0\u5dbe\0\u5e05\0\u5e4c\0\u06a8\0\u5e93\0\u5eda"+
    "\0\u5f21\0\u5f68\0\u5faf\0\u0852\0\u0852\0\u5ff6\0\u603d\0\u0852"+
    "\0\u0852\0\u6084\0\u60cb\0\u6112\0\u6159\0\u0852\0\u61a0\0\u61e7"+
    "\0\u622e\0\u6275\0\u62bc\0\u6303\0\u0852\0\u634a\0\u6391\0\u63d8"+
    "\0\u641f\0\u6466\0\u0852\0\u64ad\0\u0852\0\u64f4\0\u653b\0\u6582"+
    "\0\u65c9\0\u6610\0\u6657\0\u06a8\0\u669e\0\u06a8\0\u66e5\0\u672c"+
    "\0\u6773\0\u67ba\0\u6801\0\u6848\0\u688f\0\u68d6\0\u691d\0\u6964"+
    "\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u556c\0\u6b55"+
    "\0\u6b55\0\u0852\0\u6b9c\0\u6be3\0\u6c2a\0\u0852\0\u0852\0\u6c71"+
    "\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u0852\0\u6dd4\0\u0852\0\u0852"+
    "\0\u6e1b\0\u6e62\0\u0852\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u6fc5"+
    "\0\u700c\0\u7053\0\u709a\0\u0852\0\u70e1\0\u7128\0\u716f\0\u0852"+
    "\0\u71b6\0\u71fd\0\u7244\0\u728b\0\u72d2\0\u7319\0\u7360\0\u73a7"+
    "\0\u0852\0\u73ee\0\u0852\0\u7435\0\u0852\0\u747c\0\u0852\0\u0852"+
    "\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df\0\u7626\0\u766d\0\u76b4"+
    "\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u0852\0\u785e\0\u06a8"+
    "\0\u06a8\0\u78a5\0\u78ec\0\u06a8\0\u7933\0\u797a\0\u79c1\0\u7a08"+
    "\0\u7a4f\0\u7a96\0\u7add\0\u7b24\0\u7b6b\0\u7bb2\0\u7bf9\0\u7c40"+
    "\0\u7c87\0\u7cce\0\u7d15\0\u7d5c\0\u7da3\0\u0852\0\u7dea\0\u0852"+
    "\0\u7e31\0\u7e78\0\u0852\0\u7ebf\0\u0852\0\u0852\0\u0852\0\u7f06"+
    "\0\u7f4d\0\u7f94\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u0852\0\u80f7"+
    "\0\u0852\0\u0852\0\u0852\0\u0852\0\u0852\0\u813e\0\u8185\0\u81cc"+
    "\0\u8213\0\u825a\0\u82a1\0\u82e8\0\u832f\0\u8376\0\u0852\0\u83bd"+
    "\0\u0852\0\u8404\0\u0852\0\u844b\0\u8492\0\u0852\0\u84d9\0\u8520"+
    "\0\u8567\0\u0852\0\u85ae\0\u85f5\0\u06a8\0\u863c\0\u8683\0\u06a8"+
    "\0\u86ca\0\u06a8\0\u06a8\0\u8711\0\u8758\0\u06a8\0\u879f\0\u87e6"+
    "\0\u882d\0\u8874\0\u88bb\0\u8902\0\u8949\0\u8990\0\u0852\0\u89d7"+
    "\0\u0852\0\u0852\0\u8a1e\0\u8a65\0\u0852\0\u0852\0\u0852\0\u8aac"+
    "\0\u8af3\0\u0852\0\u0852\0\u8b3a\0\u8b81\0\u0852\0\u0852\0\u0852"+
    "\0\u8bc8\0\u0852\0\u0852\0\u8c0f\0\u8c56\0\u8c9d\0\u0852\0\u0852"+
    "\0\u8ce4\0\u8d2b\0\u0852\0\u0852\0\u8d72\0\u8db9\0\u8e00\0\u06a8"+
    "\0\u06a8\0\u8e47\0\u8e8e\0\u8ed5\0\u8f1c\0\u8f63\0\u8faa\0\u06a8"+
    "\0\u8ff1\0\u9038\0\u0852\0\u0852\0\u0852\0\u0852\0\u0852\0\u907f"+
    "\0\u0852\0\u0852\0\u90c6\0\u0852\0\u910d\0\u9154\0\u919b\0\u91e2"+
    "\0\u9229\0\u06a8\0\u06a8\0\u9270\0\u06a8\0\u06a8\0\u06a8\0\u92b7"+
    "\0\u06a8\0\u06a8\0\u92fe\0\u0852\0\u0852\0\u0852\0\u0852\0\u9345"+
    "\0\u06a8\0\u06a8\0\u938c\0\u93d3\0\u06a8\0\u06a8\0\u941a\0\u0852";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[712];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\2\40\1\41\1\42\1\43\1\44\1\41\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\41\1\107\1\41\1\110\1\41\1\111\1\112"+
    "\1\113\1\41\1\114\1\115\5\40\2\41\1\116\1\117"+
    "\1\31\21\120\1\121\1\120\1\122\1\123\1\124\1\125"+
    "\1\126\33\120\1\127\3\120\1\130\1\120\1\131\16\120"+
    "\1\132\3\120\1\133\122\120\1\134\1\135\1\136\4\120"+
    "\1\137\30\120\1\140\3\120\1\141\1\120\1\142\20\120"+
    "\1\143\3\120\1\144\101\120\1\145\1\146\1\147\1\150"+
    "\1\145\1\151\100\145\1\152\1\120\1\153\3\120\1\154"+
    "\102\120\1\155\3\120\1\156\10\120\1\157\3\120\1\160"+
    "\65\120\1\32\3\120\1\161\1\162\1\120\1\163\2\120"+
    "\1\163\1\120\3\163\1\120\10\163\1\162\2\120\1\163"+
    "\24\120\14\163\5\120\2\163\3\120\2\164\2\165\100\164"+
    "\1\166\1\164\1\165\2\167\2\165\1\167\1\170\77\167"+
    "\1\171\10\165\1\172\1\165\2\172\1\165\1\172\1\173"+
    "\1\165\1\173\1\165\2\173\1\165\3\173\5\165\1\173"+
    "\10\165\1\174\17\165\1\173\7\165\5\172\2\165\2\174"+
    "\1\165\7\175\1\176\1\175\2\176\1\175\1\176\3\175"+
    "\1\177\54\175\5\176\14\175\1\200\1\175\5\200\2\175"+
    "\1\201\3\175\3\200\32\175\1\200\5\175\1\200\5\175"+
    "\5\200\5\175\1\152\1\202\1\203\1\204\104\152\1\205"+
    "\2\206\33\152\1\207\51\152\1\210\1\211\33\152\1\212"+
    "\50\152\1\213\1\214\1\215\33\152\1\216\47\152\107\217"+
    "\6\0\1\220\1\0\1\221\2\0\1\221\1\0\3\221"+
    "\1\0\10\221\1\220\2\0\1\221\24\0\14\221\5\0"+
    "\2\221\44\0\1\222\106\0\1\25\45\0\2\223\2\0"+
    "\102\223\2\0\1\30\1\224\1\225\213\0\1\32\3\0"+
    "\1\226\103\0\1\33\105\0\1\226\1\32\1\227\111\0"+
    "\12\41\1\0\11\41\2\0\1\41\24\0\23\41\12\0"+
    "\1\230\1\0\2\230\1\0\1\230\14\0\1\230\1\231"+
    "\42\0\5\230\13\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\12\0\1\230\1\0\2\230"+
    "\1\0\1\230\1\233\1\234\1\235\11\0\1\230\1\231"+
    "\42\0\5\230\13\0\12\41\1\0\1\41\1\236\1\237"+
    "\6\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\7\41\1\240\2\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\10\41\1\241\12\41\11\0\12\41\1\0"+
    "\1\41\1\242\3\41\1\243\3\41\2\0\1\41\4\0"+
    "\1\232\17\0\5\41\1\244\3\41\1\245\11\41\11\0"+
    "\12\41\1\0\3\41\1\246\5\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\7\41\1\247"+
    "\1\41\2\0\1\41\4\0\1\232\17\0\2\41\1\250"+
    "\1\41\1\251\16\41\11\0\11\41\1\252\1\0\6\41"+
    "\1\253\2\41\2\0\1\41\4\0\1\232\17\0\4\41"+
    "\1\254\16\41\11\0\10\41\1\255\1\41\1\0\2\41"+
    "\1\256\6\41\2\0\1\41\4\0\1\232\17\0\2\41"+
    "\1\257\20\41\11\0\12\41\1\0\7\41\1\260\1\41"+
    "\2\0\1\41\4\0\1\232\17\0\1\261\22\41\11\0"+
    "\12\41\1\0\3\41\1\262\5\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\1\263\2\41"+
    "\1\264\2\41\1\265\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\2\41\1\266\7\41\1\267\10\41\11\0\12\41"+
    "\1\0\10\41\1\270\2\0\1\41\4\0\1\271\17\0"+
    "\23\41\35\0\1\272\107\0\1\273\2\0\1\274\56\0"+
    "\10\41\1\275\1\41\1\0\5\41\1\276\3\41\2\0"+
    "\1\41\4\0\1\232\17\0\2\41\1\277\20\41\40\0"+
    "\1\300\1\301\106\0\1\302\106\0\1\303\106\0\1\304"+
    "\111\0\1\305\103\0\1\306\106\0\1\307\106\0\1\310"+
    "\7\0\1\311\76\0\1\312\1\313\7\0\1\314\75\0"+
    "\1\315\12\0\1\316\73\0\1\317\13\0\1\320\72\0"+
    "\1\321\14\0\1\322\41\0\10\41\1\323\1\41\1\0"+
    "\3\41\1\324\1\41\1\325\3\41\2\0\1\41\4\0"+
    "\1\232\17\0\5\41\1\326\15\41\11\0\12\41\1\0"+
    "\4\41\1\327\4\41\2\0\1\41\4\0\1\232\17\0"+
    "\4\41\1\330\2\41\1\331\13\41\11\0\12\41\1\0"+
    "\2\41\1\332\1\333\1\41\1\334\3\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\10\41\1\335\1\41"+
    "\1\0\3\41\1\336\5\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\3\41\1\337\5\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\1\41\1\340\1\341\2\41\1\342\3\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\2\41\1\343"+
    "\2\41\1\344\15\41\11\0\10\41\1\345\1\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\23\41\25\0"+
    "\1\346\151\0\1\347\43\0\1\350\4\0\1\351\35\0"+
    "\1\352\104\0\1\353\53\0\1\354\141\0\1\355\50\0"+
    "\1\356\37\0\1\357\45\0\1\360\104\0\1\361\65\0"+
    "\1\132\3\0\1\362\102\0\1\362\1\132\1\363\131\0"+
    "\1\364\106\0\1\365\145\0\1\366\45\0\1\367\100\0"+
    "\1\370\2\0\1\371\111\0\1\372\106\0\1\373\45\0"+
    "\1\374\15\0\1\143\3\0\1\375\102\0\1\375\1\143"+
    "\1\376\104\0\1\377\105\0\1\152\1\u0100\1\147\1\150"+
    "\102\152\3\0\1\147\105\0\1\u0101\1\u0102\1\u0103\104\0"+
    "\1\153\3\0\1\u0104\102\0\1\u0104\1\153\1\u0105\104\0"+
    "\1\155\3\0\1\u0106\102\0\1\u0106\1\155\1\u0107\174\0"+
    "\1\u0108\41\0\1\u0109\70\0\12\u010a\1\0\11\u010a\2\0"+
    "\1\u010a\24\0\23\u010a\4\0\1\u010b\3\0\1\u010c\12\u010a"+
    "\1\0\11\u010a\2\0\1\u010a\4\0\1\u010d\17\0\23\u010a"+
    "\3\0\2\u010e\2\0\102\u010e\1\0\1\u010e\1\u010f\1\u0110"+
    "\1\u0111\102\u010e\10\0\1\176\1\0\2\176\1\0\1\176"+
    "\3\0\1\177\54\0\5\176\14\0\1\u0112\1\0\5\u0112"+
    "\2\0\1\201\3\0\3\u0112\32\0\1\u0112\5\0\1\u0112"+
    "\5\0\5\u0112\5\0\1\152\1\202\1\203\1\204\102\152"+
    "\3\0\1\203\104\0\1\152\1\205\2\206\33\152\1\207"+
    "\46\152\2\0\1\u0113\2\206\152\0\1\u0114\40\0\1\u0115"+
    "\106\0\1\u0115\1\210\106\0\1\210\1\211\33\0\1\212"+
    "\7\0\1\u0116\40\0\1\u0117\1\214\1\215\104\0\1\u0118"+
    "\106\0\1\u0118\1\214\143\0\1\u0119\7\0\1\u011a\45\0"+
    "\12\221\1\0\11\221\2\0\1\221\24\0\23\221\4\0"+
    "\1\222\1\u011b\1\u011c\104\0\1\u011d\106\0\1\225\1\0"+
    "\1\225\1\0\1\u011e\102\0\1\225\3\0\1\u011e\102\0"+
    "\2\32\2\0\1\226\110\0\1\230\1\0\2\230\1\0"+
    "\1\230\14\0\1\230\43\0\5\230\14\0\1\u011f\1\0"+
    "\2\u011f\1\0\1\u011f\60\0\5\u011f\5\0\41\u0120\1\0"+
    "\45\u0120\11\0\1\233\2\0\1\233\14\0\1\233\66\0"+
    "\2\234\1\0\1\234\14\0\1\234\44\0\4\234\14\0"+
    "\1\235\1\0\5\235\6\0\3\235\2\0\1\235\27\0"+
    "\1\235\5\0\1\235\5\0\5\235\13\0\12\41\1\0"+
    "\3\41\1\u0121\5\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\2\41\1\u0122\20\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\21\41\1\u0123"+
    "\1\41\11\0\12\41\1\0\3\41\1\u0124\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\11\41\1\u0125"+
    "\11\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\13\41\1\u0126\7\41\11\0\12\41\1\0"+
    "\1\41\1\u0127\7\41\2\0\1\41\4\0\1\232\17\0"+
    "\2\41\1\u0128\20\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\10\41\1\u0129\12\41\11\0"+
    "\12\41\1\0\1\u012a\4\41\1\u012b\3\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\2\41\1\u012c\20\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\4\41\1\u012d\16\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\2\41\1\u012e\20\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\2\41\1\u012f\5\41\1\u0130\12\41\11\0\12\41"+
    "\1\0\7\41\1\u0131\1\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\2\41\1\u0132\6\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\1\41\1\u0133\7\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\4\41\1\u0134\16\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\4\41"+
    "\1\u0135\16\41\11\0\12\41\1\0\7\41\1\u0136\1\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\1\41"+
    "\1\u0137\21\41\11\0\12\41\1\0\1\u0138\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\10\41\1\u0139"+
    "\1\41\1\0\1\41\1\u013a\3\41\1\u013b\3\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\5\41\1\u013c\3\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\3\41\1\u013d\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\22\41\1\u013e"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\2\41\1\u013f\20\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\4\41\1\u0140\16\41"+
    "\3\0\41\u0141\1\0\45\u0141\32\0\1\u0142\62\0\12\41"+
    "\1\0\6\41\1\u0143\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\2\41\1\u0144\20\41\11\0\12\41\1\0\1\41"+
    "\1\u0145\7\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\1\41\1\u0146\1\41\1\u0147\5\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\4\0\1\u0148"+
    "\35\0\1\u0149\50\0\1\314\143\0\1\u014a\13\0\1\u014b"+
    "\72\0\1\u014c\56\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\4\41\1\u014d\16\41\11\0\12\41"+
    "\1\0\6\41\1\u014e\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\1\u014f\6\41\1\u0150"+
    "\1\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\5\41\1\u0151\3\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\1\u0152\10\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\10\41"+
    "\1\u0153\12\41\11\0\12\41\1\0\6\41\1\u0154\2\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\12\41"+
    "\1\u0155\10\41\11\0\12\41\1\0\1\u0156\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\7\41\1\u0157\13\41\11\0"+
    "\12\41\1\0\2\41\1\u0158\6\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\4\41\1\u0159"+
    "\1\41\1\u015a\2\41\2\0\1\41\4\0\1\232\17\0"+
    "\1\u015b\22\41\11\0\12\41\1\0\1\u015c\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\10\41\1\u015d"+
    "\1\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\2\41\1\u015e\20\41\11\0\7\41\1\u015f\2\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\1\u0160\22\41\11\0\12\41\1\0\1\u0161\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\2\41\1\u0162"+
    "\20\41\11\0\12\41\1\0\1\u0163\10\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\75\0\1\u0164\103\0\1\u0165"+
    "\41\0\1\u0166\114\0\1\u0167\145\0\1\u0168\46\0\1\u0169"+
    "\107\0\1\u016a\143\0\1\u016b\102\0\1\u016c\52\0\1\u016d"+
    "\107\0\1\u016e\61\0\2\132\2\0\1\362\116\0\1\u016f"+
    "\112\0\1\u0170\110\0\1\u0171\153\0\1\u0172\105\0\1\u0173"+
    "\41\0\1\u0174\157\0\1\u0175\104\0\1\u0176\102\0\1\u0177"+
    "\22\0\2\143\2\0\1\375\102\0\1\377\3\0\1\u0178"+
    "\101\0\1\152\1\u0100\1\147\1\150\1\152\1\u0179\100\152"+
    "\2\0\1\u0101\1\u0102\1\u0103\1\0\1\u0178\102\0\1\u0102"+
    "\106\0\2\u0102\105\0\2\153\2\0\1\u0104\102\0\2\155"+
    "\2\0\1\u0106\122\0\1\u017a\147\0\1\u017b\25\0\1\u010b"+
    "\3\0\1\u010c\33\0\1\u010d\46\0\1\u010c\1\u010b\1\u017c"+
    "\144\0\1\u017d\46\0\1\u017e\1\u0110\1\u0111\104\0\1\u0110"+
    "\106\0\2\u0110\124\0\1\201\67\0\1\u0113\106\0\1\u0115"+
    "\35\0\1\u017f\50\0\1\u0118\35\0\1\u0180\50\0\1\u011c"+
    "\1\0\1\u011c\1\0\1\222\102\0\1\u011c\3\0\1\222"+
    "\125\0\1\u0181\70\0\12\41\1\0\5\41\1\u0182\3\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\6\41\1\u0183\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\3\41\1\u0184\5\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\1\41\1\u0185\7\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\10\41\1\u0186\1\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\10\41"+
    "\1\u0187\1\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\7\41\1\u0188\1\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\3\41\1\u0189\5\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\2\41\1\u018a\6\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\6\41"+
    "\1\u018b\14\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\4\41\1\u018c\16\41\11\0\12\41"+
    "\1\0\1\u018d\10\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\10\41\1\u018e\1\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\1\u018f\10\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\6\41\1\u0190\2\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\3\41"+
    "\1\u0191\5\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\7\41\1\u0192\13\41\11\0\12\41\1\0\3\41"+
    "\1\u0193\5\41\2\0\1\41\4\0\1\232\17\0\12\41"+
    "\1\u0194\10\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\1\u0195\22\41\11\0\12\41\1\0"+
    "\5\41\1\u0196\3\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\3\41\1\u0197\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\2\41\1\u0198\6\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\1\u0199\22\41\11\0\12\41\1\0\2\41"+
    "\1\u019a\6\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\1\u019b\10\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\6\41\1\u019c"+
    "\2\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\3\41\1\u019d\5\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\3\41\1\u019e"+
    "\5\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\1\u019f\10\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\2\41\1\u01a0\6\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\5\41\1\u01a1\3\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\6\41\1\u01a2\14\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\2\41"+
    "\1\u01a3\20\41\11\0\12\41\1\0\1\u01a4\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\12\41\1\u01a5"+
    "\10\41\4\0\1\u0148\106\0\1\u0149\143\0\1\u01a6\56\0"+
    "\12\41\1\0\1\u01a7\6\41\1\u01a8\1\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\6\41"+
    "\1\u01a9\2\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\1\u01aa\22\41\11\0\12\41\1\0\1\u01ab\2\41"+
    "\1\u01ac\5\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\1\41\1\u01ad\7\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\3\41\1\u01ae\6\41"+
    "\1\0\3\41\1\u01af\5\41\2\0\1\41\4\0\1\232"+
    "\17\0\4\41\1\u01b0\7\41\1\u01b1\1\u01b2\1\u01b3\4\41"+
    "\11\0\10\41\1\u01b4\1\41\1\0\6\41\1\u01b5\2\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\6\41\1\u01b6\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\2\41\1\u01b7\20\41\11\0\12\41"+
    "\1\0\3\41\1\u01b8\5\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\7\41\1\u01b9\2\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\5\41\1\u01ba\3\41\2\0\1\41\4\0\1\232"+
    "\17\0\2\41\1\u01bb\20\41\11\0\12\41\1\0\3\41"+
    "\1\u01bc\5\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\6\41\1\u01bd\2\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\5\41\1\u01be\15\41"+
    "\11\0\12\41\1\0\1\u01bf\10\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\u01c0\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\6\41\1\u01c1\2\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\3\41\1\u01c2\17\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\5\41\1\u01c3"+
    "\15\41\11\0\12\41\1\0\6\41\1\u01c4\2\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\10\41\1\u01c5"+
    "\1\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\66\0\1\u01c6\47\0\1\u01c7\100\0\1\u01c8\114\0"+
    "\1\u01c9\112\0\1\u01ca\32\0\1\u01cb\47\0\1\u01cc\106\0"+
    "\1\u01cd\106\0\1\u01ce\111\0\1\u01cf\142\0\1\u01d0\117\0"+
    "\1\u01d1\42\0\1\u01d2\141\0\1\u01d3\53\0\1\u01d4\141\0"+
    "\1\u01d5\47\0\1\u01d6\111\0\1\u01d7\146\0\1\u01d8\41\0"+
    "\1\u01d9\112\0\1\u01da\61\0\1\u0178\1\u01db\1\u01dc\166\0"+
    "\1\u01dd\46\0\1\u01de\64\0\2\u010b\2\0\1\u010c\33\0"+
    "\1\u010d\46\0\1\u01df\114\0\1\u01e0\1\0\2\u01e0\1\0"+
    "\1\u01e0\16\0\1\u01e1\41\0\5\u01e0\13\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\3\41\1\u01e2"+
    "\17\41\11\0\12\41\1\0\1\u01e3\10\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\1\u01e4\22\41\11\0"+
    "\12\41\1\0\5\41\1\u01e5\3\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\4\41\1\u01e6"+
    "\4\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\12\41\1\u01e7\10\41\11\0\10\41\1\u01e8\1\41\1\0"+
    "\7\41\1\u01e9\1\41\2\0\1\41\4\0\1\232\17\0"+
    "\6\41\1\u01ea\14\41\11\0\12\41\1\0\1\41\1\u01eb"+
    "\7\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\10\41\1\u01ec\1\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\13\41\1\u01ed\7\41\11\0"+
    "\3\41\1\u01ee\6\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\4\41\1\u01ef\7\41\1\u01f0\1\u01f1\1\u01f2"+
    "\4\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\4\41\1\u01f3\16\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\2\41\1\u01f4"+
    "\20\41\11\0\12\41\1\0\5\41\1\u01f5\3\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\5\41\1\u01f6\3\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\1\u01f7\2\41\1\u01f8\5\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\6\41\1\u01f9\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\1\41\1\u01fa\7\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\2\41"+
    "\1\u01fb\20\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\3\41\1\u01fc\17\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\1\u01fd"+
    "\22\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\2\41\1\u01fe\20\41\11\0\12\41\1\0"+
    "\3\41\1\u01ff\5\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\10\41\1\u0200\12\41\11\0\10\41\1\u0201"+
    "\1\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\1\u0202\22\41\11\0\12\41\1\0\6\41"+
    "\1\u0203\2\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\1\u0204\10\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\5\41\1\u0205"+
    "\3\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\2\41\1\u0206\6\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\10\41\1\u0207"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\2\41"+
    "\1\u0208\20\41\11\0\12\41\1\0\1\u0209\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\7\41\1\u020a\1\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\5\41\1\u020b\15\41\11\0\12\41\1\0"+
    "\10\41\1\u020c\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\15\41\1\u020d\5\41\11\0\12\41\1\0\1\41"+
    "\1\u020e\7\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\20\41\1\u020f\2\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\17\41\1\u0210\3\41"+
    "\11\0\12\41\1\0\1\41\1\u0211\7\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\2\41\1\u0212\20\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\u0213\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\7\41\1\u0214\1\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\6\41\1\u0215\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\2\41\1\u0216\6\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\4\41"+
    "\1\u0217\16\41\11\0\12\41\1\0\1\u0218\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\10\41\1\u0219"+
    "\1\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\3\41\1\u021a\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\5\41\1\u021b\3\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\2\41\1\u021c\20\41\11\0\12\41\1\0"+
    "\5\41\1\u021d\3\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\3\41\1\u021e\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\70\0\1\u021f\46\0"+
    "\1\u0220\103\0\1\u0221\147\0\1\u0222\104\0\1\u0223\52\0"+
    "\1\u0224\37\0\1\u0225\43\0\1\u0226\107\0\1\u0227\150\0"+
    "\1\u0228\111\0\1\u0229\101\0\1\u022a\41\0\1\u022b\114\0"+
    "\1\u022c\143\0\1\u022d\116\0\1\u022e\76\0\1\u022f\51\0"+
    "\1\u0230\106\0\1\u0231\152\0\1\u0232\17\0\1\u01db\106\0"+
    "\2\u01db\122\0\1\u0233\153\0\1\u0234\32\0\1\u01e0\1\0"+
    "\2\u01e0\1\0\1\u01e0\60\0\5\u01e0\13\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\2\41\1\u0235"+
    "\20\41\11\0\12\41\1\0\1\u0236\10\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\1\u0237"+
    "\10\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\4\41\1\u0238\4\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\3\41\1\u0239"+
    "\5\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\3\41\1\u023a\5\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\4\41\1\u023b\16\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\4\41\1\u023c\16\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\15\41\1\u023d\5\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\20\41\1\u023e\2\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\17\41\1\u023f\3\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\1\u0240\22\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\1\u0241\22\41\11\0\12\41\1\0"+
    "\1\41\1\u0242\7\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\5\41\1\u0243\3\41\2\0"+
    "\1\41\4\0\1\232\17\0\2\41\1\u0244\20\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\4\41\1\u0245\16\41\11\0\12\41\1\0\6\41\1\u0246"+
    "\2\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\1\u0247\10\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\1\41\1\u0248\7\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\1\u0249\10\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\1\u024a\22\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\6\41\1\u024b\14\41"+
    "\11\0\12\41\1\0\4\41\1\u024c\4\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\5\41\1\u024d\15\41"+
    "\11\0\12\41\1\0\6\41\1\u024e\2\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\2\41\1\u024f\20\41"+
    "\11\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\4\41\1\u0250\16\41\11\0\12\41\1\0\5\41"+
    "\1\u0251\3\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\5\41\1\u0252\3\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\4\41\1\u0253\16\41"+
    "\11\0\10\41\1\u0254\1\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\1\u0255"+
    "\10\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\4\41\1\u0256\4\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\1\u0257\10\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\1\u0258"+
    "\22\41\11\0\12\41\1\0\3\41\1\u0259\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\10\41\1\u025a"+
    "\12\41\11\0\12\41\1\0\3\41\1\u025b\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\6\41\1\u025c\2\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\3\41\1\u025d\5\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\3\41\1\u025e\5\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\6\41\1\u025f\14\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\1\u0260\22\41"+
    "\11\0\12\41\1\0\1\u0261\10\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\1\u0262\22\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\13\41"+
    "\1\u0263\7\41\64\0\1\u0264\52\0\1\u0265\103\0\1\u0266"+
    "\155\0\1\u0267\36\0\1\u0268\154\0\1\u0269\43\0\1\u026a"+
    "\110\0\1\u026b\163\0\1\u026c\70\0\1\u026d\110\0\1\u026e"+
    "\35\0\1\u026f\116\0\1\u0270\146\0\1\u0271\101\0\1\u0272"+
    "\106\0\1\u0273\110\0\1\u0274\110\0\1\u0275\43\0\1\u0276"+
    "\72\0\12\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\4\41\1\u0277\16\41\11\0\10\41\1\u0278\1\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\1\u0279\10\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\4\41\1\u027a"+
    "\4\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\6\41\1\u027b\2\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\2\41\1\u027c\20\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\5\41\1\u027d\15\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\6\41\1\u027e\14\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\13\41\1\u027f\7\41\11\0\10\41\1\u0280\1\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\2\41\1\u0281\6\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\11\41\1\u0282\11\41\11\0"+
    "\12\41\1\0\3\41\1\u0283\5\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\5\41\1\u0284"+
    "\3\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\6\41\1\u0285\2\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\1\u0286\10\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\6\41\1\u0287\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\7\41\1\u0288\1\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\2\41\1\u0289\6\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\4\41\1\u028a\4\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\10\41"+
    "\1\u028b\1\41\1\0\11\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\5\41\1\u028c\3\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\2\41"+
    "\1\u028d\20\41\11\0\12\41\1\0\5\41\1\u028e\3\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\1\u028f\10\41\2\0\1\41\4\0\1\232\17\0"+
    "\23\41\11\0\12\41\1\0\11\41\2\0\1\41\4\0"+
    "\1\232\17\0\6\41\1\u0290\14\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\7\41\1\u0291"+
    "\13\41\11\0\12\41\1\0\1\u0292\10\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\3\41"+
    "\1\u0293\5\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\11\0\12\41\1\0\3\41\1\u0294\5\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\32\0\1\u0295\142\0\1\u0296"+
    "\46\0\1\u0297\107\0\1\u0298\106\0\1\u0299\110\0\1\u029a"+
    "\107\0\1\u029b\153\0\1\u029c\40\0\1\u029d\107\0\1\u029e"+
    "\105\0\1\u029f\141\0\1\u02a0\53\0\1\u02a1\104\0\1\u02a2"+
    "\70\0\12\41\1\0\1\41\1\u02a3\7\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\11\41"+
    "\2\0\1\41\4\0\1\232\17\0\11\41\1\u02a4\11\41"+
    "\11\0\12\41\1\0\1\u02a5\10\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\11\41\2\0"+
    "\1\41\4\0\1\232\17\0\4\41\1\u02a6\16\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\7\41\1\u02a7\13\41\11\0\7\41\1\u02a8\2\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\3\41\1\u02a9\5\41\2\0\1\41\4\0"+
    "\1\232\17\0\23\41\11\0\12\41\1\0\3\41\1\u02aa"+
    "\5\41\2\0\1\41\4\0\1\232\17\0\23\41\11\0"+
    "\12\41\1\0\11\41\2\0\1\41\4\0\1\232\17\0"+
    "\1\u02ab\22\41\11\0\12\41\1\0\1\u02ac\10\41\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\11\41\2\0\1\41\4\0\1\232\17\0\1\u02ad\22\41"+
    "\11\0\12\41\1\0\5\41\1\u02ae\3\41\2\0\1\41"+
    "\4\0\1\232\17\0\23\41\11\0\12\41\1\0\3\41"+
    "\1\u02af\5\41\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\26\0\1\u02b0\154\0\1\u02b1\36\0\1\u02b2\114\0\1\u02b3"+
    "\75\0\1\u02b4\114\0\1\u02b5\104\0\1\u02b6\114\0\1\u02b7"+
    "\77\0\1\u02b8\114\0\1\u02b9\146\0\1\u02ba\25\0\12\41"+
    "\1\0\6\41\1\u02bb\2\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\3\41\1\u02bc\5\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\11\0\12\41"+
    "\1\0\3\41\1\u02bd\5\41\2\0\1\41\4\0\1\232"+
    "\17\0\23\41\11\0\12\41\1\0\11\41\2\0\1\41"+
    "\4\0\1\232\17\0\10\41\1\u02be\12\41\11\0\12\41"+
    "\1\0\11\41\2\0\1\41\4\0\1\232\17\0\6\41"+
    "\1\u02bf\14\41\72\0\1\u02c0\40\0\1\u02c1\152\0\1\u02c2"+
    "\45\0\1\u02c3\70\0\12\41\1\0\3\41\1\u02c4\5\41"+
    "\2\0\1\41\4\0\1\232\17\0\23\41\27\0\1\u02c5"+
    "\151\0\1\u02c6\25\0\12\41\1\0\10\41\1\u02c7\2\0"+
    "\1\41\4\0\1\232\17\0\23\41\11\0\12\41\1\0"+
    "\10\41\1\u02c8\2\0\1\41\4\0\1\232\17\0\23\41"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37985];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\1\12\0\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\21\1\1\11\1\1\1\11\3\1\1\11"+
    "\3\1\5\11\10\1\3\11\26\1\1\11\2\1\1\11"+
    "\11\1\3\11\3\1\4\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\13\1\1\11\1\0\2\1\4\0\2\1"+
    "\2\0\36\1\1\0\1\1\2\11\3\1\13\11\2\1"+
    "\3\11\1\1\1\11\24\1\10\0\1\11\4\0\1\1"+
    "\12\0\1\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\5\0\1\1\1\11\5\1\1\11\1\0"+
    "\1\11\3\0\1\11\2\0\1\1\1\11\1\1\1\11"+
    "\40\1\2\11\7\1\1\11\1\1\1\11\27\1\25\0"+
    "\1\1\3\0\1\11\4\0\44\1\1\11\37\1\3\0"+
    "\1\1\2\0\1\11\1\0\1\11\14\0\2\1\2\0"+
    "\2\1\1\0\75\1\1\0\2\11\2\0\1\11\20\0"+
    "\57\1\1\0\1\11\2\0\1\11\1\0\2\11\2\0"+
    "\1\11\10\0\36\1\3\0\2\11\6\0\1\11\2\0"+
    "\15\1\2\0\2\11\1\0\3\11\1\0\2\11\5\1"+
    "\1\0\2\11\1\0\1\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[712];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static final boolean DEBUG = true;

  public static final int PAWN_CELL_SIZE = 32;

  private static final char DEFAULT_ESCAPE_CHARACTER = '\\';
  private static final boolean DEFAULT_REQUIRE_SEMICOLONS = false;
  private static final boolean DEFAULT_REQUIRE_NEWDECLS = false;

  //ExtendedSyntaxStrCommentHandler longCommentOrStringHandler
  //    = new ExtendedSyntaxStrCommentHandler();

  private char escapeCharacter;
  private boolean requireSemicolons;
  private boolean requireNewDecls;

  private StringBuilder string = new StringBuilder(32);
  private char character;
  private Object value;

  public SourcePawnLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
    resetSemicolonsRequired();
    resetNewDeclsRequired();
  }

  public char getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(char escapeCharacter) {
    if (getEscapeCharacter() != escapeCharacter) {
      this.escapeCharacter = escapeCharacter;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", escapeCharacter);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(char ch) {
    return ch == getEscapeCharacter();
  }

  public boolean areSemicolonsRequired() {
    return requireSemicolons;
  }

  public void setSemicolonsRequired(boolean requireSemicolons) {
    if (areSemicolonsRequired() != requireSemicolons) {
      this.requireSemicolons = requireSemicolons;
      if (DEBUG) {
        if (requireSemicolons) {
          System.out.println("Semicolons are required");
        } else {
          System.out.println("Semicolons are no longer required");
        }
      }
    }
  }

  public void resetSemicolonsRequired() {
    setSemicolonsRequired(DEFAULT_REQUIRE_SEMICOLONS);
  }

  public boolean areNewDeclsRequired() {
    return requireNewDecls;
  }

  public void setNewDeclsRequired(boolean requireNewDecls) {
    if (areNewDeclsRequired() != requireNewDecls) {
      this.requireNewDecls = requireNewDecls;
      if (DEBUG) {
        if (requireNewDecls) {
          System.out.println("NewDecls are required");
        } else {
          System.out.println("NewDecls are no longer required");
        }
      }
    }
  }

  public void resetNewDeclsRequired() {
    setNewDeclsRequired(DEFAULT_REQUIRE_NEWDECLS);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SourcePawnLexer(java.io.Reader in) {
    switch (PAWN_CELL_SIZE) {
    case 16:
    case 32:
    case 64:
      break;
    default:
      throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
  }

  resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_PRAGMA_DEPRECATED_STRING: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [522] { String text = string.toString().trim();"+ZZ_NL+"                          value = text;"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"deprecated message = \\\"%s\\\"%n\", text);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          if (!text.isEmpty()) {"+ZZ_NL+"                            return PRAGMA_DEPRECATED_STRING;"+ZZ_NL+"                          } }");
              String text = string.toString().trim();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
            case 713: break;
            case IN_PREPROCESSOR_PRAGMA_NEWDECLS: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [547] { yypushback(yylength()); yybegin(YYINITIAL); }");
              yypushback(yylength()); yybegin(YYINITIAL);
            }
            case 714: break;
            case IN_CHARACTER_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [551] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 715: break;
            case IN_STRING_LITERAL: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [675] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 716: break;
            case IN_LINE_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [416] { String text = string.toString().trim();"+ZZ_NL+"                value = text;"+ZZ_NL+"                if (DEBUG) {"+ZZ_NL+"                  System.out.printf(\"line comment = \'%s\'%n\", text);"+ZZ_NL+"                }"+ZZ_NL+""+ZZ_NL+"                yybegin(YYINITIAL);"+ZZ_NL+"                return LINE_COMMENT; }");
              String text = string.toString().trim();
                value = text;
                if (DEBUG) {
                  System.out.printf("line comment = '%s'%n", text);
                }

                yybegin(YYINITIAL);
                return LINE_COMMENT;
            }
            case 717: break;
            case IN_BLOCK_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [429] { return BAD_CHARACTER; }");
              return BAD_CHARACTER;
            }
            case 718: break;
            case IN_DOC_COMMENT_PRE: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [445] { return BAD_CHARACTER; }");
              return BAD_CHARACTER;
            }
            case 719: break;
            case IN_DOC_COMMENT: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [453] { return BAD_CHARACTER; }");
              return BAD_CHARACTER;
            }
            case 720: break;
            case IN_DOC_COMMENT_POST: {
              System.out.println("match: <<EOF>>");
              System.out.println("action [461] { String text = string.toString().trim();"+ZZ_NL+"                              value = text;"+ZZ_NL+"                              if (DEBUG) {"+ZZ_NL+"                                System.out.printf(\"doc comment = \'%s\'%n\", text);"+ZZ_NL+"                              }"+ZZ_NL+""+ZZ_NL+"                              yybegin(YYINITIAL);"+ZZ_NL+"                              yypushback(yylength());"+ZZ_NL+"                              return DOC_COMMENT; }");
              String text = string.toString().trim();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("doc comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              yypushback(yylength());
                              return DOC_COMMENT;
            }
            case 721: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [612] { int character = 0;"+ZZ_NL+"                          for (int i = 0; i < yylength(); i++) {"+ZZ_NL+"                            char ch = yycharat(i);"+ZZ_NL+"                            switch (ch) {"+ZZ_NL+"                              case \'0\':case \'1\':case \'2\':case \'3\':case \'4\':"+ZZ_NL+"                              case \'5\':case \'6\':case \'7\':case \'8\':case \'9\':"+ZZ_NL+"                                character = (character * 10) + (ch - \'0\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \';\':"+ZZ_NL+"                                if (i != (yylength()-1)) {"+ZZ_NL+"                                  throw new AssertionError("+ZZ_NL+"                                      \"semicolon should be the final character in the sequence\");"+ZZ_NL+"                                }"+ZZ_NL+""+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError(\"Unsupported control character: \" + ch);"+ZZ_NL+"                            }"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          this.character = (char)character;"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character * 10) + (ch - '0');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 206: break;
          case 2: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [639] { int character = 0;"+ZZ_NL+"                          for (int i = 0; i < yylength(); i++) {"+ZZ_NL+"                            char ch = yycharat(i);"+ZZ_NL+"                            switch (ch) {"+ZZ_NL+"                              case \'0\':case \'1\':case \'2\':case \'3\':case \'4\':"+ZZ_NL+"                              case \'5\':case \'6\':case \'7\':case \'8\':case \'9\':"+ZZ_NL+"                                character = (character << 4) + (ch - \'0\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'a\':case \'b\':case \'c\':case \'d\':case \'e\':case \'f\':"+ZZ_NL+"                                character = (character << 4) + (ch - \'a\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'A\':case \'B\':case \'C\':case \'D\':case \'E\':case \'F\':"+ZZ_NL+"                                character = (character << 4) + (ch - \'A\');"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \';\':"+ZZ_NL+"                                if (i != (yylength()-1)) {"+ZZ_NL+"                                  throw new AssertionError("+ZZ_NL+"                                      \"semicolon should be the final character in the sequence\");"+ZZ_NL+"                                }"+ZZ_NL+""+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError(\"Unsupported control character: \" + ch);"+ZZ_NL+"                            }"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          this.character = (char)character;"+ZZ_NL+"                          yybegin(IN_CHARACTER_LITERAL); }");
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character << 4) + (ch - '0');
                                break;
                              case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                                character = (character << 4) + (ch - 'a');
                                break;
                              case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                                character = (character << 4) + (ch - 'A');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 207: break;
          case 3: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [395] { return BAD_CHARACTER; }");
            { return BAD_CHARACTER;
            }
          case 208: break;
          case 4: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [351] { return WHITESPACE; }");
            { return WHITESPACE;
            }
          case 209: break;
          case 5: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [352] { return NEW_LINE; }");
            { return NEW_LINE;
            }
          case 210: break;
          case 6: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [248] { return LBRACKET; }");
            { return LBRACKET;
            }
          case 211: break;
          case 7: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [204] { return AT_SIGN; }");
            { return AT_SIGN;
            }
          case 212: break;
          case 8: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [359] { try {"+ZZ_NL+"                        switch (PAWN_CELL_SIZE) {"+ZZ_NL+"                          case 16: value = (short)SourcePawnUtils.parseNumber(yytext()); break;"+ZZ_NL+"                          case 32: value = (int)SourcePawnUtils.parseNumber(yytext()); break;"+ZZ_NL+"                          case 64: value = (long)SourcePawnUtils.parseNumber(yytext()); break;"+ZZ_NL+"                          default: throw new AssertionError("+ZZ_NL+"                                \"Unsupported cell size (\" + PAWN_CELL_SIZE + \")\");"+ZZ_NL+"                        }"+ZZ_NL+""+ZZ_NL+"                        if (DEBUG) {"+ZZ_NL+"                          System.out.printf(\"number %s = %d%n\", yytext(), value);"+ZZ_NL+"                        }"+ZZ_NL+"                      } catch (NumberFormatException e) {"+ZZ_NL+"                        // This should not happen if number was tokenized correctly"+ZZ_NL+"                        throw new AssertionError(e.getMessage());"+ZZ_NL+"                      }"+ZZ_NL+""+ZZ_NL+"                      return NUMBER_LITERAL; }");
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 16: value = (short)SourcePawnUtils.parseNumber(yytext()); break;
                          case 32: value = (int)SourcePawnUtils.parseNumber(yytext()); break;
                          case 64: value = (long)SourcePawnUtils.parseNumber(yytext()); break;
                          default: throw new AssertionError(
                                "Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("number %s = %d%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }

                      return NUMBER_LITERAL;
            }
          case 213: break;
          case 9: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [354] { return IDENTIFIER; }");
            { return IDENTIFIER;
            }
          case 214: break;
          case 10: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [214] { return SEMICOLON; }");
            { return SEMICOLON;
            }
          case 215: break;
          case 11: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [217] { return UNDERSCORE; }");
            { return UNDERSCORE;
            }
          case 216: break;
          case 12: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [212] { return PERIOD; }");
            { return PERIOD;
            }
          case 217: break;
          case 13: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [210] { return MINUS; }");
            { return MINUS;
            }
          case 218: break;
          case 14: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [201] { return AMPERSAND; }");
            { return AMPERSAND;
            }
          case 219: break;
          case 15: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [202] { return ASSIGN; }");
            { return ASSIGN;
            }
          case 220: break;
          case 16: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [203] { return ASTERISK; }");
            { return ASTERISK;
            }
          case 221: break;
          case 17: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [205] { return CARET; }");
            { return CARET;
            }
          case 222: break;
          case 18: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [206] { return COLON; }");
            { return COLON;
            }
          case 223: break;
          case 19: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [207] { return COMMA; }");
            { return COMMA;
            }
          case 224: break;
          case 20: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [208] { return EXCLAMATION; }");
            { return EXCLAMATION;
            }
          case 225: break;
          case 21: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [209] { yybegin(IN_PREPROCESSOR); return HASH; }");
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 226: break;
          case 22: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [211] { return PERCENT; }");
            { return PERCENT;
            }
          case 227: break;
          case 23: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [213] { return PLUS; }");
            { return PLUS;
            }
          case 228: break;
          case 24: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [215] { return SLASH; }");
            { return SLASH;
            }
          case 229: break;
          case 25: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [216] { return TILDE; }");
            { return TILDE;
            }
          case 230: break;
          case 26: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [218] { return VERTICAL_BAR; }");
            { return VERTICAL_BAR;
            }
          case 231: break;
          case 27: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [253] { return GT; }");
            { return GT;
            }
          case 232: break;
          case 28: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [252] { return LT; }");
            { return LT;
            }
          case 233: break;
          case 29: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [246] { return LBRACE; }");
            { return LBRACE;
            }
          case 234: break;
          case 30: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [247] { return RBRACE; }");
            { return RBRACE;
            }
          case 235: break;
          case 31: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [249] { return RBRACKET; }");
            { return RBRACKET;
            }
          case 236: break;
          case 32: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [250] { return LPAREN; }");
            { return LPAREN;
            }
          case 237: break;
          case 33: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [251] { return RPAREN; }");
            { return RPAREN;
            }
          case 238: break;
          case 34: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [344] { string.setLength(0); yybegin(IN_CHARACTER_LITERAL); }");
            { string.setLength(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 239: break;
          case 35: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [345] { string.setLength(0); yybegin(IN_STRING_LITERAL); }");
            { string.setLength(0); yybegin(IN_STRING_LITERAL);
            }
          case 240: break;
          case 36: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [489] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 241: break;
          case 37: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [493] { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITESPACE; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITESPACE;
            }
          case 242: break;
          case 38: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [511] { string.setLength(0);"+ZZ_NL+"                          yybegin(IN_PRAGMA_DEPRECATED_STRING);"+ZZ_NL+"                           /* no return, ignore preceeding whitespace */ }");
            { string.setLength(0);
                          yybegin(IN_PRAGMA_DEPRECATED_STRING);
                           /* no return, ignore preceeding whitespace */
            }
          case 243: break;
          case 39: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [534] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 244: break;
          case 40: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [522] { String text = string.toString().trim();"+ZZ_NL+"                          value = text;"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"deprecated message = \\\"%s\\\"%n\", text);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          yypushback(yylength());"+ZZ_NL+"                          if (!text.isEmpty()) {"+ZZ_NL+"                            return PRAGMA_DEPRECATED_STRING;"+ZZ_NL+"                          } }");
            { String text = string.toString().trim();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
          case 245: break;
          case 41: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [538] { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITESPACE; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITESPACE;
            }
          case 246: break;
          case 42: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [543] { /* ignore whitespace */ }");
            { /* ignore whitespace */
            }
          case 247: break;
          case 43: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [560] { character = yycharat(0);"+ZZ_NL+"                          if (isEscapeCharacter(character)) {"+ZZ_NL+"                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);"+ZZ_NL+"                          } }");
            { character = yycharat(0);
                          if (isEscapeCharacter(character)) {
                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);
                          }
            }
          case 248: break;
          case 44: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [565] { yybegin(YYINITIAL); return BAD_CHARACTER; }");
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 249: break;
          case 45: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [552] { String text = Character.toString(character);"+ZZ_NL+"                          value = character;"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"character = \\\'%s\\\'%n\", text);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return CHARACTER_LITERAL; }");
            { String text = Character.toString(character);
                          value = character;
                          if (DEBUG) {
                            System.out.printf("character = \'%s\'%n", text);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 250: break;
          case 46: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [676] { String text = string.toString();"+ZZ_NL+"                          value = text;"+ZZ_NL+"                          if (DEBUG) {"+ZZ_NL+"                            System.out.printf(\"string = \\\"%s\\\"%n\", text);"+ZZ_NL+"                          }"+ZZ_NL+""+ZZ_NL+"                          yybegin(YYINITIAL);"+ZZ_NL+"                          return STRING_LITERAL; }");
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("string = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 251: break;
          case 47: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [607] { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE); }");
            { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE);
            }
          case 252: break;
          case 48: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [569] { character = yycharat(0);"+ZZ_NL+"                          if (character == \'x\') {"+ZZ_NL+"                            yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);"+ZZ_NL+"                          } else {"+ZZ_NL+"                            switch(yycharat(0)) {"+ZZ_NL+"                              case \'a\':"+ZZ_NL+"                                character = \'\\u0007\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'b\':"+ZZ_NL+"                                character = \'\\b\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'e\':"+ZZ_NL+"                                character = \'\\u001B\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'f\':"+ZZ_NL+"                                character = \'\\f\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'n\':"+ZZ_NL+"                                character = \'\\n\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'r\':"+ZZ_NL+"                                character = \'\\r\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'t\':"+ZZ_NL+"                                character = \'\\t\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              case \'v\':"+ZZ_NL+"                                character = \'\\u000B\';"+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                throw new AssertionError("+ZZ_NL+"                                    \"Unsupported control character: \" + yycharat(0));"+ZZ_NL+"                            }"+ZZ_NL+""+ZZ_NL+"                            yybegin(IN_CHARACTER_LITERAL);"+ZZ_NL+"                          } }");
            { character = yycharat(0);
                          if (character == 'x') {
                            yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);
                          } else {
                            switch(yycharat(0)) {
                              case 'a':
                                character = '\u0007';
                                break;
                              case 'b':
                                character = '\b';
                                break;
                              case 'e':
                                character = '\u001B';
                                break;
                              case 'f':
                                character = '\f';
                                break;
                              case 'n':
                                character = '\n';
                                break;
                              case 'r':
                                character = '\r';
                                break;
                              case 't':
                                character = '\t';
                                break;
                              case 'v':
                                character = '\u000B';
                                break;
                              default:
                                throw new AssertionError(
                                    "Unsupported control character: " + yycharat(0));
                            }

                            yybegin(IN_CHARACTER_LITERAL);
                          }
            }
          case 253: break;
          case 49: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [606] { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL); }");
            { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 254: break;
          case 50: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [635] { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL); }");
            { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL);
            }
          case 255: break;
          case 51: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [406] { String text = string.toString().trim();"+ZZ_NL+"                value = text;"+ZZ_NL+"                if (DEBUG) {"+ZZ_NL+"                  System.out.printf(\"line comment = \'%s\'%n\", text);"+ZZ_NL+"                }"+ZZ_NL+""+ZZ_NL+"                yybegin(YYINITIAL);"+ZZ_NL+"                yypushback(yylength());"+ZZ_NL+"                return LINE_COMMENT; }");
            { String text = string.toString().trim();
                value = text;
                if (DEBUG) {
                  System.out.printf("line comment = '%s'%n", text);
                }

                yybegin(YYINITIAL);
                yypushback(yylength());
                return LINE_COMMENT;
            }
          case 256: break;
          case 52: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [431] { string.append(\' \'); }");
            { string.append(' ');
            }
          case 257: break;
          case 53: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [447] { yybegin(IN_DOC_COMMENT); }");
            { yybegin(IN_DOC_COMMENT);
            }
          case 258: break;
          case 54: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [446] { /* ignore leading asterisks */ }");
            { /* ignore leading asterisks */
            }
          case 259: break;
          case 55: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [461] { String text = string.toString().trim();"+ZZ_NL+"                              value = text;"+ZZ_NL+"                              if (DEBUG) {"+ZZ_NL+"                                System.out.printf(\"doc comment = \'%s\'%n\", text);"+ZZ_NL+"                              }"+ZZ_NL+""+ZZ_NL+"                              yybegin(YYINITIAL);"+ZZ_NL+"                              yypushback(yylength());"+ZZ_NL+"                              return DOC_COMMENT; }");
            { String text = string.toString().trim();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("doc comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              yypushback(yylength());
                              return DOC_COMMENT;
            }
          case 260: break;
          case 56: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [256] { return AS; }");
            { return AS;
            }
          case 261: break;
          case 57: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [235] { return RANGE; }");
            { return RANGE;
            }
          case 262: break;
          case 58: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [223] { return DECREMENT; }");
            { return DECREMENT;
            }
          case 263: break;
          case 59: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [243] { return SUBEQ; }");
            { return SUBEQ;
            }
          case 264: break;
          case 60: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [221] { return AND; }");
            { return AND;
            }
          case 265: break;
          case 61: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [222] { return ANDEQ; }");
            { return ANDEQ;
            }
          case 266: break;
          case 62: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [226] { return EQUALTO; }");
            { return EQUALTO;
            }
          case 267: break;
          case 63: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [231] { return MULEQ; }");
            { return MULEQ;
            }
          case 268: break;
          case 64: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [244] { return XOREQ; }");
            { return XOREQ;
            }
          case 269: break;
          case 65: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [236] { return SCOPE_RESOLUTION; }");
            { return SCOPE_RESOLUTION;
            }
          case 270: break;
          case 66: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [232] { return NEQUALTO; }");
            { return NEQUALTO;
            }
          case 271: break;
          case 67: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [230] { return MODEQ; }");
            { return MODEQ;
            }
          case 272: break;
          case 68: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [220] { return ADDEQ; }");
            { return ADDEQ;
            }
          case 273: break;
          case 69: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [228] { return INCREMENT; }");
            { return INCREMENT;
            }
          case 274: break;
          case 70: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [224] { return DIVEQ; }");
            { return DIVEQ;
            }
          case 275: break;
          case 71: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [349] { string.setLength(0); yybegin(IN_BLOCK_COMMENT); }");
            { string.setLength(0); yybegin(IN_BLOCK_COMMENT);
            }
          case 276: break;
          case 72: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [347] { string.setLength(0); yybegin(IN_LINE_COMMENT); }");
            { string.setLength(0); yybegin(IN_LINE_COMMENT);
            }
          case 277: break;
          case 73: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [234] { return OREQ; }");
            { return OREQ;
            }
          case 278: break;
          case 74: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [233] { return OR; }");
            { return OR;
            }
          case 279: break;
          case 75: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [227] { return GTEQ; }");
            { return GTEQ;
            }
          case 280: break;
          case 76: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [239] { return SRA; }");
            { return SRA;
            }
          case 281: break;
          case 77: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [229] { return LTEQ; }");
            { return LTEQ;
            }
          case 282: break;
          case 78: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [237] { return SL; }");
            { return SL;
            }
          case 283: break;
          case 79: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [287] { return IF; }");
            { return IF;
            }
          case 284: break;
          case 80: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [290] { return IN; }");
            { return IN;
            }
          case 285: break;
          case 81: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [272] { return DO; }");
            { return DO;
            }
          case 286: break;
          case 82: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [483] { yybegin(YYINITIAL); return PREPROCESSOR_IF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 287: break;
          case 83: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 19;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 20;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [399] { yybegin(YYINITIAL); return LABEL; }");
            { yybegin(YYINITIAL); return LABEL;
            }
          case 288: break;
          case 84: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [685] { if (isEscapeCharacter(yycharat(0))) {"+ZZ_NL+"                            char ctrl = yycharat(1);"+ZZ_NL+"                            switch (ctrl) {"+ZZ_NL+"                              case \'a\':case \'b\':case \'e\':case \'f\':"+ZZ_NL+"                              case \'n\':case \'r\':case \'t\':case \'v\':"+ZZ_NL+"                              case \'x\':"+ZZ_NL+"                              case \'%\':"+ZZ_NL+"                              case \'\"\':"+ZZ_NL+"                              case \'\\\'\':"+ZZ_NL+"                              case \'0\':case \'1\':case \'2\':case \'3\':case \'4\':"+ZZ_NL+"                              case \'5\':case \'6\':case \'7\':case \'8\':case \'9\':"+ZZ_NL+"                                string.append(yytext());"+ZZ_NL+"                                break;"+ZZ_NL+"                              default:"+ZZ_NL+"                                if (isEscapeCharacter(ctrl)) {"+ZZ_NL+"                                  string.append(yytext());"+ZZ_NL+"                                  break;"+ZZ_NL+"                                }"+ZZ_NL+""+ZZ_NL+"                                yybegin(YYINITIAL);"+ZZ_NL+"                                return BAD_CHARACTER;"+ZZ_NL+"                            }"+ZZ_NL+"                          } else {"+ZZ_NL+"                            string.append(yycharat(0));"+ZZ_NL+"                            yypushback(1);"+ZZ_NL+"                          } }");
            { if (isEscapeCharacter(yycharat(0))) {
                            char ctrl = yycharat(1);
                            switch (ctrl) {
                              case 'a':case 'b':case 'e':case 'f':
                              case 'n':case 'r':case 't':case 'v':
                              case 'x':
                              case '%':
                              case '"':
                              case '\'':
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                string.append(yytext());
                                break;
                              default:
                                if (isEscapeCharacter(ctrl)) {
                                  string.append(yytext());
                                  break;
                                }

                                yybegin(YYINITIAL);
                                return BAD_CHARACTER;
                            }
                          } else {
                            string.append(yycharat(0));
                            yypushback(1);
                          }
            }
          case 289: break;
          case 85: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [684] { /* line continuation */ }");
            { /* line continuation */
            }
          case 290: break;
          case 86: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [432] { String text = string.toString().trim();"+ZZ_NL+"                              value = text;"+ZZ_NL+"                              if (DEBUG) {"+ZZ_NL+"                                System.out.printf(\"block comment = \'%s\'%n\", text);"+ZZ_NL+"                              }"+ZZ_NL+""+ZZ_NL+"                              yybegin(YYINITIAL);"+ZZ_NL+"                              return BLOCK_COMMENT; }");
            { String text = string.toString().trim();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("block comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              return BLOCK_COMMENT;
            }
          case 291: break;
          case 87: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [448] { yybegin(IN_DOC_COMMENT_POST); }");
            { yybegin(IN_DOC_COMMENT_POST);
            }
          case 292: break;
          case 88: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [455] { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST); }");
            { yypushback(yylength()); yybegin(IN_DOC_COMMENT_POST);
            }
          case 293: break;
          case 89: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [378] { try {"+ZZ_NL+"                        switch (PAWN_CELL_SIZE) {"+ZZ_NL+"                          case 32: value = (float)SourcePawnUtils.parseRational(yytext()); break;"+ZZ_NL+"                          case 64: value = (double)SourcePawnUtils.parseRational(yytext()); break;"+ZZ_NL+"                          default: throw new AssertionError("+ZZ_NL+"                                \"Unsupported cell size (\" + PAWN_CELL_SIZE + \")\");"+ZZ_NL+"                        }"+ZZ_NL+""+ZZ_NL+"                        if (DEBUG) {"+ZZ_NL+"                          System.out.printf(\"rational %s = %f%n\", yytext(), value);"+ZZ_NL+"                        }"+ZZ_NL+"                      } catch (NumberFormatException e) {"+ZZ_NL+"                        // This should not happen if number was tokenized correctly"+ZZ_NL+"                        throw new AssertionError(e.getMessage());"+ZZ_NL+"                      } }");
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 32: value = (float)SourcePawnUtils.parseRational(yytext()); break;
                          case 64: value = (double)SourcePawnUtils.parseRational(yytext()); break;
                          default: throw new AssertionError(
                                "Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("rational %s = %f%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }
            }
          case 294: break;
          case 90: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [356] { return TAG; }");
            { return TAG;
            }
          case 295: break;
          case 91: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { return TRY; }");
            { return TRY;
            }
          case 296: break;
          case 92: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { return FOR; }");
            { return FOR;
            }
          case 297: break;
          case 93: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [298] { return LET; }");
            { return LET;
            }
          case 298: break;
          case 94: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [357] { return TAG; }");
            { return TAG;
            }
          case 299: break;
          case 95: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [225] { return ELLIPSIS; }");
            { return ELLIPSIS;
            }
          case 300: break;
          case 96: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [335] { return VAR; }");
            { return VAR;
            }
          case 301: break;
          case 97: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [348] { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE); }");
            { string.setLength(0); yybegin(IN_DOC_COMMENT_PRE);
            }
          case 302: break;
          case 98: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [240] { return SRAEQ; }");
            { return SRAEQ;
            }
          case 303: break;
          case 99: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [241] { return SRL; }");
            { return SRL;
            }
          case 304: break;
          case 100: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [238] { return SLEQ; }");
            { return SLEQ;
            }
          case 305: break;
          case 101: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [291] { return INT; }");
            { return INT;
            }
          case 306: break;
          case 102: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [302] { return NEW; }");
            { return NEW;
            }
          case 307: break;
          case 103: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 19;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 21;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [400] { yypushback(yylength()); yybegin(YYINITIAL); }");
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 308: break;
          case 104: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [322] { return THIS; }");
            { return THIS;
            }
          case 309: break;
          case 105: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [277] { return EXIT; }");
            { return EXIT;
            }
          case 310: break;
          case 106: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [274] { return ELSE; }");
            { return ELSE;
            }
          case 311: break;
          case 107: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [276] { return ENUM; }");
            { return ENUM;
            }
          case 312: break;
          case 108: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [339] { return VOID; }");
            { return VOID;
            }
          case 313: break;
          case 109: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [242] { return SRLEQ; }");
            { return SRLEQ;
            }
          case 314: break;
          case 110: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [261] { yybegin(IN_CASE); return CASE; }");
            { yybegin(IN_CASE); return CASE;
            }
          case 315: break;
          case 111: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [265] { return CHAR; }");
            { return CHAR;
            }
          case 316: break;
          case 112: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [297] { return INTN; }");
            { return INTN;
            }
          case 317: break;
          case 113: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [292] { return INT8; }");
            { return INT8;
            }
          case 318: break;
          case 114: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { return NULL; }");
            { return NULL;
            }
          case 319: break;
          case 115: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [268] { return DECL; }");
            { return DECL;
            }
          case 320: break;
          case 116: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [342] { return WITH; }");
            { return WITH;
            }
          case 321: break;
          case 117: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [286] { return GOTO; }");
            { return GOTO;
            }
          case 322: break;
          case 118: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [476] { yybegin(YYINITIAL); return PREPROCESSOR_ELSE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 323: break;
          case 119: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [482] { yybegin(YYINITIAL); return PREPROCESSOR_FILE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 324: break;
          case 120: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [485] { yybegin(YYINITIAL); return PREPROCESSOR_LINE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 325: break;
          case 121: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 22;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 23;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [519] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 326: break;
          case 122: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [259] { return BREAK; }");
            { return BREAK;
            }
          case 327: break;
          case 123: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [320] { return TAGOF; }");
            { return TAGOF;
            }
          case 328: break;
          case 124: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [323] { return THROW; }");
            { return THROW;
            }
          case 329: break;
          case 125: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [334] { return USING; }");
            { return USING;
            }
          case 330: break;
          case 126: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [332] { return UINTN; }");
            { return UINTN;
            }
          case 331: break;
          case 127: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [328] { return UINT8; }");
            { return UINT8;
            }
          case 332: break;
          case 128: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { return UNION; }");
            { return UNION;
            }
          case 333: break;
          case 129: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [317] { return STOCK; }");
            { return STOCK;
            }
          case 334: break;
          case 130: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [315] { return SLEEP; }");
            { return SLEEP;
            }
          case 335: break;
          case 131: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [266] { return CONST; }");
            { return CONST;
            }
          case 336: break;
          case 132: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [263] { return CATCH; }");
            { return CATCH;
            }
          case 337: break;
          case 133: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [293] { return INT16; }");
            { return INT16;
            }
          case 338: break;
          case 134: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { return INT64; }");
            { return INT64;
            }
          case 339: break;
          case 135: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [294] { return INT32; }");
            { return INT32;
            }
          case 340: break;
          case 136: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [341] { return WHILE; }");
            { return WHILE;
            }
          case 341: break;
          case 137: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [488] { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 342: break;
          case 138: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [481] { yybegin(YYINITIAL); return PREPROCESSOR_ERROR; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ERROR;
            }
          case 343: break;
          case 139: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [478] { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 344: break;
          case 140: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [305] { return OBJECT; }");
            { return OBJECT;
            }
          case 345: break;
          case 141: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [326] { return TYPEOF; }");
            { return TYPEOF;
            }
          case 346: break;
          case 142: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [312] { return RETURN; }");
            { return RETURN;
            }
          case 347: break;
          case 143: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { return UINT16; }");
            { return UINT16;
            }
          case 348: break;
          case 144: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [331] { return UINT64; }");
            { return UINT64;
            }
          case 349: break;
          case 145: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [330] { return UINT32; }");
            { return UINT32;
            }
          case 350: break;
          case 146: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [257] { return ASSERT; }");
            { return ASSERT;
            }
          case 351: break;
          case 147: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [318] { return STRUCT; }");
            { return STRUCT;
            }
          case 352: break;
          case 148: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [316] { return STATIC; }");
            { return STATIC;
            }
          case 353: break;
          case 149: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [313] { return SEALED; }");
            { return SEALED;
            }
          case 354: break;
          case 150: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [314] { return SIZEOF; }");
            { return SIZEOF;
            }
          case 355: break;
          case 151: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [319] { return SWITCH; }");
            { return SWITCH;
            }
          case 356: break;
          case 152: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [289] { return IMPORT; }");
            { return IMPORT;
            }
          case 357: break;
          case 153: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [301] { return NATIVE; }");
            { return NATIVE;
            }
          case 358: break;
          case 154: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [273] { return DOUBLE; }");
            { return DOUBLE;
            }
          case 359: break;
          case 155: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [271] { return DELETE; }");
            { return DELETE;
            }
          case 360: break;
          case 156: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [310] { return PUBLIC; }");
            { return PUBLIC;
            }
          case 361: break;
          case 157: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [477] { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 362: break;
          case 158: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [474] { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 363: break;
          case 159: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [475] { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE;
            }
          case 364: break;
          case 160: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [486] { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA;
            }
          case 365: break;
          case 161: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [506] { yybegin(YYINITIAL); return PRAGMA_UNUSED; }");
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 366: break;
          case 162: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [260] { return BUILTIN; }");
            { return BUILTIN;
            }
          case 367: break;
          case 163: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [327] { return TYPESET; }");
            { return TYPESET;
            }
          case 368: break;
          case 164: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [325] { return TYPEDEF; }");
            { return TYPEDEF;
            }
          case 369: break;
          case 165: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [281] { return FOREACH; }");
            { return FOREACH;
            }
          case 370: break;
          case 166: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [282] { return FORWARD; }");
            { return FORWARD;
            }
          case 371: break;
          case 167: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [284] { return FUNCTAG; }");
            { return FUNCTAG;
            }
          case 372: break;
          case 168: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [279] { return FINALLY; }");
            { return FINALLY;
            }
          case 373: break;
          case 169: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [255] { return ACQUIRE; }");
            { return ACQUIRE;
            }
          case 374: break;
          case 170: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [336] { return VARIANT; }");
            { return VARIANT;
            }
          case 375: break;
          case 171: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [338] { return VIRTUAL; }");
            { return VIRTUAL;
            }
          case 376: break;
          case 172: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [337] { return VIEW_AS; }");
            { return VIEW_AS;
            }
          case 377: break;
          case 173: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [264] { return CELLSOF; }");
            { return CELLSOF;
            }
          case 378: break;
          case 174: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [262] { return CAST_TO; }");
            { return CAST_TO;
            }
          case 379: break;
          case 175: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [269] { return DEFAULT; }");
            { return DEFAULT;
            }
          case 380: break;
          case 176: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [270] { return DEFINED; }");
            { return DEFINED;
            }
          case 381: break;
          case 177: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [308] { return PRIVATE; }");
            { return PRIVATE;
            }
          case 382: break;
          case 178: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [307] { return PACKAGE; }");
            { return PACKAGE;
            }
          case 383: break;
          case 179: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [484] { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE;
            }
          case 384: break;
          case 180: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [505] { yybegin(YYINITIAL); return PRAGMA_TABSIZE; }");
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 385: break;
          case 181: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [501] { yybegin(YYINITIAL); return PRAGMA_DYNAMIC; }");
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 386: break;
          case 182: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [306] { return OPERATOR; }");
            { return OPERATOR;
            }
          case 387: break;
          case 183: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { return READONLY; }");
            { return READONLY;
            }
          case 388: break;
          case 184: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [278] { return EXPLICIT; }");
            { return EXPLICIT;
            }
          case 389: break;
          case 185: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [285] { return FUNCTION; }");
            { return FUNCTION;
            }
          case 390: break;
          case 186: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [283] { return FUNCENUM; }");
            { return FUNCENUM;
            }
          case 391: break;
          case 187: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [340] { return VOLATILE; }");
            { return VOLATILE;
            }
          case 392: break;
          case 188: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [267] { return CONTINUE; }");
            { return CONTINUE;
            }
          case 393: break;
          case 189: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [288] { return IMPLICIT; }");
            { return IMPLICIT;
            }
          case 394: break;
          case 190: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [479] { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 395: break;
          case 191: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [502] { yybegin(YYINITIAL); return PRAGMA_RATIONAL; }");
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 396: break;
          case 192: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [498] { yybegin(YYINITIAL); return PRAGMA_CODEPAGE; }");
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 397: break;
          case 193: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [499] { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR; }");
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 398: break;
          case 194: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [504] { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS; }");
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS;
            }
          case 399: break;
          case 195: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [545] { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL; }");
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL;
            }
          case 400: break;
          case 196: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [544] { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED; }");
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED;
            }
          case 401: break;
          case 197: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [296] { return INTERFACE; }");
            { return INTERFACE;
            }
          case 402: break;
          case 198: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [300] { return NAMESPACE; }");
            { return NAMESPACE;
            }
          case 403: break;
          case 199: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [299] { return METHODMAP; }");
            { return METHODMAP;
            }
          case 404: break;
          case 200: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [309] { return PROTECTED; }");
            { return PROTECTED;
            }
          case 405: break;
          case 201: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [480] { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 406: break;
          case 202: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [503] { yybegin(YYINITIAL); return PRAGMA_SEMICOLON; }");
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 407: break;
          case 203: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [487] { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE; }");
            { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE;
            }
          case 408: break;
          case 204: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [500] { yybegin(IN_PRAGMA_DEPRECATED_STRING_PRE); return PRAGMA_DEPRECATED; }");
            { yybegin(IN_PRAGMA_DEPRECATED_STRING_PRE); return PRAGMA_DEPRECATED;
            }
          case 409: break;
          case 205: 
            System.out.println("match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [304] { return NULLABLE; }");
            { return NULLABLE;
            }
          case 410: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java SourcePawnLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        SourcePawnLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new SourcePawnLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
