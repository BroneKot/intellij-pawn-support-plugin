/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;

import org.jetbrains.annotations.NotNull;

import java.io.Reader;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.intellij.sourcepawn.lexer.SourcePawnTokenTypes.*;
import net.alliedmods.intellij.sourcepawn.SourcePawnUtils;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SourcePawn.flex</tt>
 */
class SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_PREPROCESSOR = 2;
  public static final int IN_PREPROCESSOR_PRAGMA_PRE = 4;
  public static final int IN_PREPROCESSOR_PRAGMA = 6;
  public static final int IN_PRAGMA_DEPRECATED_STRING_PRE = 8;
  public static final int IN_PRAGMA_DEPRECATED_STRING = 10;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE = 12;
  public static final int IN_PREPROCESSOR_PRAGMA_NEWDECLS = 14;
  public static final int IN_CHARACTER_LITERAL = 16;
  public static final int IN_STRING_LITERAL = 18;
  public static final int IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE = 20;
  public static final int IN_CHARACTER_LITERAL_DECIMAL_ESCAPE = 22;
  public static final int IN_CHARACTER_LITERAL_UNICODE_ESCAPE = 24;
  public static final int IN_LINE_COMMENT = 26;
  public static final int IN_BLOCK_COMMENT = 28;
  public static final int IN_DOC_COMMENT = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\106\1\3\22\0\1\1\1\42\1\105\1\43\1\0\1\44\1\35\1\104\1\57"+
    "\1\60\1\37\1\45\1\41\1\33\1\32\1\46\1\14\1\11\1\100\1\77\1\101\1\12\1\76\1"+
    "\12\1\75\1\7\1\53\1\20\1\52\1\36\1\51\1\0\1\6\6\13\24\10\1\4\1\5\1\56\1\40"+
    "\1\31\1\0\1\26\1\15\1\61\1\67\1\24\1\25\1\74\1\66\1\63\1\102\1\64\1\27\1\70"+
    "\1\65\1\16\1\71\1\62\1\22\1\30\1\21\1\23\1\34\1\73\1\17\1\72\1\103\1\54\1"+
    "\50\1\55\1\47\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\3\0\1\3\1\4\2\5\1\6"+
    "\1\3\1\7\1\10\1\11\1\10\2\11\1\12\10\11"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\3\1\34\1\35\1\36\1\37\1\40"+
    "\10\11\1\41\1\42\12\43\1\44\10\43\1\45\1\43"+
    "\1\46\1\47\1\50\1\46\1\51\4\43\1\52\1\53"+
    "\1\54\2\46\1\55\1\56\1\57\1\60\1\61\2\1"+
    "\2\2\2\46\2\62\3\46\1\63\2\46\1\64\1\63"+
    "\1\64\1\0\1\4\1\10\1\0\3\10\22\11\1\65"+
    "\10\11\1\66\1\67\1\70\3\11\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\4\11\1\114\1\115\4\11\1\116\10\11\10\0\1\117"+
    "\4\0\1\44\12\0\1\45\1\0\1\47\1\0\1\51"+
    "\2\0\2\120\2\121\1\2\3\0\1\63\1\122\1\0"+
    "\1\64\1\63\1\64\1\123\1\124\4\11\1\125\15\11"+
    "\1\126\4\11\1\127\10\11\1\130\2\11\1\131\2\11"+
    "\1\103\1\132\1\133\1\134\1\135\5\11\1\136\2\11"+
    "\1\137\16\11\27\0\2\46\2\140\1\0\6\11\1\141"+
    "\6\11\1\142\1\11\1\143\1\144\17\11\1\145\3\11"+
    "\1\146\5\11\1\147\1\150\2\11\1\151\1\152\4\11"+
    "\1\153\6\11\1\154\5\11\1\155\1\11\1\156\3\0"+
    "\1\157\2\0\1\160\1\0\1\161\16\0\1\124\1\0"+
    "\1\162\3\11\1\163\1\164\5\11\1\165\1\11\1\166"+
    "\1\167\2\11\1\170\10\11\1\171\3\11\1\172\10\11"+
    "\1\173\1\11\1\174\1\11\1\175\1\11\1\176\1\177"+
    "\15\11\1\200\1\0\1\201\1\202\2\0\1\203\20\0"+
    "\1\11\1\204\1\11\1\205\2\11\1\206\1\11\1\207"+
    "\1\210\1\211\7\11\1\212\1\11\1\213\1\214\1\215"+
    "\1\216\1\217\11\11\1\220\1\11\1\221\1\11\1\222"+
    "\2\11\1\223\3\11\1\224\1\11\1\0\1\225\2\0"+
    "\1\226\1\0\1\227\1\230\2\0\1\231\10\0\1\232"+
    "\1\11\1\233\1\234\2\11\1\235\1\236\1\237\2\11"+
    "\1\240\1\241\2\11\1\242\1\243\1\244\1\11\1\245"+
    "\1\246\3\11\1\247\1\250\2\11\1\251\1\252\3\0"+
    "\1\253\1\254\6\0\1\255\2\0\1\256\1\257\1\260"+
    "\1\261\1\262\1\11\1\263\1\264\1\11\1\265\3\11"+
    "\2\0\1\266\1\267\1\0\1\270\1\271\1\272\1\0"+
    "\1\273\1\274\1\11\1\275\1\276\1\277\1\300\1\0"+
    "\1\301\1\302\1\0\1\11\1\303\1\304\1\11\1\305";

  private static int [] zzUnpackAction() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u0470\0\u04fe\0\u0470\0\u0545\0\u058c\0\u05d3"+
    "\0\u058c\0\u061a\0\u0661\0\u06a8\0\u0470\0\u06ef\0\u0736\0\u077d"+
    "\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0470\0\u0b5f\0\u0470"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\u0470\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50"+
    "\0\u0470\0\u0470\0\u0470\0\u0470\0\u0470\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0470\0\u0470\0\u0470"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u0470\0\u15e9"+
    "\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u0470\0\u0470\0\u0470"+
    "\0\u1793\0\u17da\0\u1793\0\u0470\0\u0470\0\u0470\0\u0470\0\u1821"+
    "\0\u0470\0\u1868\0\u0470\0\u18af\0\u18f6\0\u0470\0\u193d\0\u0470"+
    "\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75"+
    "\0\u0545\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e"+
    "\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u0470\0\u0470\0\u252a\0\u2571\0\u25b8"+
    "\0\u0470\0\u0470\0\u0470\0\u0470\0\u0470\0\u0470\0\u0470\0\u0470"+
    "\0\u0470\0\u0470\0\u25ff\0\u2646\0\u0470\0\u0470\0\u0470\0\u268d"+
    "\0\u0470\0\u26d4\0\u0470\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u058c"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60"+
    "\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u0470\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u1295\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u1514\0\u31ec\0\u16be"+
    "\0\u3233\0\u1677\0\u327a\0\u32c1\0\u3308\0\u0470\0\u334f\0\u3396"+
    "\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u0470\0\u3587"+
    "\0\u35ce\0\u3615\0\u365c\0\u0470\0\u36a3\0\u36ea\0\u3731\0\u3778"+
    "\0\u37bf\0\u058c\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u058c\0\u3d04\0\u3d4b\0\u3d92"+
    "\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u0470\0\u3f3c\0\u3f83"+
    "\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u0470\0\u412d\0\u0470"+
    "\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365"+
    "\0\u058c\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556"+
    "\0\u459d\0\u45e4\0\u462b\0\u4672\0\u46b9\0\u4700\0\u4747\0\u478e"+
    "\0\u47d5\0\u481c\0\u4863\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6"+
    "\0\u4a0d\0\u4a54\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe"+
    "\0\u4c45\0\u4c8c\0\u4cd3\0\u4d1a\0\u4d61\0\u334f\0\u346b\0\u34b2"+
    "\0\u0470\0\u3587\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4\0\u4f0b"+
    "\0\u4f52\0\u058c\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u058c\0\u5143\0\u058c\0\u058c\0\u518a\0\u51d1\0\u5218\0\u525f"+
    "\0\u52a6\0\u52ed\0\u5334\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497"+
    "\0\u54de\0\u5525\0\u556c\0\u058c\0\u55b3\0\u55fa\0\u5641\0\u0470"+
    "\0\u5688\0\u56cf\0\u5716\0\u575d\0\u57a4\0\u058c\0\u058c\0\u57eb"+
    "\0\u5832\0\u058c\0\u058c\0\u5879\0\u58c0\0\u5907\0\u594e\0\u058c"+
    "\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u058c\0\u5b3f"+
    "\0\u5b86\0\u5bcd\0\u5c14\0\u5c5b\0\u058c\0\u5ca2\0\u058c\0\u5ce9"+
    "\0\u5d30\0\u5d77\0\u5dbe\0\u5e05\0\u5e4c\0\u0470\0\u5e93\0\u0470"+
    "\0\u5eda\0\u5f21\0\u5f68\0\u5faf\0\u5ff6\0\u603d\0\u6084\0\u60cb"+
    "\0\u6112\0\u6159\0\u61a0\0\u61e7\0\u622e\0\u6275\0\u62bc\0\u62bc"+
    "\0\u058c\0\u6303\0\u634a\0\u6391\0\u058c\0\u058c\0\u63d8\0\u641f"+
    "\0\u6466\0\u64ad\0\u64f4\0\u058c\0\u653b\0\u058c\0\u058c\0\u6582"+
    "\0\u65c9\0\u058c\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773"+
    "\0\u67ba\0\u6801\0\u058c\0\u6848\0\u688f\0\u68d6\0\u058c\0\u691d"+
    "\0\u6964\0\u69ab\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u058c"+
    "\0\u6b55\0\u058c\0\u6b9c\0\u058c\0\u6be3\0\u058c\0\u058c\0\u6c2a"+
    "\0\u6c71\0\u6cb8\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62"+
    "\0\u6ea9\0\u6ef0\0\u6f37\0\u6f7e\0\u058c\0\u6fc5\0\u0470\0\u0470"+
    "\0\u700c\0\u7053\0\u0470\0\u709a\0\u70e1\0\u7128\0\u716f\0\u71b6"+
    "\0\u71fd\0\u7244\0\u728b\0\u72d2\0\u7319\0\u7360\0\u73a7\0\u73ee"+
    "\0\u7435\0\u747c\0\u74c3\0\u750a\0\u058c\0\u7551\0\u058c\0\u7598"+
    "\0\u75df\0\u058c\0\u7626\0\u058c\0\u058c\0\u058c\0\u766d\0\u76b4"+
    "\0\u76fb\0\u7742\0\u7789\0\u77d0\0\u7817\0\u058c\0\u785e\0\u058c"+
    "\0\u058c\0\u058c\0\u058c\0\u058c\0\u78a5\0\u78ec\0\u7933\0\u797a"+
    "\0\u79c1\0\u7a08\0\u7a4f\0\u7a96\0\u7add\0\u058c\0\u7b24\0\u058c"+
    "\0\u7b6b\0\u058c\0\u7bb2\0\u7bf9\0\u058c\0\u7c40\0\u7c87\0\u7cce"+
    "\0\u058c\0\u7d15\0\u7d5c\0\u0470\0\u7da3\0\u7dea\0\u0470\0\u7e31"+
    "\0\u0470\0\u0470\0\u7e78\0\u7ebf\0\u0470\0\u7f06\0\u7f4d\0\u7f94"+
    "\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u80f7\0\u058c\0\u813e\0\u058c"+
    "\0\u058c\0\u8185\0\u81cc\0\u058c\0\u058c\0\u058c\0\u8213\0\u825a"+
    "\0\u058c\0\u058c\0\u82a1\0\u82e8\0\u058c\0\u058c\0\u058c\0\u832f"+
    "\0\u058c\0\u058c\0\u8376\0\u83bd\0\u8404\0\u058c\0\u058c\0\u844b"+
    "\0\u8492\0\u058c\0\u058c\0\u84d9\0\u8520\0\u8567\0\u0470\0\u0470"+
    "\0\u85ae\0\u85f5\0\u863c\0\u8683\0\u86ca\0\u8711\0\u0470\0\u8758"+
    "\0\u879f\0\u058c\0\u058c\0\u058c\0\u058c\0\u058c\0\u87e6\0\u058c"+
    "\0\u058c\0\u882d\0\u058c\0\u8874\0\u88bb\0\u8902\0\u8949\0\u8990"+
    "\0\u0470\0\u0470\0\u89d7\0\u0470\0\u0470\0\u0470\0\u8a1e\0\u0470"+
    "\0\u0470\0\u8a65\0\u058c\0\u058c\0\u058c\0\u058c\0\u8aac\0\u0470"+
    "\0\u0470\0\u8af3\0\u8b3a\0\u0470\0\u0470\0\u8b81\0\u058c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\2\30\1\31\1\32\1\33\1\34\1\31\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\31\1\77\1\31\1\100\1\31\1\101\1\102"+
    "\1\103\1\31\1\104\1\105\5\30\2\31\1\106\1\107"+
    "\1\21\21\110\1\111\1\110\1\112\1\113\1\114\1\115"+
    "\1\116\33\110\1\117\3\110\1\120\1\110\1\121\16\110"+
    "\1\122\3\110\1\123\122\110\1\124\1\125\1\126\4\110"+
    "\1\127\30\110\1\130\3\110\1\131\1\110\1\132\20\110"+
    "\1\133\3\110\1\134\101\110\1\135\1\136\2\137\1\135"+
    "\1\140\100\135\1\137\1\110\1\141\3\110\1\142\102\110"+
    "\1\136\3\110\1\143\10\110\1\144\3\110\1\145\64\110"+
    "\2\146\2\147\100\146\1\150\1\146\1\147\2\151\2\147"+
    "\1\151\1\152\77\151\1\153\10\147\1\154\1\147\2\154"+
    "\1\147\1\154\1\155\1\147\1\155\1\147\2\155\1\147"+
    "\3\155\5\147\1\155\7\147\1\156\20\147\1\155\7\147"+
    "\5\154\2\147\2\156\1\147\7\157\1\160\1\157\2\160"+
    "\1\157\1\160\3\157\1\161\54\157\5\160\14\157\1\162"+
    "\1\157\5\162\2\157\1\163\3\157\3\162\32\157\1\162"+
    "\5\157\1\162\5\157\5\162\5\157\1\164\1\165\1\166"+
    "\1\167\102\164\1\170\1\171\1\172\2\173\33\171\1\174"+
    "\46\171\1\170\1\175\1\176\2\177\33\175\1\200\47\175"+
    "\110\0\1\22\3\0\1\201\103\0\1\23\105\0\1\201"+
    "\1\22\1\202\111\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\23\31\12\0\1\203\1\0\2\203\1\0\1\203"+
    "\14\0\1\203\1\204\42\0\5\203\14\0\1\203\1\0"+
    "\2\203\1\0\1\203\1\205\1\206\1\207\11\0\1\203"+
    "\1\204\42\0\5\203\13\0\12\31\1\0\1\31\1\210"+
    "\1\211\6\31\2\0\1\31\24\0\23\31\11\0\7\31"+
    "\1\212\2\31\1\0\11\31\2\0\1\31\24\0\10\31"+
    "\1\213\12\31\11\0\12\31\1\0\1\31\1\214\3\31"+
    "\1\215\3\31\2\0\1\31\24\0\5\31\1\216\3\31"+
    "\1\217\11\31\11\0\12\31\1\0\3\31\1\220\5\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\7\31"+
    "\1\221\1\31\2\0\1\31\24\0\2\31\1\222\1\31"+
    "\1\223\16\31\11\0\11\31\1\224\1\0\6\31\1\225"+
    "\2\31\2\0\1\31\24\0\4\31\1\226\16\31\11\0"+
    "\10\31\1\227\1\31\1\0\2\31\1\230\6\31\2\0"+
    "\1\31\24\0\2\31\1\231\20\31\11\0\12\31\1\0"+
    "\7\31\1\232\1\31\2\0\1\31\24\0\1\233\22\31"+
    "\11\0\12\31\1\0\3\31\1\234\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\1\235\2\31\1\236"+
    "\2\31\1\237\2\31\2\0\1\31\24\0\2\31\1\240"+
    "\7\31\1\241\10\31\11\0\12\31\1\0\10\31\1\242"+
    "\2\0\1\31\24\0\23\31\35\0\1\243\107\0\1\244"+
    "\2\0\1\245\56\0\10\31\1\246\1\31\1\0\5\31"+
    "\1\247\3\31\2\0\1\31\24\0\2\31\1\250\20\31"+
    "\40\0\1\251\1\252\106\0\1\253\106\0\1\254\106\0"+
    "\1\255\106\0\1\256\106\0\1\257\106\0\1\260\6\0"+
    "\1\261\77\0\1\262\1\263\6\0\1\264\76\0\1\265"+
    "\11\0\1\266\74\0\1\267\12\0\1\270\73\0\1\271"+
    "\13\0\1\272\107\0\1\273\41\0\10\31\1\274\1\31"+
    "\1\0\3\31\1\275\1\31\1\276\3\31\2\0\1\31"+
    "\24\0\5\31\1\277\15\31\11\0\12\31\1\0\4\31"+
    "\1\300\4\31\2\0\1\31\24\0\4\31\1\301\2\31"+
    "\1\302\13\31\11\0\12\31\1\0\2\31\1\303\1\304"+
    "\1\31\1\305\3\31\2\0\1\31\24\0\23\31\11\0"+
    "\10\31\1\306\1\31\1\0\3\31\1\307\5\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\3\31\1\310"+
    "\5\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\31\1\311\1\312\2\31\1\313\3\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\2\31\1\314\2\31\1\315\15\31\11\0\10\31"+
    "\1\316\1\31\1\0\11\31\2\0\1\31\24\0\23\31"+
    "\25\0\1\317\151\0\1\320\43\0\1\321\4\0\1\322"+
    "\35\0\1\323\104\0\1\324\53\0\1\325\141\0\1\326"+
    "\50\0\1\327\37\0\1\330\45\0\1\331\104\0\1\332"+
    "\65\0\1\122\3\0\1\333\102\0\1\333\1\122\1\334"+
    "\131\0\1\335\106\0\1\336\145\0\1\337\45\0\1\340"+
    "\100\0\1\341\2\0\1\342\111\0\1\343\106\0\1\344"+
    "\45\0\1\345\15\0\1\133\3\0\1\346\102\0\1\346"+
    "\1\133\1\347\104\0\1\135\106\0\1\136\3\0\1\350"+
    "\102\0\1\140\1\136\1\351\104\0\1\141\3\0\1\352"+
    "\102\0\1\352\1\141\1\353\104\0\1\350\1\136\1\351"+
    "\174\0\1\354\41\0\1\355\62\0\2\356\2\0\102\356"+
    "\1\0\1\356\1\357\1\360\1\361\102\356\10\0\1\160"+
    "\1\0\2\160\1\0\1\160\3\0\1\161\54\0\5\160"+
    "\14\0\1\362\1\0\5\362\2\0\1\163\3\0\3\362"+
    "\32\0\1\362\5\0\1\362\5\0\5\362\5\0\1\170"+
    "\1\164\2\0\104\170\1\165\1\166\1\167\103\170\2\0"+
    "\1\166\105\0\1\363\106\0\1\364\2\173\33\0\1\365"+
    "\50\0\1\366\2\173\104\0\1\363\44\0\1\367\41\0"+
    "\1\370\106\0\1\371\106\0\1\370\2\372\142\0\1\373"+
    "\6\0\1\374\41\0\2\22\2\0\1\201\110\0\1\203"+
    "\1\0\2\203\1\0\1\203\14\0\1\203\43\0\5\203"+
    "\14\0\1\375\1\0\2\375\1\0\1\375\60\0\5\375"+
    "\16\0\1\205\2\0\1\205\14\0\1\205\66\0\2\206"+
    "\1\0\1\206\14\0\1\206\44\0\4\206\14\0\1\207"+
    "\1\0\5\207\6\0\3\207\2\0\1\207\27\0\1\207"+
    "\5\0\1\207\5\0\5\207\13\0\12\31\1\0\3\31"+
    "\1\376\5\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\2\31\1\377\20\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\21\31"+
    "\1\u0100\1\31\11\0\12\31\1\0\3\31\1\u0101\5\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\11\31\1\u0102\11\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\13\31\1\u0103\7\31"+
    "\11\0\12\31\1\0\1\31\1\u0104\7\31\2\0\1\31"+
    "\24\0\2\31\1\u0105\20\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\10\31\1\u0106\12\31\11\0\12\31"+
    "\1\0\1\u0107\4\31\1\u0108\3\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\2\31\1\u0109\20\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\4\31\1\u010a\16\31\11\0\12\31\1\0"+
    "\11\31\2\0\1\31\24\0\2\31\1\u010b\20\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\2\31\1\u010c"+
    "\5\31\1\u010d\12\31\11\0\12\31\1\0\7\31\1\u010e"+
    "\1\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\2\31\1\u010f\6\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\1\31\1\u0110\7\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\4\31\1\u0111\16\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\4\31\1\u0112\16\31\11\0\12\31\1\0"+
    "\7\31\1\u0113\1\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\1\31\1\u0114"+
    "\21\31\11\0\12\31\1\0\1\u0115\10\31\2\0\1\31"+
    "\24\0\23\31\11\0\10\31\1\u0116\1\31\1\0\1\31"+
    "\1\u0117\3\31\1\u0118\3\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\5\31\1\u0119\3\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\3\31\1\u011a\5\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\22\31\1\u011b\11\0\12\31\1\0"+
    "\11\31\2\0\1\31\24\0\2\31\1\u011c\20\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\4\31\1\u011d"+
    "\16\31\35\0\1\u011e\62\0\12\31\1\0\6\31\1\u011f"+
    "\2\31\2\0\1\31\24\0\2\31\1\u0120\20\31\11\0"+
    "\12\31\1\0\1\31\1\u0121\7\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\1\31\1\u0122\1\31\1\u0123"+
    "\5\31\2\0\1\31\24\0\23\31\4\0\1\u0124\35\0"+
    "\1\u0125\50\0\1\264\143\0\1\u0126\12\0\1\u0127\73\0"+
    "\1\u0128\56\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\4\31\1\u0129\16\31\11\0\12\31\1\0\6\31\1\u012a"+
    "\2\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\u012b\6\31\1\u012c\1\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\5\31\1\u012d\3\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\1\u012e\10\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\10\31\1\u012f\12\31\11\0\12\31\1\0"+
    "\6\31\1\u0130\2\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\12\31\1\u0131"+
    "\10\31\11\0\12\31\1\0\1\u0132\10\31\2\0\1\31"+
    "\24\0\7\31\1\u0133\13\31\11\0\12\31\1\0\2\31"+
    "\1\u0134\6\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\4\31\1\u0135\1\31\1\u0136\2\31\2\0\1\31"+
    "\24\0\1\u0137\22\31\11\0\12\31\1\0\1\u0138\10\31"+
    "\2\0\1\31\24\0\23\31\11\0\10\31\1\u0139\1\31"+
    "\1\0\11\31\2\0\1\31\24\0\2\31\1\u013a\20\31"+
    "\11\0\7\31\1\u013b\2\31\1\0\11\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\1\u013c\22\31\11\0\12\31\1\0\1\u013d\10\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\2\31\1\u013e\20\31\11\0\12\31"+
    "\1\0\1\u013f\10\31\2\0\1\31\24\0\23\31\75\0"+
    "\1\u0140\103\0\1\u0141\41\0\1\u0142\114\0\1\u0143\145\0"+
    "\1\u0144\46\0\1\u0145\107\0\1\u0146\143\0\1\u0147\102\0"+
    "\1\u0148\52\0\1\u0149\107\0\1\u014a\61\0\2\122\2\0"+
    "\1\333\116\0\1\u014b\112\0\1\u014c\110\0\1\u014d\153\0"+
    "\1\u014e\105\0\1\u014f\41\0\1\u0150\157\0\1\u0151\104\0"+
    "\1\u0152\102\0\1\u0153\22\0\2\133\2\0\1\346\102\0"+
    "\2\136\2\0\1\350\102\0\2\141\2\0\1\352\122\0"+
    "\1\u0154\147\0\1\u0155\25\0\1\u0156\1\360\1\361\104\0"+
    "\1\360\106\0\2\360\124\0\1\163\66\0\1\170\1\u0157"+
    "\2\0\33\170\1\0\6\170\1\0\41\170\1\u0158\2\173"+
    "\33\170\1\365\6\170\1\0\40\170\46\0\1\367\41\0"+
    "\1\366\105\0\1\u0159\1\u015a\35\u0159\1\0\6\u0159\1\0"+
    "\41\u0159\1\371\35\u0159\1\0\6\u0159\1\0\40\u0159\2\0"+
    "\2\372\142\0\1\373\73\0\1\u015b\70\0\12\31\1\0"+
    "\5\31\1\u015c\3\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\6\31\1\u015d\2\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\3\31\1\u015e\5\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\1\31\1\u015f"+
    "\7\31\2\0\1\31\24\0\23\31\11\0\10\31\1\u0160"+
    "\1\31\1\0\11\31\2\0\1\31\24\0\23\31\11\0"+
    "\10\31\1\u0161\1\31\1\0\11\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\7\31\1\u0162\1\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\3\31\1\u0163"+
    "\5\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\2\31\1\u0164\6\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\6\31\1\u0165"+
    "\14\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\4\31\1\u0166\16\31\11\0\12\31\1\0\1\u0167\10\31"+
    "\2\0\1\31\24\0\23\31\11\0\10\31\1\u0168\1\31"+
    "\1\0\11\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\1\u0169\10\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\6\31\1\u016a\2\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\3\31\1\u016b\5\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\7\31\1\u016c\13\31\11\0\12\31\1\0"+
    "\3\31\1\u016d\5\31\2\0\1\31\24\0\12\31\1\u016e"+
    "\10\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\1\u016f\22\31\11\0\12\31\1\0\5\31\1\u0170\3\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\3\31"+
    "\1\u0171\5\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\2\31\1\u0172\6\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\1\u0173"+
    "\22\31\11\0\12\31\1\0\2\31\1\u0174\6\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\1\u0175\10\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\6\31"+
    "\1\u0176\2\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\3\31\1\u0177\5\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\3\31\1\u0178\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\1\u0179\10\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\2\31\1\u017a"+
    "\6\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\5\31\1\u017b\3\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\6\31\1\u017c"+
    "\14\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\2\31\1\u017d\20\31\11\0\12\31\1\0\1\u017e\10\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\12\31\1\u017f\10\31\4\0\1\u0124"+
    "\106\0\1\u0125\143\0\1\u0180\56\0\12\31\1\0\1\u0181"+
    "\6\31\1\u0182\1\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\6\31\1\u0183\2\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\1\u0184\22\31\11\0\12\31\1\0\1\u0185\2\31\1\u0186"+
    "\5\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\31\1\u0187\7\31\2\0\1\31\24\0\23\31\11\0"+
    "\3\31\1\u0188\6\31\1\0\3\31\1\u0189\5\31\2\0"+
    "\1\31\24\0\4\31\1\u018a\7\31\1\u018b\1\u018c\1\u018d"+
    "\4\31\11\0\10\31\1\u018e\1\31\1\0\6\31\1\u018f"+
    "\2\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\6\31\1\u0190\2\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\2\31\1\u0191"+
    "\20\31\11\0\12\31\1\0\3\31\1\u0192\5\31\2\0"+
    "\1\31\24\0\23\31\11\0\7\31\1\u0193\2\31\1\0"+
    "\11\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\5\31\1\u0194\3\31\2\0\1\31\24\0\2\31\1\u0195"+
    "\20\31\11\0\12\31\1\0\3\31\1\u0196\5\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\6\31\1\u0197"+
    "\2\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\11\31\2\0\1\31\24\0\5\31\1\u0198\15\31\11\0"+
    "\12\31\1\0\1\u0199\10\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\u019a\24\0\23\31"+
    "\11\0\12\31\1\0\6\31\1\u019b\2\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\3\31\1\u019c\17\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\5\31\1\u019d\15\31\11\0\12\31"+
    "\1\0\6\31\1\u019e\2\31\2\0\1\31\24\0\23\31"+
    "\11\0\10\31\1\u019f\1\31\1\0\11\31\2\0\1\31"+
    "\24\0\23\31\66\0\1\u01a0\47\0\1\u01a1\100\0\1\u01a2"+
    "\114\0\1\u01a3\112\0\1\u01a4\32\0\1\u01a5\47\0\1\u01a6"+
    "\106\0\1\u01a7\106\0\1\u01a8\111\0\1\u01a9\142\0\1\u01aa"+
    "\117\0\1\u01ab\42\0\1\u01ac\141\0\1\u01ad\53\0\1\u01ae"+
    "\141\0\1\u01af\47\0\1\u01b0\111\0\1\u01b1\146\0\1\u01b2"+
    "\41\0\1\u01b3\112\0\1\u01b4\143\0\1\u01b5\46\0\1\u01b6"+
    "\72\0\1\u01b7\1\0\2\u01b7\1\0\1\u01b7\16\0\1\u01b8"+
    "\41\0\5\u01b7\13\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\3\31\1\u01b9\17\31\11\0\12\31\1\0\1\u01ba"+
    "\10\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\11\31\2\0\1\31\24\0\1\u01bb\22\31\11\0\12\31"+
    "\1\0\5\31\1\u01bc\3\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\4\31\1\u01bd\4\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\12\31\1\u01be\10\31\11\0\10\31\1\u01bf\1\31"+
    "\1\0\7\31\1\u01c0\1\31\2\0\1\31\24\0\6\31"+
    "\1\u01c1\14\31\11\0\12\31\1\0\1\31\1\u01c2\7\31"+
    "\2\0\1\31\24\0\23\31\11\0\10\31\1\u01c3\1\31"+
    "\1\0\11\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\13\31\1\u01c4\7\31"+
    "\11\0\3\31\1\u01c5\6\31\1\0\11\31\2\0\1\31"+
    "\24\0\4\31\1\u01c6\7\31\1\u01c7\1\u01c8\1\u01c9\4\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\4\31"+
    "\1\u01ca\16\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\2\31\1\u01cb\20\31\11\0\12\31\1\0\5\31"+
    "\1\u01cc\3\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\5\31\1\u01cd\3\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\1\u01ce\2\31\1\u01cf\5\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\6\31\1\u01d0"+
    "\2\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\31\1\u01d1\7\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\2\31\1\u01d2"+
    "\20\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\3\31\1\u01d3\17\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\1\u01d4\22\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\2\31\1\u01d5\20\31\11\0\12\31"+
    "\1\0\3\31\1\u01d6\5\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\10\31"+
    "\1\u01d7\12\31\11\0\10\31\1\u01d8\1\31\1\0\11\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\1\u01d9\22\31\11\0\12\31\1\0"+
    "\6\31\1\u01da\2\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\1\u01db\10\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\5\31\1\u01dc\3\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\2\31\1\u01dd\6\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\10\31"+
    "\1\u01de\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\11\31\2\0\1\31\24\0\2\31\1\u01df\20\31\11\0"+
    "\12\31\1\0\1\u01e0\10\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\7\31\1\u01e1\1\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\5\31\1\u01e2\15\31\11\0\12\31\1\0\10\31"+
    "\1\u01e3\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\11\31\2\0\1\31\24\0\15\31\1\u01e4\5\31\11\0"+
    "\12\31\1\0\1\31\1\u01e5\7\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\20\31\1\u01e6\2\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\17\31\1\u01e7\3\31\11\0\12\31\1\0"+
    "\1\31\1\u01e8\7\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\2\31\1\u01e9"+
    "\20\31\11\0\12\31\1\0\11\31\2\0\1\u01ea\24\0"+
    "\23\31\11\0\12\31\1\0\7\31\1\u01eb\1\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\6\31\1\u01ec"+
    "\2\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\2\31\1\u01ed\6\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\4\31\1\u01ee"+
    "\16\31\11\0\12\31\1\0\1\u01ef\10\31\2\0\1\31"+
    "\24\0\23\31\11\0\10\31\1\u01f0\1\31\1\0\11\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\3\31"+
    "\1\u01f1\5\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\5\31\1\u01f2\3\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\2\31"+
    "\1\u01f3\20\31\11\0\12\31\1\0\5\31\1\u01f4\3\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\3\31"+
    "\1\u01f5\5\31\2\0\1\31\24\0\23\31\70\0\1\u01f6"+
    "\46\0\1\u01f7\103\0\1\u01f8\147\0\1\u01f9\104\0\1\u01fa"+
    "\52\0\1\u01fb\37\0\1\u01fc\43\0\1\u01fd\107\0\1\u01fe"+
    "\150\0\1\u01ff\111\0\1\u0200\101\0\1\u0201\41\0\1\u0202"+
    "\114\0\1\u0203\143\0\1\u0204\116\0\1\u0205\76\0\1\u0206"+
    "\51\0\1\u0207\106\0\1\u0208\152\0\1\u0209\34\0\1\u020a"+
    "\153\0\1\u020b\32\0\1\u01b7\1\0\2\u01b7\1\0\1\u01b7"+
    "\60\0\5\u01b7\13\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\2\31\1\u020c\20\31\11\0\12\31\1\0\1\u020d"+
    "\10\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\u020e\10\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\4\31\1\u020f\4\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\3\31\1\u0210\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\3\31\1\u0211\5\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\4\31\1\u0212\16\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\4\31\1\u0213\16\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\15\31"+
    "\1\u0214\5\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\20\31\1\u0215\2\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\17\31\1\u0216\3\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\1\u0217\22\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\1\u0218\22\31"+
    "\11\0\12\31\1\0\1\31\1\u0219\7\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\5\31\1\u021a\3\31"+
    "\2\0\1\31\24\0\2\31\1\u021b\20\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\4\31\1\u021c\16\31"+
    "\11\0\12\31\1\0\6\31\1\u021d\2\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\1\u021e\10\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\1\31\1\u021f"+
    "\7\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\u0220\10\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\1\u0221\22\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\6\31\1\u0222"+
    "\14\31\11\0\12\31\1\0\4\31\1\u0223\4\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\5\31\1\u0224\15\31\11\0\12\31\1\0"+
    "\6\31\1\u0225\2\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\2\31\1\u0226"+
    "\20\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\4\31\1\u0227\16\31\11\0\12\31\1\0\5\31\1\u0228"+
    "\3\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\5\31\1\u0229\3\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\4\31\1\u022a"+
    "\16\31\11\0\10\31\1\u022b\1\31\1\0\11\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\1\u022c\10\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\4\31"+
    "\1\u022d\4\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\1\u022e\10\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\1\u022f\22\31"+
    "\11\0\12\31\1\0\3\31\1\u0230\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\10\31\1\u0231\12\31\11\0\12\31\1\0\3\31"+
    "\1\u0232\5\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\6\31\1\u0233\2\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\3\31\1\u0234\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\3\31\1\u0235\5\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\6\31\1\u0236\14\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\1\u0237\22\31\11\0"+
    "\12\31\1\0\1\u0238\10\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\1\u0239"+
    "\22\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\13\31\1\u023a\7\31\64\0\1\u023b\52\0\1\u023c\103\0"+
    "\1\u023d\155\0\1\u023e\36\0\1\u023f\154\0\1\u0240\43\0"+
    "\1\u0241\110\0\1\u0242\163\0\1\u0243\70\0\1\u0244\110\0"+
    "\1\u0245\35\0\1\u0246\116\0\1\u0247\146\0\1\u0248\101\0"+
    "\1\u0249\106\0\1\u024a\110\0\1\u024b\110\0\1\u024c\43\0"+
    "\1\u024d\72\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\4\31\1\u024e\16\31\11\0\10\31\1\u024f\1\31\1\0"+
    "\11\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\1\u0250\10\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\4\31\1\u0251\4\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\6\31\1\u0252\2\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\2\31\1\u0253\20\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\5\31\1\u0254\15\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\6\31\1\u0255\14\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\13\31"+
    "\1\u0256\7\31\11\0\10\31\1\u0257\1\31\1\0\11\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\2\31"+
    "\1\u0258\6\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\11\31\1\u0259\11\31"+
    "\11\0\12\31\1\0\3\31\1\u025a\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\5\31\1\u025b\3\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\6\31"+
    "\1\u025c\2\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\1\u025d\10\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\6\31\1\u025e\2\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\7\31\1\u025f\1\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\2\31\1\u0260"+
    "\6\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\4\31\1\u0261\4\31\2\0\1\31\24\0\23\31\11\0"+
    "\10\31\1\u0262\1\31\1\0\11\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\5\31\1\u0263\3\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\11\31\2\0"+
    "\1\31\24\0\2\31\1\u0264\20\31\11\0\12\31\1\0"+
    "\5\31\1\u0265\3\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\1\u0266\10\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\11\31\2\0\1\31\24\0\6\31"+
    "\1\u0267\14\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\7\31\1\u0268\13\31\11\0\12\31\1\0\1\u0269"+
    "\10\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\3\31\1\u026a\5\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\3\31\1\u026b\5\31\2\0\1\31\24\0"+
    "\23\31\32\0\1\u026c\142\0\1\u026d\46\0\1\u026e\107\0"+
    "\1\u026f\106\0\1\u0270\110\0\1\u0271\107\0\1\u0272\153\0"+
    "\1\u0273\40\0\1\u0274\107\0\1\u0275\105\0\1\u0276\141\0"+
    "\1\u0277\53\0\1\u0278\104\0\1\u0279\70\0\12\31\1\0"+
    "\1\31\1\u027a\7\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\11\31\1\u027b"+
    "\11\31\11\0\12\31\1\0\1\u027c\10\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\11\31\2\0\1\31"+
    "\24\0\4\31\1\u027d\16\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\7\31\1\u027e\13\31\11\0\7\31"+
    "\1\u027f\2\31\1\0\11\31\2\0\1\31\24\0\23\31"+
    "\11\0\12\31\1\0\3\31\1\u0280\5\31\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\3\31\1\u0281\5\31"+
    "\2\0\1\31\24\0\23\31\11\0\12\31\1\0\11\31"+
    "\2\0\1\31\24\0\1\u0282\22\31\11\0\12\31\1\0"+
    "\1\u0283\10\31\2\0\1\31\24\0\23\31\11\0\12\31"+
    "\1\0\11\31\2\0\1\31\24\0\1\u0284\22\31\11\0"+
    "\12\31\1\0\5\31\1\u0285\3\31\2\0\1\31\24\0"+
    "\23\31\11\0\12\31\1\0\3\31\1\u0286\5\31\2\0"+
    "\1\31\24\0\23\31\26\0\1\u0287\154\0\1\u0288\36\0"+
    "\1\u0289\114\0\1\u028a\75\0\1\u028b\114\0\1\u028c\104\0"+
    "\1\u028d\114\0\1\u028e\77\0\1\u028f\114\0\1\u0290\146\0"+
    "\1\u0291\25\0\12\31\1\0\6\31\1\u0292\2\31\2\0"+
    "\1\31\24\0\23\31\11\0\12\31\1\0\3\31\1\u0293"+
    "\5\31\2\0\1\31\24\0\23\31\11\0\12\31\1\0"+
    "\3\31\1\u0294\5\31\2\0\1\31\24\0\23\31\11\0"+
    "\12\31\1\0\11\31\2\0\1\31\24\0\10\31\1\u0295"+
    "\12\31\11\0\12\31\1\0\11\31\2\0\1\31\24\0"+
    "\6\31\1\u0296\14\31\72\0\1\u0297\40\0\1\u0298\152\0"+
    "\1\u0299\45\0\1\u029a\70\0\12\31\1\0\3\31\1\u029b"+
    "\5\31\2\0\1\31\24\0\23\31\27\0\1\u029c\151\0"+
    "\1\u029d\25\0\12\31\1\0\10\31\1\u029e\2\0\1\31"+
    "\24\0\23\31\11\0\12\31\1\0\10\31\1\u029f\2\0"+
    "\1\31\24\0\23\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35784];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\1\3\0\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\20\1\1\11\1\1\1\11\3\1\1\11"+
    "\4\1\5\11\10\1\3\11\26\1\1\11\6\1\3\11"+
    "\3\1\4\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\10\1\1\0\2\1\1\0\37\1\2\11"+
    "\3\1\12\11\2\1\3\11\1\1\1\11\1\1\1\11"+
    "\23\1\10\0\1\11\4\0\1\1\12\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\11\4\1\3\0\1\1"+
    "\1\11\1\0\3\1\1\11\41\1\1\11\7\1\1\11"+
    "\1\1\1\11\27\1\27\0\2\1\1\11\1\1\1\0"+
    "\44\1\1\11\37\1\3\0\1\1\2\0\1\11\1\0"+
    "\1\11\16\0\1\1\1\0\75\1\1\0\2\11\2\0"+
    "\1\11\20\0\57\1\1\0\1\11\2\0\1\11\1\0"+
    "\2\11\2\0\1\11\10\0\36\1\3\0\2\11\6\0"+
    "\1\11\2\0\15\1\2\0\2\11\1\0\3\11\1\0"+
    "\2\11\5\1\1\0\2\11\1\0\1\1\2\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[671];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final boolean DEBUG = true;

  public static final int PAWN_CELL_SIZE = 32;

  private static final char DEFAULT_ESCAPE_CHARACTER = '\\';
  private static final boolean DEFAULT_REQUIRE_SEMICOLONS = false;
  private static final boolean DEFAULT_REQUIRE_NEWDECLS = false;

  //ExtendedSyntaxStrCommentHandler longCommentOrStringHandler
  //    = new ExtendedSyntaxStrCommentHandler();

  private char escapeCharacter;
  private boolean requireSemicolons;
  private boolean requireNewDecls;

  private StringBuilder string = new StringBuilder(32);
  private char character;
  private Object value;

  public SourcePawnLexer() {
    this((Reader)null);
  }

  public <E> E value() {
    return (E)value;
  }

  public void resetState() {
    resetEscapeCharacter();
    resetSemicolonsRequired();
    resetNewDeclsRequired();
  }

  public char getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(char escapeCharacter) {
    if (getEscapeCharacter() != escapeCharacter) {
      this.escapeCharacter = escapeCharacter;
      if (DEBUG) {
        System.out.printf("Escape sequence character changed to '%c'%n", escapeCharacter);
      }
    }
  }

  public void resetEscapeCharacter() {
    setEscapeCharacter(DEFAULT_ESCAPE_CHARACTER);
  }

  public boolean isEscapeCharacter(char ch) {
    return ch == getEscapeCharacter();
  }

  public boolean areSemicolonsRequired() {
    return requireSemicolons;
  }

  public void setSemicolonsRequired(boolean requireSemicolons) {
    if (areSemicolonsRequired() != requireSemicolons) {
      this.requireSemicolons = requireSemicolons;
      if (DEBUG) {
        if (requireSemicolons) {
          System.out.println("Semicolons are required");
        } else {
          System.out.println("Semicolons are no longer required");
        }
      }
    }
  }

  public void resetSemicolonsRequired() {
    setSemicolonsRequired(DEFAULT_REQUIRE_SEMICOLONS);
  }

  public boolean areNewDeclsRequired() {
    return requireNewDecls;
  }

  public void setNewDeclsRequired(boolean requireNewDecls) {
    if (areNewDeclsRequired() != requireNewDecls) {
      this.requireNewDecls = requireNewDecls;
      if (DEBUG) {
        if (requireNewDecls) {
          System.out.println("NewDecls are required");
        } else {
          System.out.println("NewDecls are no longer required");
        }
      }
    }
  }

  public void resetNewDeclsRequired() {
    setNewDeclsRequired(DEFAULT_REQUIRE_NEWDECLS);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SourcePawnLexer(java.io.Reader in) {
    switch (PAWN_CELL_SIZE) {
    case 16:
    case 32:
    case 64:
      break;
    default:
      throw new AssertionError("Unsupported cell size (" + PAWN_CELL_SIZE + ")");
  }

  resetState();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos).toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case IN_PRAGMA_DEPRECATED_STRING: {
              String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
            case 672: break;
            case IN_PREPROCESSOR_PRAGMA_NEWDECLS: {
              yypushback(yylength()); yybegin(YYINITIAL);
            }
            case 673: break;
            case IN_CHARACTER_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 674: break;
            case IN_STRING_LITERAL: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }
            case 675: break;
            case IN_LINE_COMMENT: {
              String text = string.toString();
                        value = text;
                        if (DEBUG) {
                          System.out.printf("line comment = '%s'%n", text);
                        }

                        yybegin(YYINITIAL);
                        yypushback(yylength());
                        return LINE_COMMENT;
            }
            case 676: break;
            case IN_BLOCK_COMMENT: {
              return BAD_CHARACTER;
            }
            case 677: break;
            case IN_DOC_COMMENT: {
              return BAD_CHARACTER;
            }
            case 678: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character * 10) + (ch - '0');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 198: break;
          case 2: 
            { int character = 0;
                          for (int i = 0; i < yylength(); i++) {
                            char ch = yycharat(i);
                            switch (ch) {
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                character = (character << 4) + (ch - '0');
                                break;
                              case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                                character = (character << 4) + (ch - 'a');
                                break;
                              case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                                character = (character << 4) + (ch - 'A');
                                break;
                              case ';':
                                if (i != (yylength()-1)) {
                                  throw new AssertionError(
                                      "semicolon should be the final character in the sequence");
                                }

                                break;
                              default:
                                throw new AssertionError("Unsupported control character: " + ch);
                            }
                          }

                          this.character = (char)character;
                          yybegin(IN_CHARACTER_LITERAL);
            }
          case 199: break;
          case 3: 
            { return BAD_CHARACTER;
            }
          case 200: break;
          case 4: 
            { return WHITESPACE;
            }
          case 201: break;
          case 5: 
            { return NEW_LINE;
            }
          case 202: break;
          case 6: 
            { return LBRACKET;
            }
          case 203: break;
          case 7: 
            { return AT_SIGN;
            }
          case 204: break;
          case 8: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 16: value = (short)SourcePawnUtils.parseNumber(yytext()); break;
                          case 32: value = (int)SourcePawnUtils.parseNumber(yytext()); break;
                          case 64: value = (long)SourcePawnUtils.parseNumber(yytext()); break;
                          default: throw new AssertionError(
                                "Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("number %s = %d%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }

                      return NUMBER_LITERAL;
            }
          case 205: break;
          case 9: 
            { return IDENTIFIER;
            }
          case 206: break;
          case 10: 
            { return SEMICOLON;
            }
          case 207: break;
          case 11: 
            { return UNDERSCORE;
            }
          case 208: break;
          case 12: 
            { return PERIOD;
            }
          case 209: break;
          case 13: 
            { return MINUS;
            }
          case 210: break;
          case 14: 
            { return AMPERSAND;
            }
          case 211: break;
          case 15: 
            { return ASSIGN;
            }
          case 212: break;
          case 16: 
            { return ASTERISK;
            }
          case 213: break;
          case 17: 
            { return CARET;
            }
          case 214: break;
          case 18: 
            { return COMMA;
            }
          case 215: break;
          case 19: 
            { return EXCLAMATION;
            }
          case 216: break;
          case 20: 
            { yybegin(IN_PREPROCESSOR); return HASH;
            }
          case 217: break;
          case 21: 
            { return PERCENT;
            }
          case 218: break;
          case 22: 
            { return PLUS;
            }
          case 219: break;
          case 23: 
            { return SLASH;
            }
          case 220: break;
          case 24: 
            { return TILDE;
            }
          case 221: break;
          case 25: 
            { return VERTICAL_BAR;
            }
          case 222: break;
          case 26: 
            { return GT;
            }
          case 223: break;
          case 27: 
            { return LT;
            }
          case 224: break;
          case 28: 
            { return LBRACE;
            }
          case 225: break;
          case 29: 
            { return RBRACE;
            }
          case 226: break;
          case 30: 
            { return RBRACKET;
            }
          case 227: break;
          case 31: 
            { return LPAREN;
            }
          case 228: break;
          case 32: 
            { return RPAREN;
            }
          case 229: break;
          case 33: 
            { string.setLength(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 230: break;
          case 34: 
            { string.setLength(0); yybegin(IN_STRING_LITERAL);
            }
          case 231: break;
          case 35: 
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          case 232: break;
          case 36: 
            { yybegin(IN_PREPROCESSOR_PRAGMA); return WHITESPACE;
            }
          case 233: break;
          case 37: 
            { string.setLength(0);
                      yybegin(IN_PRAGMA_DEPRECATED_STRING);
                       /* no return, ignore preceeding whitespace */
            }
          case 234: break;
          case 38: 
            { string.append(yytext());
            }
          case 235: break;
          case 39: 
            { /* ignore whitespace */
            }
          case 236: break;
          case 40: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("deprecated message = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          yypushback(yylength());
                          if (!text.isEmpty()) {
                            return PRAGMA_DEPRECATED_STRING;
                          }
            }
          case 237: break;
          case 41: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS); return WHITESPACE;
            }
          case 238: break;
          case 42: 
            { character = yycharat(0);
                          if (isEscapeCharacter(character)) {
                            yybegin(IN_CHARACTER_LITERAL_ESCAPE_SEQUENCE);
                          }
            }
          case 239: break;
          case 43: 
            { yybegin(YYINITIAL); return BAD_CHARACTER;
            }
          case 240: break;
          case 44: 
            { String text = Character.toString(character);
                          value = character;
                          if (DEBUG) {
                            System.out.printf("character = \'%s\'%n", text);
                          }

                          yybegin(YYINITIAL);
                          return CHARACTER_LITERAL;
            }
          case 241: break;
          case 45: 
            { String text = string.toString();
                          value = text;
                          if (DEBUG) {
                            System.out.printf("string = \"%s\"%n", text);
                          }

                          yybegin(YYINITIAL);
                          return STRING_LITERAL;
            }
          case 242: break;
          case 46: 
            { yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL_DECIMAL_ESCAPE);
            }
          case 243: break;
          case 47: 
            { character = yycharat(0);
                          if (character == 'x') {
                            yybegin(IN_CHARACTER_LITERAL_UNICODE_ESCAPE);
                          } else {
                            switch(yycharat(0)) {
                              case 'a':
                                character = '\u0007';
                                break;
                              case 'b':
                                character = '\b';
                                break;
                              case 'e':
                                character = '\u001B';
                                break;
                              case 'f':
                                character = '\f';
                                break;
                              case 'n':
                                character = '\n';
                                break;
                              case 'r':
                                character = '\r';
                                break;
                              case 't':
                                character = '\t';
                                break;
                              case 'v':
                                character = '\u000B';
                                break;
                              default:
                                throw new AssertionError(
                                    "Unsupported control character: " + yycharat(0));
                            }

                            yybegin(IN_CHARACTER_LITERAL);
                          }
            }
          case 244: break;
          case 48: 
            { character = yycharat(0); yybegin(IN_CHARACTER_LITERAL);
            }
          case 245: break;
          case 49: 
            { character = 0; yypushback(yylength()); yybegin(IN_CHARACTER_LITERAL);
            }
          case 246: break;
          case 50: 
            { String text = string.toString();
                        value = text;
                        if (DEBUG) {
                          System.out.printf("line comment = '%s'%n", text);
                        }

                        yybegin(YYINITIAL);
                        yypushback(yylength());
                        return LINE_COMMENT;
            }
          case 247: break;
          case 51: 
            { string.append(' ');
            }
          case 248: break;
          case 52: 
            { 
            }
          case 249: break;
          case 53: 
            { return AS;
            }
          case 250: break;
          case 54: 
            { return RANGE;
            }
          case 251: break;
          case 55: 
            { return DECREMENT;
            }
          case 252: break;
          case 56: 
            { return SUBEQ;
            }
          case 253: break;
          case 57: 
            { return AND;
            }
          case 254: break;
          case 58: 
            { return ANDEQ;
            }
          case 255: break;
          case 59: 
            { return EQUALTO;
            }
          case 256: break;
          case 60: 
            { return MULEQ;
            }
          case 257: break;
          case 61: 
            { return XOREQ;
            }
          case 258: break;
          case 62: 
            { return NEQUALTO;
            }
          case 259: break;
          case 63: 
            { return MODEQ;
            }
          case 260: break;
          case 64: 
            { return ADDEQ;
            }
          case 261: break;
          case 65: 
            { return INCREMENT;
            }
          case 262: break;
          case 66: 
            { return DIVEQ;
            }
          case 263: break;
          case 67: 
            { string.setLength(0); yybegin(IN_BLOCK_COMMENT);
            }
          case 264: break;
          case 68: 
            { string.setLength(0); yybegin(IN_LINE_COMMENT);
            }
          case 265: break;
          case 69: 
            { return OREQ;
            }
          case 266: break;
          case 70: 
            { return OR;
            }
          case 267: break;
          case 71: 
            { return GTEQ;
            }
          case 268: break;
          case 72: 
            { return SRA;
            }
          case 269: break;
          case 73: 
            { return LTEQ;
            }
          case 270: break;
          case 74: 
            { return SL;
            }
          case 271: break;
          case 75: 
            { return SCOPE_RESOLUTION;
            }
          case 272: break;
          case 76: 
            { return IF;
            }
          case 273: break;
          case 77: 
            { return IN;
            }
          case 274: break;
          case 78: 
            { return DO;
            }
          case 275: break;
          case 79: 
            { yybegin(YYINITIAL); return PREPROCESSOR_IF;
            }
          case 276: break;
          case 80: 
            { if (isEscapeCharacter(yycharat(0))) {
                            char ctrl = yycharat(1);
                            switch (ctrl) {
                              case 'a':case 'b':case 'e':case 'f':
                              case 'n':case 'r':case 't':case 'v':
                              case 'x':
                              case '%':
                              case '"':
                              case '\'':
                              case '0':case '1':case '2':case '3':case '4':
                              case '5':case '6':case '7':case '8':case '9':
                                string.append(yytext());
                                break;
                              default:
                                if (isEscapeCharacter(ctrl)) {
                                  string.append(yytext());
                                  break;
                                }

                                yybegin(YYINITIAL);
                                return BAD_CHARACTER;
                            }
                          } else {
                            string.append(yycharat(0));
                            yypushback(1);
                          }
            }
          case 277: break;
          case 81: 
            { /* line continuation */
            }
          case 278: break;
          case 82: 
            { String text = string.toString();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("block comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              return BLOCK_COMMENT;
            }
          case 279: break;
          case 83: 
            { String text = string.toString();
                              value = text;
                              if (DEBUG) {
                                System.out.printf("doc comment = '%s'%n", text);
                              }

                              yybegin(YYINITIAL);
                              return DOC_COMMENT;
            }
          case 280: break;
          case 84: 
            { try {
                        switch (PAWN_CELL_SIZE) {
                          case 32: value = (float)SourcePawnUtils.parseRational(yytext()); break;
                          case 64: value = (double)SourcePawnUtils.parseRational(yytext()); break;
                          default: throw new AssertionError(
                                "Unsupported cell size (" + PAWN_CELL_SIZE + ")");
                        }

                        if (DEBUG) {
                          System.out.printf("rational %s = %f%n", yytext(), value);
                        }
                      } catch (NumberFormatException e) {
                        // This should not happen if number was tokenized correctly
                        throw new AssertionError(e.getMessage());
                      }
            }
          case 281: break;
          case 85: 
            { return TRY;
            }
          case 282: break;
          case 86: 
            { return FOR;
            }
          case 283: break;
          case 87: 
            { return LET;
            }
          case 284: break;
          case 88: 
            { return ELLIPSIS;
            }
          case 285: break;
          case 89: 
            { return VAR;
            }
          case 286: break;
          case 90: 
            { string.setLength(0); yybegin(IN_DOC_COMMENT);
            }
          case 287: break;
          case 91: 
            { return SRAEQ;
            }
          case 288: break;
          case 92: 
            { return SRL;
            }
          case 289: break;
          case 93: 
            { return SLEQ;
            }
          case 290: break;
          case 94: 
            { return INT;
            }
          case 291: break;
          case 95: 
            { return NEW;
            }
          case 292: break;
          case 96: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { string.append(yytext());
            }
          case 293: break;
          case 97: 
            { return THIS;
            }
          case 294: break;
          case 98: 
            { return EXIT;
            }
          case 295: break;
          case 99: 
            { return ELSE;
            }
          case 296: break;
          case 100: 
            { return ENUM;
            }
          case 297: break;
          case 101: 
            { return VOID;
            }
          case 298: break;
          case 102: 
            { return SRLEQ;
            }
          case 299: break;
          case 103: 
            { return CASE;
            }
          case 300: break;
          case 104: 
            { return CHAR;
            }
          case 301: break;
          case 105: 
            { return INTN;
            }
          case 302: break;
          case 106: 
            { return INT8;
            }
          case 303: break;
          case 107: 
            { return NULL;
            }
          case 304: break;
          case 108: 
            { return DECL;
            }
          case 305: break;
          case 109: 
            { return WITH;
            }
          case 306: break;
          case 110: 
            { return GOTO;
            }
          case 307: break;
          case 111: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSE;
            }
          case 308: break;
          case 112: 
            { yybegin(YYINITIAL); return PREPROCESSOR_FILE;
            }
          case 309: break;
          case 113: 
            { yybegin(YYINITIAL); return PREPROCESSOR_LINE;
            }
          case 310: break;
          case 114: 
            { return BREAK;
            }
          case 311: break;
          case 115: 
            { return TAGOF;
            }
          case 312: break;
          case 116: 
            { return THROW;
            }
          case 313: break;
          case 117: 
            { return USING;
            }
          case 314: break;
          case 118: 
            { return UINTN;
            }
          case 315: break;
          case 119: 
            { return UINT8;
            }
          case 316: break;
          case 120: 
            { return UNION;
            }
          case 317: break;
          case 121: 
            { return STOCK;
            }
          case 318: break;
          case 122: 
            { return SLEEP;
            }
          case 319: break;
          case 123: 
            { return CONST;
            }
          case 320: break;
          case 124: 
            { return CATCH;
            }
          case 321: break;
          case 125: 
            { return INT16;
            }
          case 322: break;
          case 126: 
            { return INT64;
            }
          case 323: break;
          case 127: 
            { return INT32;
            }
          case 324: break;
          case 128: 
            { return WHILE;
            }
          case 325: break;
          case 129: 
            { yybegin(YYINITIAL); return PREPROCESSOR_UNDEF;
            }
          case 326: break;
          case 130: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ERROR;
            }
          case 327: break;
          case 131: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDIF;
            }
          case 328: break;
          case 132: 
            { return OBJECT;
            }
          case 329: break;
          case 133: 
            { return TYPEOF;
            }
          case 330: break;
          case 134: 
            { return RETURN;
            }
          case 331: break;
          case 135: 
            { return UINT16;
            }
          case 332: break;
          case 136: 
            { return UINT64;
            }
          case 333: break;
          case 137: 
            { return UINT32;
            }
          case 334: break;
          case 138: 
            { return ASSERT;
            }
          case 335: break;
          case 139: 
            { return STRUCT;
            }
          case 336: break;
          case 140: 
            { return STATIC;
            }
          case 337: break;
          case 141: 
            { return SEALED;
            }
          case 338: break;
          case 142: 
            { return SIZEOF;
            }
          case 339: break;
          case 143: 
            { return SWITCH;
            }
          case 340: break;
          case 144: 
            { return IMPORT;
            }
          case 341: break;
          case 145: 
            { return NATIVE;
            }
          case 342: break;
          case 146: 
            { return DOUBLE;
            }
          case 343: break;
          case 147: 
            { return DELETE;
            }
          case 344: break;
          case 148: 
            { return PUBLIC;
            }
          case 345: break;
          case 149: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ELSEIF;
            }
          case 346: break;
          case 150: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ASSERT;
            }
          case 347: break;
          case 151: 
            { yybegin(YYINITIAL); return PREPROCESSOR_DEFINE;
            }
          case 348: break;
          case 152: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_PRE); return PREPROCESSOR_PRAGMA;
            }
          case 349: break;
          case 153: 
            { yybegin(YYINITIAL); return PRAGMA_UNUSED;
            }
          case 350: break;
          case 154: 
            { return BUILTIN;
            }
          case 351: break;
          case 155: 
            { return TYPESET;
            }
          case 352: break;
          case 156: 
            { return TYPEDEF;
            }
          case 353: break;
          case 157: 
            { return FOREACH;
            }
          case 354: break;
          case 158: 
            { return FORWARD;
            }
          case 355: break;
          case 159: 
            { return FUNCTAG;
            }
          case 356: break;
          case 160: 
            { return FINALLY;
            }
          case 357: break;
          case 161: 
            { return ACQUIRE;
            }
          case 358: break;
          case 162: 
            { return VARIANT;
            }
          case 359: break;
          case 163: 
            { return VIRTUAL;
            }
          case 360: break;
          case 164: 
            { return VIEW_AS;
            }
          case 361: break;
          case 165: 
            { return CELLSOF;
            }
          case 362: break;
          case 166: 
            { return CAST_TO;
            }
          case 363: break;
          case 167: 
            { return DEFAULT;
            }
          case 364: break;
          case 168: 
            { return DEFINED;
            }
          case 365: break;
          case 169: 
            { return PRIVATE;
            }
          case 366: break;
          case 170: 
            { return PACKAGE;
            }
          case 367: break;
          case 171: 
            { yybegin(YYINITIAL); return PREPROCESSOR_INCLUDE;
            }
          case 368: break;
          case 172: 
            { yybegin(YYINITIAL); return PRAGMA_TABSIZE;
            }
          case 369: break;
          case 173: 
            { yybegin(YYINITIAL); return PRAGMA_DYNAMIC;
            }
          case 370: break;
          case 174: 
            { return OPERATOR;
            }
          case 371: break;
          case 175: 
            { return READONLY;
            }
          case 372: break;
          case 176: 
            { return EXPLICIT;
            }
          case 373: break;
          case 177: 
            { return FUNCTION;
            }
          case 374: break;
          case 178: 
            { return FUNCENUM;
            }
          case 375: break;
          case 179: 
            { return VOLATILE;
            }
          case 376: break;
          case 180: 
            { return CONTINUE;
            }
          case 377: break;
          case 181: 
            { return IMPLICIT;
            }
          case 378: break;
          case 182: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDINPUT;
            }
          case 379: break;
          case 183: 
            { yybegin(YYINITIAL); return PRAGMA_RATIONAL;
            }
          case 380: break;
          case 184: 
            { yybegin(YYINITIAL); return PRAGMA_CODEPAGE;
            }
          case 381: break;
          case 185: 
            { yybegin(YYINITIAL); return PRAGMA_CTRLCHAR;
            }
          case 382: break;
          case 186: 
            { yybegin(IN_PREPROCESSOR_PRAGMA_NEWDECLS_PRE); return PRAGMA_NEWDECLS;
            }
          case 383: break;
          case 187: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_OPTIONAL;
            }
          case 384: break;
          case 188: 
            { yybegin(YYINITIAL); return PRAGMA_NEWDECLS_REQUIRED;
            }
          case 385: break;
          case 189: 
            { return INTERFACE;
            }
          case 386: break;
          case 190: 
            { return NAMESPACE;
            }
          case 387: break;
          case 191: 
            { return METHODMAP;
            }
          case 388: break;
          case 192: 
            { return PROTECTED;
            }
          case 389: break;
          case 193: 
            { yybegin(YYINITIAL); return PREPROCESSOR_ENDSCRIPT;
            }
          case 390: break;
          case 194: 
            { yybegin(YYINITIAL); return PRAGMA_SEMICOLON;
            }
          case 391: break;
          case 195: 
            { yybegin(YYINITIAL); return PREPROCESSOR_TRYINCLUDE;
            }
          case 392: break;
          case 196: 
            { yybegin(IN_PRAGMA_DEPRECATED_STRING_PRE); return PRAGMA_DEPRECATED;
            }
          case 393: break;
          case 197: 
            { return NULLABLE;
            }
          case 394: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
