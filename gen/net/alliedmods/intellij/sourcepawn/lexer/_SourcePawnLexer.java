/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static net.alliedmods.intellij.sourcepawn.psi.SourcePawnTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_SourcePawnLexer.flex</tt>
 */
public class _SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\5\2\1\22\0\1\3\1\30\1\22\1\123\1\0\1\27\1\33\1\21\1\44\1\45"+
    "\1\6\1\26\1\36\1\20\1\16\1\4\1\7\1\11\1\100\1\77\1\101\1\13\1\76\1\13\1\75"+
    "\1\13\1\50\1\37\1\46\1\32\1\47\1\0\1\25\1\113\1\15\1\120\1\115\1\105\1\116"+
    "\2\24\1\110\2\24\1\114\1\24\1\111\1\106\1\122\2\24\1\107\1\121\1\117\1\112"+
    "\4\24\1\40\1\23\1\41\1\34\1\12\1\0\1\51\1\10\1\52\1\67\1\17\1\66\1\74\1\64"+
    "\1\55\1\103\1\61\1\62\1\70\1\63\1\65\1\71\1\53\1\56\1\57\1\60\1\54\1\102\1"+
    "\73\1\14\1\72\1\104\1\42\1\35\1\43\1\31\6\0\1\5\242\0\2\5\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\1\1\6\1\7\1\6\1\10\3\1\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\1\23\6\1\33\1\34\1\0\1\35\1\36\1\37"+
    "\1\40\1\0\3\6\1\41\3\6\1\42\1\43\1\0"+
    "\1\44\1\0\1\45\1\0\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\6\1\65\11\6\1\66\1\67"+
    "\26\6\1\70\14\6\1\0\1\71\4\6\1\72\4\6"+
    "\1\73\1\74\1\75\14\6\1\76\15\6\1\77\3\6"+
    "\1\100\1\101\10\6\1\102\16\6\1\103\4\6\1\104"+
    "\1\6\1\105\1\0\4\6\1\106\1\6\1\107\1\110"+
    "\1\111\3\6\1\112\3\6\1\113\10\6\1\114\1\115"+
    "\17\6\1\116\1\117\4\6\1\120\10\6\1\121\12\6"+
    "\1\122\1\6\1\123\3\6\1\124\2\6\1\71\1\0"+
    "\1\6\1\125\11\6\1\126\3\6\1\127\3\6\1\130"+
    "\1\131\2\6\1\132\1\133\1\134\1\6\1\135\1\136"+
    "\11\6\1\137\1\140\1\6\1\141\1\142\7\6\1\143"+
    "\5\6\1\144\12\6\1\145\7\6\1\146\2\6\1\147"+
    "\13\6\1\150\1\151\1\152\2\6\1\153\1\6\1\154"+
    "\1\155\1\6\1\156\1\157\1\160\1\161\1\6\1\162"+
    "\1\6\1\163\1\6\1\164\7\6\1\165\2\6\1\166"+
    "\2\6\1\167\1\170\7\6\1\171\2\6\1\172\1\6"+
    "\1\173\1\174\1\175\1\176\2\6\1\177\1\200\6\6"+
    "\1\201\1\202\3\6\1\203\1\6\1\204\1\205\1\206"+
    "\1\207\1\210\1\6\1\211\1\212\1\6\1\213\1\214"+
    "\1\215\3\6\1\216\1\217\1\220\1\221\1\222\1\223"+
    "\1\6\1\224\1\225\2\6\1\226\1\227\1\230\2\6"+
    "\1\231\2\6\1\232\1\233\1\234\1\235\1\236\5\6"+
    "\1\237\4\6\1\240";

  private static int [] zzUnpackAction() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498\0\u02f4"+
    "\0\u04ec\0\u0540\0\u0594\0\124\0\u05e8\0\u063c\0\u0690\0\u06e4"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\124"+
    "\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0\0\u0c24"+
    "\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c\0\124\0\u0e70"+
    "\0\u0ec4\0\124\0\124\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068"+
    "\0\u10bc\0\u1110\0\u1164\0\u11b8\0\u120c\0\124\0\124\0\u0444"+
    "\0\u0444\0\u0498\0\124\0\u1260\0\124\0\124\0\124\0\124"+
    "\0\124\0\124\0\124\0\124\0\124\0\124\0\124\0\u12b4"+
    "\0\124\0\u1308\0\124\0\u135c\0\u13b0\0\u1404\0\u1458\0\u14ac"+
    "\0\u1500\0\u1554\0\u15a8\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\u02f4"+
    "\0\u174c\0\u17a0\0\u17f4\0\u1848\0\u189c\0\u18f0\0\u1944\0\u1998"+
    "\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4\0\u1c38"+
    "\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8"+
    "\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124\0\u2178"+
    "\0\u21cc\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370\0\u23c4\0\u2418"+
    "\0\u246c\0\124\0\u24c0\0\u2514\0\u2568\0\u25bc\0\124\0\124"+
    "\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808\0\u285c"+
    "\0\u28b0\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8\0\u2afc"+
    "\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48\0\u2d9c"+
    "\0\u2df0\0\u2e44\0\u2e98\0\u02f4\0\u2eec\0\u2f40\0\u2f94\0\u02f4"+
    "\0\u02f4\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c\0\u31e0"+
    "\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384\0\u33d8\0\u342c\0\u3480"+
    "\0\u34d4\0\u3528\0\u357c\0\u35d0\0\u3624\0\u3678\0\u36cc\0\u3720"+
    "\0\u3774\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u02f4\0\u3918\0\u0ec4"+
    "\0\u396c\0\u39c0\0\u3a14\0\u3a68\0\u3abc\0\u02f4\0\u3b10\0\u02f4"+
    "\0\u02f4\0\124\0\u3b64\0\u3bb8\0\u3c0c\0\u02f4\0\u3c60\0\u3cb4"+
    "\0\u3d08\0\u3d5c\0\u3db0\0\u3e04\0\u3e58\0\u3eac\0\u3f00\0\u3f54"+
    "\0\u3fa8\0\u3ffc\0\u02f4\0\u02f4\0\u4050\0\u40a4\0\u40f8\0\u414c"+
    "\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u4398\0\u43ec"+
    "\0\u4440\0\u4494\0\u44e8\0\u02f4\0\u02f4\0\u453c\0\u4590\0\u45e4"+
    "\0\u4638\0\u02f4\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830"+
    "\0\u4884\0\u48d8\0\u02f4\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c"+
    "\0\u4ad0\0\u4b24\0\u4b78\0\u4bcc\0\u4c20\0\u02f4\0\u4c74\0\u02f4"+
    "\0\u4cc8\0\u4d1c\0\u4d70\0\u02f4\0\u4dc4\0\u4e18\0\u4e6c\0\u4e6c"+
    "\0\u4ec0\0\u02f4\0\u4f14\0\u4f68\0\u4fbc\0\u5010\0\u5064\0\u50b8"+
    "\0\u510c\0\u5160\0\u51b4\0\u02f4\0\u5208\0\u525c\0\u52b0\0\u02f4"+
    "\0\u5304\0\u5358\0\u53ac\0\u02f4\0\u02f4\0\u5400\0\u5454\0\u02f4"+
    "\0\u02f4\0\u02f4\0\u54a8\0\u02f4\0\u02f4\0\u54fc\0\u5550\0\u55a4"+
    "\0\u55f8\0\u564c\0\u56a0\0\u56f4\0\u5748\0\u579c\0\u02f4\0\u02f4"+
    "\0\u57f0\0\u02f4\0\u02f4\0\u5844\0\u5898\0\u58ec\0\u5940\0\u5994"+
    "\0\u59e8\0\u5a3c\0\u02f4\0\u5a90\0\u5ae4\0\u5b38\0\u5b8c\0\u5be0"+
    "\0\u02f4\0\u5c34\0\u5c88\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8\0\u5e2c"+
    "\0\u5e80\0\u5ed4\0\u5f28\0\u02f4\0\u5f7c\0\u5fd0\0\u6024\0\u6078"+
    "\0\u60cc\0\u6120\0\u6174\0\u02f4\0\u61c8\0\u621c\0\u02f4\0\u6270"+
    "\0\u62c4\0\u6318\0\u636c\0\u63c0\0\u6414\0\u6468\0\u64bc\0\u6510"+
    "\0\u6564\0\u65b8\0\u02f4\0\u02f4\0\u02f4\0\u660c\0\u6660\0\u02f4"+
    "\0\u66b4\0\u02f4\0\u02f4\0\u6708\0\u02f4\0\u02f4\0\u02f4\0\u02f4"+
    "\0\u675c\0\u02f4\0\u67b0\0\u02f4\0\u6804\0\u02f4\0\u6858\0\u68ac"+
    "\0\u6900\0\u6954\0\u69a8\0\u69fc\0\u6a50\0\u02f4\0\u6aa4\0\u6af8"+
    "\0\u02f4\0\u6b4c\0\u6ba0\0\u02f4\0\u02f4\0\u6bf4\0\u6c48\0\u6c9c"+
    "\0\u6cf0\0\u6d44\0\u6d98\0\u6dec\0\u02f4\0\u6e40\0\u6e94\0\u02f4"+
    "\0\u6ee8\0\u02f4\0\u02f4\0\u02f4\0\u02f4\0\u6f3c\0\u6f90\0\u02f4"+
    "\0\u02f4\0\u6fe4\0\u7038\0\u708c\0\u70e0\0\u7134\0\u7188\0\u02f4"+
    "\0\u02f4\0\u71dc\0\u7230\0\u7284\0\u02f4\0\u72d8\0\u02f4\0\u02f4"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u732c\0\u02f4\0\u02f4\0\u7380\0\u02f4"+
    "\0\u02f4\0\u02f4\0\u73d4\0\u7428\0\u747c\0\u02f4\0\u02f4\0\u02f4"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u74d0\0\u02f4\0\u02f4\0\u7524\0\u7578"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u75cc\0\u7620\0\u02f4\0\u7674\0\u76c8"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u02f4\0\u02f4\0\u771c\0\u7770\0\u77c4"+
    "\0\u7818\0\u786c\0\u02f4\0\u78c0\0\u7914\0\u7968\0\u79bc\0\u02f4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\10\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\2\1\12\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\12\1\46\1\47\1\50\1\51\1\52\1\12\1\53"+
    "\1\54\1\12\1\55\1\56\1\57\1\60\1\61\1\12"+
    "\1\62\1\63\5\10\1\64\2\12\1\65\2\12\1\66"+
    "\12\12\1\67\125\0\3\3\124\0\1\70\1\0\1\71"+
    "\23\0\1\72\123\0\1\73\100\0\1\10\1\74\3\10"+
    "\1\75\1\0\1\76\56\0\5\10\31\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\3\12\1\77\1\12\1\100"+
    "\44\12\10\0\1\10\1\0\3\10\2\0\1\76\56\0"+
    "\5\10\31\0\3\12\1\101\3\12\1\0\1\12\4\0"+
    "\2\12\23\0\52\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\52\12\17\0\1\102\114\0\5\12\1\103"+
    "\1\12\1\0\1\12\4\0\2\12\23\0\11\12\1\104"+
    "\1\105\37\12\21\0\1\106\11\0\1\107\71\0\1\110"+
    "\2\0\2\110\1\0\13\110\1\111\102\110\22\112\1\113"+
    "\1\114\100\112\26\0\1\115\3\0\1\116\123\0\1\117"+
    "\123\0\1\120\123\0\1\121\123\0\1\122\1\123\122\0"+
    "\1\124\123\0\1\125\2\0\1\126\120\0\1\127\13\0"+
    "\1\130\107\0\1\131\14\0\1\132\124\0\1\133\62\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\12\1\134"+
    "\4\12\1\135\43\12\10\0\7\12\1\0\1\136\4\0"+
    "\2\12\23\0\1\137\6\12\1\140\3\12\1\141\1\142"+
    "\35\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\1\12\1\143\2\12\1\144\1\12\1\145\3\12\1\146"+
    "\37\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\12\12\1\147\2\12\1\150\1\12\1\151\32\12\10\0"+
    "\7\12\1\0\1\152\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\153\4\0\2\12\23\0\4\12\1\154"+
    "\2\12\1\155\1\12\1\156\10\12\1\157\27\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\160\4\12"+
    "\1\161\5\12\1\162\5\12\1\163\30\12\10\0\7\12"+
    "\1\0\1\164\4\0\2\12\23\0\52\12\10\0\7\12"+
    "\1\0\1\165\4\0\2\12\23\0\1\166\2\12\1\167"+
    "\46\12\10\0\1\12\1\170\5\12\1\0\1\12\4\0"+
    "\2\12\23\0\20\12\1\171\31\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\172\2\12\1\173\1\174"+
    "\7\12\1\175\35\12\10\0\7\12\1\0\1\176\4\0"+
    "\2\12\23\0\14\12\1\177\35\12\10\0\7\12\1\0"+
    "\1\200\4\0\2\12\23\0\52\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\201\2\12\1\202\1\12"+
    "\1\203\44\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\204\6\12\1\205\36\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\14\12\1\206\35\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\207"+
    "\3\12\1\210\7\12\1\211\35\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\35\12\1\212\14\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\40\12\1\213"+
    "\11\12\1\0\1\70\2\0\2\70\1\0\116\70\1\71"+
    "\1\0\3\71\1\0\1\214\115\71\7\0\1\74\1\0"+
    "\2\74\120\0\5\75\1\0\1\75\1\0\1\75\31\0"+
    "\2\75\13\0\2\75\5\0\5\75\3\0\1\75\5\0"+
    "\1\75\1\0\2\75\1\0\1\75\12\0\1\215\1\0"+
    "\1\215\1\0\1\215\61\0\5\215\31\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\4\12\1\216\45\12\10\0"+
    "\7\12\1\0\1\217\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\12\12\1\220"+
    "\36\12\1\221\17\0\1\222\114\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\4\12\1\223\13\12\1\224\31\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\6\12"+
    "\1\225\43\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\3\12\1\226\46\12\1\0\1\112\2\0\2\112"+
    "\1\0\116\112\32\0\1\227\123\0\1\230\14\0\1\231"+
    "\63\0\7\12\1\0\1\12\4\0\2\12\23\0\2\12"+
    "\1\232\47\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\6\12\1\233\43\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\11\12\1\234\40\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\6\12\1\235\1\236"+
    "\42\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\5\12\1\237\44\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\1\240\51\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\12\12\1\241\37\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\13\12\1\242\36\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\12\12"+
    "\1\243\37\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\244\45\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\4\12\1\245\45\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\7\12\1\246\42\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\20\12"+
    "\1\247\31\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\250\6\12\1\251\42\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\252\16\12\1\253\32\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\33\12"+
    "\1\254\16\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\255\4\12\1\256\6\12\1\257\35\12\10\0"+
    "\7\12\1\0\1\260\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\4\12\1\261"+
    "\45\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\23\12\1\262\26\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\3\12\1\263\15\12\1\264\30\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\4\12\1\265"+
    "\1\266\44\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\20\12\1\267\31\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\7\12\1\270\42\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\22\12\1\271\27\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\7\12"+
    "\1\272\7\12\1\273\32\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\11\12\1\274\40\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\32\12\1\275\17\12"+
    "\10\0\7\12\1\0\1\276\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\11\12"+
    "\1\277\40\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\12\12\1\300\37\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\12\12\1\301\37\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\5\12\1\302\44\12"+
    "\10\0\1\12\1\303\5\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\12\1\304\7\12\1\305\3\12\1\306\34\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\3\12"+
    "\1\307\46\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\7\12\1\310\42\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\1\12\1\311\50\12\10\0\1\12"+
    "\1\312\5\12\1\0\1\12\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\313"+
    "\3\12\1\314\7\12\1\315\35\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\316\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\4\12\1\317"+
    "\45\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\7\12\1\320\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\5\12\1\321\44\12\10\0\7\12\1\0"+
    "\1\322\4\0\2\12\23\0\5\12\1\323\44\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\4\12\1\324"+
    "\4\12\1\325\40\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\36\12\1\326\13\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\41\12\1\327\10\12\1\0"+
    "\1\71\1\0\2\71\1\330\1\0\1\214\115\71\7\0"+
    "\1\215\1\0\3\215\3\0\1\331\55\0\5\215\31\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\332"+
    "\40\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\1\333\51\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\3\12\1\334\46\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\1\335\51\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\336\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\337"+
    "\40\12\10\0\7\12\1\0\1\340\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\17\12\1\341\32\12\33\0\1\342\100\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\3\12\1\343\46\12\10\0"+
    "\7\12\1\0\1\344\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\345"+
    "\40\12\10\0\7\12\1\0\1\346\4\0\2\12\23\0"+
    "\7\12\1\347\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\1\12\1\350\50\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\11\12\1\351\40\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\5\12\1\352"+
    "\44\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\6\12\1\353\1\354\42\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\1\355\51\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\356\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\12\12\1\357"+
    "\37\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\14\12\1\360\35\12\10\0\2\12\1\361\4\12\1\0"+
    "\1\362\4\0\2\12\23\0\12\12\1\363\11\12\1\364"+
    "\1\365\1\366\23\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\11\12\1\367\2\12\1\370\35\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\16\12\1\371"+
    "\33\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\3\12\1\372\46\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\11\12\1\373\40\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\4\12\1\374\45\12\10\0"+
    "\7\12\1\0\1\375\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\7\12\1\376"+
    "\42\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\3\12\1\377\46\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\1\12\1\u0100\50\12\10\0\7\12\1\0"+
    "\1\u0101\4\0\2\12\23\0\52\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\u0102\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\14\12\1\u0103"+
    "\35\12\10\0\7\12\1\0\1\u0104\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\6\12\1\u0105\43\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\14\12\1\u0106\35\12\10\0\7\12\1\0"+
    "\1\u0107\4\0\2\12\23\0\52\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\4\12\1\u0108\45\12\10\0"+
    "\7\12\1\0\1\u0109\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\u010a"+
    "\40\12\10\0\7\12\1\0\1\u010b\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\5\12\1\u010c\44\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\6\12\1\u010d\43\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\12\1\u010e\50\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\u010f\51\12"+
    "\10\0\7\12\1\0\1\u0110\4\0\2\12\23\0\22\12"+
    "\1\u0111\27\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\3\12\1\u0112\46\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\11\12\1\u0113\40\12\10\0\7\12"+
    "\1\0\1\u0114\4\0\2\12\23\0\52\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\1\u0115\3\12\1\u0116"+
    "\45\12\10\0\1\12\1\u0117\5\12\1\0\1\12\4\0"+
    "\2\12\23\0\52\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\13\12\1\u0118\36\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\10\12\1\u0119\41\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\u011a"+
    "\40\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\23\12\1\u011b\26\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\31\12\1\u011c\20\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\u011d\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\13\12\1\u011e"+
    "\36\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\11\12\1\u011f\40\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\14\12\1\u0120\35\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\4\12\1\u0121\45\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\22\12\1\u0122"+
    "\27\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\7\12\1\u0123\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\16\12\1\u0124\33\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\u0125\51\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\42\12\1\u0126\7\12"+
    "\10\0\1\u0127\1\0\1\u0127\1\0\1\u0127\4\0\1\u0128"+
    "\54\0\5\u0127\31\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\7\12\1\u0129\42\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\10\12\1\u012a\41\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\11\12\1\u012b\40\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\22\12"+
    "\1\u012c\27\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\u012d\45\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\4\12\1\u012e\45\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\5\12\1\u012f\44\12"+
    "\10\0\1\12\1\u0130\5\12\1\0\1\12\4\0\2\12"+
    "\23\0\6\12\1\u0131\10\12\1\u0132\32\12\10\0\3\12"+
    "\1\u0133\3\12\1\0\1\12\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\13\12"+
    "\1\u0134\36\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\12\1\u0135\50\12\10\0\1\12\1\u0136\5\12"+
    "\1\0\1\12\4\0\2\12\23\0\17\12\1\u0137\32\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\7\12"+
    "\1\u0138\42\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\u0139\45\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\5\12\1\u013a\44\12\10\0\2\12"+
    "\1\u013b\4\12\1\0\1\12\4\0\2\12\23\0\12\12"+
    "\1\u013c\11\12\1\u013d\1\u013e\1\u013f\23\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\23\12\1\u0140\26\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\12\12"+
    "\1\u0141\37\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\25\12\1\u0142\24\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\5\12\1\u0143\44\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\30\12\1\u0144\21\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\27\12"+
    "\1\u0145\22\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\u0146\45\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\5\12\1\u0147\44\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\14\12\1\u0148\35\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\5\12"+
    "\1\u0149\44\12\10\0\7\12\1\0\1\u014a\4\0\2\12"+
    "\23\0\52\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\12\1\u014b\50\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\14\12\1\u014c\35\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\4\12\1\u014d\45\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\12"+
    "\1\u014e\50\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\10\12\1\u014f\41\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\20\12\1\u0150\31\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\1\12\1\u0151\50\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\15\12"+
    "\1\u0152\34\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\22\12\1\u0153\27\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\6\12\1\u0154\5\12\1\u0155\1\12"+
    "\1\u0156\33\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\31\12\1\u0157\20\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\6\12\1\u0158\43\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\1\12\1\u0159\50\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\u015a"+
    "\51\12\10\0\7\12\1\0\1\u015b\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\u015c\4\0\2\12\23\0"+
    "\7\12\1\u015d\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\11\12\1\u015e\40\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\u015f\51\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\1\u0160\51\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\23\12\1\u0161"+
    "\26\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\7\12\1\u0162\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\3\12\1\u0163\46\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\12\12\1\u0164\37\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\u0165"+
    "\40\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\14\12\1\u0166\35\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\1\u0167\51\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\4\12\1\u0168\45\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\17\12\1\u0169\32\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\u016a"+
    "\51\12\10\0\7\12\1\0\1\u016b\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\u016c\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\1\u016d\51\12\10\0\3\12\1\u016e\3\12\1\0\1\12"+
    "\4\0\2\12\23\0\52\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\3\12\1\u016f\46\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\7\12\1\u0170\42\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\43\12"+
    "\1\u0171\6\12\10\0\1\u0127\1\0\1\u0127\1\0\1\u0127"+
    "\61\0\5\u0127\31\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\u0172\45\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\11\12\1\u0173\40\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\12\12\1\u0174\37\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\12"+
    "\1\u0175\50\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\5\12\1\u0176\44\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\7\12\1\u0177\42\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\4\12\1\u0178\45\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\14\12"+
    "\1\u0179\35\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\u017a\3\12\1\u017b\45\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\u017c\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\13\12\1\u017d"+
    "\36\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\4\12\1\u017e\45\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\1\u017f\3\12\1\u0180\45\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\12\12\1\u0181\37\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\17\12"+
    "\1\u0182\32\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\25\12\1\u0183\24\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\30\12\1\u0184\21\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\27\12\1\u0185\22\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\15\12"+
    "\1\u0186\34\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\12\1\u0187\50\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\7\12\1\u0188\42\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\12\12\1\u0189\37\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\12\12"+
    "\1\u018a\37\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\16\12\1\u018b\33\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\14\12\1\u018c\35\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\15\12\1\u018d\34\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\12"+
    "\1\u018e\50\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\7\12\1\u018f\42\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\13\12\1\u0190\36\12\10\0\7\12"+
    "\1\0\1\u0191\4\0\2\12\23\0\52\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\15\12\1\u0192\34\12"+
    "\10\0\7\12\1\0\1\u0193\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\u0194\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\20\12"+
    "\1\u0195\31\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\7\12\1\u0196\42\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\7\12\1\u0197\42\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\12\12\1\u0198\37\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\u0199"+
    "\3\12\1\u019a\45\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\11\12\1\u019b\40\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\12\1\u019c\50\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\5\12\1\u019d"+
    "\44\12\10\0\7\12\1\0\1\u019e\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\11\12\1\u019f\40\12\10\0\7\12\1\0\1\u01a0\4\0"+
    "\2\12\23\0\52\12\10\0\7\12\1\0\1\u01a1\4\0"+
    "\2\12\23\0\52\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\16\12\1\u01a2\33\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\23\12\1\u01a3\26\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\12\1\u01a4"+
    "\50\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\1\u01a5\51\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\7\12\1\u01a6\42\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\1\12\1\u01a7\50\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\12\12\1\u01a8\37\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\u01a9"+
    "\51\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\1\u01aa\51\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\4\12\1\u01ab\45\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\37\12\1\u01ac\12\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\12\12\1\u01ad\37\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\1\u01ae"+
    "\51\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\4\12\1\u01af\45\12\10\0\7\12\1\0\1\u01b0\4\0"+
    "\2\12\23\0\52\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\7\12\1\u01b1\42\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\15\12\1\u01b2\34\12\10\0"+
    "\5\12\1\u01b3\1\12\1\0\1\12\4\0\2\12\23\0"+
    "\52\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\12\12\1\u01b4\37\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\14\12\1\u01b5\35\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\1\u01b6\51\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\7\12\1\u01b7\42\12"+
    "\10\0\5\12\1\u01b8\1\12\1\0\1\12\4\0\2\12"+
    "\23\0\52\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\12\12\1\u01b9\37\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\3\12\1\u01ba\46\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\1\u01bb\51\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\u01bc\51\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\4\12"+
    "\1\u01bd\45\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\11\12\1\u01be\40\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\11\12\1\u01bf\40\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\7\12\1\u01c0\42\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\15\12"+
    "\1\u01c1\34\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\1\u01c2\51\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\14\12\1\u01c3\35\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\3\12\1\u01c4\46\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\23\12\1\u01c5"+
    "\26\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\14\12\1\u01c6\35\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\21\12\1\u01c7\30\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\13\12\1\u01c8\36\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\16\12\1\u01c9"+
    "\33\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\7\12\1\u01ca\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\16\12\1\u01cb\33\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\17\12\1\u01cc\32\12\10\0"+
    "\7\12\1\0\1\u01cd\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\u01ce\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\7\12\1\u01cf"+
    "\42\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\7\12\1\u01d0\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\6\12\1\u01d1\43\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\11\12\1\u01d2\40\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\11\12\1\u01d3"+
    "\40\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\44\12\1\u01d4\5\12\10\0\1\12\1\u01d5\5\12\1\0"+
    "\1\12\4\0\2\12\23\0\52\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\7\12\1\u01d6\42\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\6\12\1\u01d7"+
    "\43\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\5\12\1\u01d8\44\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\6\12\1\u01d9\43\12\10\0\7\12\1\0"+
    "\1\u01da\4\0\2\12\23\0\52\12\10\0\5\12\1\u01db"+
    "\1\12\1\0\1\12\4\0\2\12\23\0\52\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\12\1\u01dc"+
    "\50\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\7\12\1\u01dd\42\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\21\12\1\u01de\30\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\14\12\1\u01df\35\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\12\1\u01e0"+
    "\50\12\10\0\7\12\1\0\1\12\4\0\2\12\23\0"+
    "\5\12\1\u01e1\44\12\10\0\7\12\1\0\1\12\4\0"+
    "\2\12\23\0\17\12\1\u01e2\32\12\10\0\7\12\1\0"+
    "\1\12\4\0\2\12\23\0\12\12\1\u01e3\37\12\10\0"+
    "\7\12\1\0\1\12\4\0\2\12\23\0\1\u01e4\51\12"+
    "\10\0\7\12\1\0\1\u01e5\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\u01e6\4\0\2\12\23\0\52\12"+
    "\10\0\3\12\1\u01e7\3\12\1\0\1\12\4\0\2\12"+
    "\23\0\52\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\11\12\1\u01e8\40\12\10\0\7\12\1\0\1\u01e9"+
    "\4\0\2\12\23\0\52\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\12\12\1\u01ea\37\12\10\0\7\12"+
    "\1\0\1\u01eb\4\0\2\12\23\0\52\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\20\12\1\u01ec\31\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\16\12"+
    "\1\u01ed\33\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\45\12\1\u01ee\4\12\10\0\7\12\1\0\1\u01ef"+
    "\4\0\2\12\23\0\52\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\46\12\1\u01f0\3\12\10\0\3\12"+
    "\1\u01f1\3\12\1\0\1\12\4\0\2\12\23\0\52\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\40\12"+
    "\1\u01f2\11\12\10\0\3\12\1\u01f3\3\12\1\0\1\12"+
    "\4\0\2\12\23\0\52\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\47\12\1\u01f4\2\12\10\0\7\12"+
    "\1\0\1\12\4\0\2\12\23\0\50\12\1\u01f5\1\12"+
    "\10\0\7\12\1\0\1\12\4\0\2\12\23\0\37\12"+
    "\1\u01f6\12\12\10\0\7\12\1\0\1\12\4\0\2\12"+
    "\23\0\35\12\1\u01f7\14\12\10\0\7\12\1\0\1\12"+
    "\4\0\2\12\23\0\40\12\1\u01f8\11\12\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\21\1\1\11\4\1\10\11\26\1\1\11"+
    "\1\1\1\0\2\11\2\1\1\0\7\1\2\11\1\0"+
    "\1\1\1\0\1\11\1\0\13\11\1\1\1\11\1\1"+
    "\1\11\60\1\1\0\5\1\1\11\4\1\2\11\100\1"+
    "\1\0\10\1\1\11\105\1\1\0\320\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[504];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SourcePawnLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 161: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 162: break;
          case 3: 
            { return SLASH;
            }
          case 163: break;
          case 4: 
            { return ASTERISK;
            }
          case 164: break;
          case 5: 
            { return DECIMAL_LITERAL;
            }
          case 165: break;
          case 6: 
            { return IDENTIFIER;
            }
          case 166: break;
          case 7: 
            { return PERIOD;
            }
          case 167: break;
          case 8: 
            { return MINUS;
            }
          case 168: break;
          case 9: 
            { return PLUS;
            }
          case 169: break;
          case 10: 
            { return PERCENT;
            }
          case 170: break;
          case 11: 
            { return EXCLAMATION;
            }
          case 171: break;
          case 12: 
            { return TILDE;
            }
          case 172: break;
          case 13: 
            { return ASSIGN;
            }
          case 173: break;
          case 14: 
            { return AMPERSAND;
            }
          case 174: break;
          case 15: 
            { return CARET;
            }
          case 175: break;
          case 16: 
            { return VERTICAL_BAR;
            }
          case 176: break;
          case 17: 
            { return COMMA;
            }
          case 177: break;
          case 18: 
            { return SEMICOLON;
            }
          case 178: break;
          case 19: 
            { return LBRACKET;
            }
          case 179: break;
          case 20: 
            { return RBRACKET;
            }
          case 180: break;
          case 21: 
            { return LBRACE;
            }
          case 181: break;
          case 22: 
            { return RBRACE;
            }
          case 182: break;
          case 23: 
            { return LPAREN;
            }
          case 183: break;
          case 24: 
            { return RPAREN;
            }
          case 184: break;
          case 25: 
            { return LT;
            }
          case 185: break;
          case 26: 
            { return GT;
            }
          case 186: break;
          case 27: 
            { return HASH;
            }
          case 187: break;
          case 28: 
            { return LINE_COMMENT;
            }
          case 188: break;
          case 29: 
            { return DIVEQ;
            }
          case 189: break;
          case 30: 
            { return MULEQ;
            }
          case 190: break;
          case 31: 
            { return BINARY_LITERAL;
            }
          case 191: break;
          case 32: 
            { return HEXADECIMAL_LITERAL;
            }
          case 192: break;
          case 33: 
            { return RANGE;
            }
          case 193: break;
          case 34: 
            { return DECREMENT;
            }
          case 194: break;
          case 35: 
            { return SUBEQ;
            }
          case 195: break;
          case 36: 
            { return CHARACTER_STRING;
            }
          case 196: break;
          case 37: 
            { return STRING_LITERAL;
            }
          case 197: break;
          case 38: 
            { return INCREMENT;
            }
          case 198: break;
          case 39: 
            { return ADDEQ;
            }
          case 199: break;
          case 40: 
            { return MODEQ;
            }
          case 200: break;
          case 41: 
            { return NEQUALTO;
            }
          case 201: break;
          case 42: 
            { return EQUALTO;
            }
          case 202: break;
          case 43: 
            { return ANDEQ;
            }
          case 203: break;
          case 44: 
            { return AND;
            }
          case 204: break;
          case 45: 
            { return XOREQ;
            }
          case 205: break;
          case 46: 
            { return OREQ;
            }
          case 206: break;
          case 47: 
            { return OR;
            }
          case 207: break;
          case 48: 
            { return LTEQ;
            }
          case 208: break;
          case 49: 
            { return SL;
            }
          case 209: break;
          case 50: 
            { return GTEQ;
            }
          case 210: break;
          case 51: 
            { return SRA;
            }
          case 211: break;
          case 52: 
            { return SCOPE_RESOLUTION;
            }
          case 212: break;
          case 53: 
            { return AS;
            }
          case 213: break;
          case 54: 
            { return IN;
            }
          case 214: break;
          case 55: 
            { return IF;
            }
          case 215: break;
          case 56: 
            { return DO;
            }
          case 216: break;
          case 57: 
            { return RATIONAL_LITERAL;
            }
          case 217: break;
          case 58: 
            { return ELLIPSIS;
            }
          case 218: break;
          case 59: 
            { return SLEQ;
            }
          case 219: break;
          case 60: 
            { return SRAEQ;
            }
          case 220: break;
          case 61: 
            { return SRL;
            }
          case 221: break;
          case 62: 
            { return INT;
            }
          case 222: break;
          case 63: 
            { return TRY;
            }
          case 223: break;
          case 64: 
            { return LET;
            }
          case 224: break;
          case 65: 
            { return NEW;
            }
          case 225: break;
          case 66: 
            { return FOR;
            }
          case 226: break;
          case 67: 
            { return VAR;
            }
          case 227: break;
          case 68: 
            { return EOS;
            }
          case 228: break;
          case 69: 
            { return BLOCK_COMMENT;
            }
          case 229: break;
          case 70: 
            { return EXIT;
            }
          case 230: break;
          case 71: 
            { return ELSE;
            }
          case 231: break;
          case 72: 
            { return ENUM;
            }
          case 232: break;
          case 73: 
            { return SRLEQ;
            }
          case 233: break;
          case 74: 
            { return CASE;
            }
          case 234: break;
          case 75: 
            { return CHAR;
            }
          case 235: break;
          case 76: 
            { return INTN;
            }
          case 236: break;
          case 77: 
            { return INT8;
            }
          case 237: break;
          case 78: 
            { return TRUE;
            }
          case 238: break;
          case 79: 
            { return THIS;
            }
          case 239: break;
          case 80: 
            { return NULL;
            }
          case 240: break;
          case 81: 
            { return DECL;
            }
          case 241: break;
          case 82: 
            { return WITH;
            }
          case 242: break;
          case 83: 
            { return GOTO;
            }
          case 243: break;
          case 84: 
            { return VOID;
            }
          case 244: break;
          case 85: 
            { return BREAK;
            }
          case 245: break;
          case 86: 
            { return CATCH;
            }
          case 246: break;
          case 87: 
            { return CONST;
            }
          case 247: break;
          case 88: 
            { return UINTN;
            }
          case 248: break;
          case 89: 
            { return UINT8;
            }
          case 249: break;
          case 90: 
            { return USING;
            }
          case 250: break;
          case 91: 
            { return UNION;
            }
          case 251: break;
          case 92: 
            { return INT16;
            }
          case 252: break;
          case 93: 
            { return INT64;
            }
          case 253: break;
          case 94: 
            { return INT32;
            }
          case 254: break;
          case 95: 
            { return STOCK;
            }
          case 255: break;
          case 96: 
            { return SLEEP;
            }
          case 256: break;
          case 97: 
            { return TAGOF;
            }
          case 257: break;
          case 98: 
            { return THROW;
            }
          case 258: break;
          case 99: 
            { return FALSE;
            }
          case 259: break;
          case 100: 
            { return DEBUG;
            }
          case 260: break;
          case 101: 
            { return WHILE;
            }
          case 261: break;
          case 102: 
            { return SP_VERSION;
            }
          case 262: break;
          case 103: 
            { return ASSERT;
            }
          case 263: break;
          case 104: 
            { return UINT16;
            }
          case 264: break;
          case 105: 
            { return UINT64;
            }
          case 265: break;
          case 106: 
            { return UINT32;
            }
          case 266: break;
          case 107: 
            { return IMPORT;
            }
          case 267: break;
          case 108: 
            { return RETURN;
            }
          case 268: break;
          case 109: 
            { return SEALED;
            }
          case 269: break;
          case 110: 
            { return SIZEOF;
            }
          case 270: break;
          case 111: 
            { return STATIC;
            }
          case 271: break;
          case 112: 
            { return STRUCT;
            }
          case 272: break;
          case 113: 
            { return SWITCH;
            }
          case 273: break;
          case 114: 
            { return TYPEOF;
            }
          case 274: break;
          case 115: 
            { return NATIVE;
            }
          case 275: break;
          case 116: 
            { return OBJECT;
            }
          case 276: break;
          case 117: 
            { return DELETE;
            }
          case 277: break;
          case 118: 
            { return DOUBLE;
            }
          case 278: break;
          case 119: 
            { return PUBLIC;
            }
          case 279: break;
          case 120: 
            { return PRAGMA;
            }
          case 280: break;
          case 121: 
            { return BUILTIN;
            }
          case 281: break;
          case 122: 
            { return ACQUIRE;
            }
          case 282: break;
          case 123: 
            { return CELLSOF;
            }
          case 283: break;
          case 124: 
            { return CELLMAX;
            }
          case 284: break;
          case 125: 
            { return CELLMIN;
            }
          case 285: break;
          case 126: 
            { return CAST_TO;
            }
          case 286: break;
          case 127: 
            { return CHARMAX;
            }
          case 287: break;
          case 128: 
            { return CHARMIN;
            }
          case 288: break;
          case 129: 
            { return TYPESET;
            }
          case 289: break;
          case 130: 
            { return TYPEDEF;
            }
          case 290: break;
          case 131: 
            { return FUNCTAG;
            }
          case 291: break;
          case 132: 
            { return FINALLY;
            }
          case 292: break;
          case 133: 
            { return FOREACH;
            }
          case 293: break;
          case 134: 
            { return FORWARD;
            }
          case 294: break;
          case 135: 
            { return DEFAULT;
            }
          case 295: break;
          case 136: 
            { return DEFINED;
            }
          case 296: break;
          case 137: 
            { return PACKAGE;
            }
          case 297: break;
          case 138: 
            { return PRIVATE;
            }
          case 298: break;
          case 139: 
            { return VARIANT;
            }
          case 299: break;
          case 140: 
            { return VIEW_AS;
            }
          case 300: break;
          case 141: 
            { return VIRTUAL;
            }
          case 301: break;
          case 142: 
            { return EXPLICIT;
            }
          case 302: break;
          case 143: 
            { return CELLBITS;
            }
          case 303: break;
          case 144: 
            { return PRAGMA_CTRLCHAR;
            }
          case 304: break;
          case 145: 
            { return CHARBITS;
            }
          case 305: break;
          case 146: 
            { return CONTINUE;
            }
          case 306: break;
          case 147: 
            { return UCHARMAX;
            }
          case 307: break;
          case 148: 
            { return IMPLICIT;
            }
          case 308: break;
          case 149: 
            { return READONLY;
            }
          case 309: break;
          case 150: 
            { return OPERATOR;
            }
          case 310: break;
          case 151: 
            { return FUNCENUM;
            }
          case 311: break;
          case 152: 
            { return FUNCTION;
            }
          case 312: break;
          case 153: 
            { return VOLATILE;
            }
          case 313: break;
          case 154: 
            { return INTERFACE;
            }
          case 314: break;
          case 155: 
            { return PRAGMA_SEMICOLON;
            }
          case 315: break;
          case 156: 
            { return NAMESPACE;
            }
          case 316: break;
          case 157: 
            { return METHODMAP;
            }
          case 317: break;
          case 158: 
            { return PROTECTED;
            }
          case 318: break;
          case 159: 
            { return NULLABLE;
            }
          case 319: break;
          case 160: 
            { return INVALID_FUNCTION;
            }
          case 320: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
