/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.intellij.sourcepawn.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static net.alliedmods.intellij.sourcepawn.psi.SourcePawnTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_SourcePawnLexer.flex</tt>
 */
public class _SourcePawnLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\5\1\6\1\1\22\0\1\3\1\33\1\23\1\25\1\0\1\32\1\36\1\22\1\47"+
    "\1\50\1\7\1\31\1\41\1\21\1\17\1\4\1\10\1\12\1\102\1\101\1\103\1\14\1\100\1"+
    "\14\1\77\1\14\1\53\1\42\1\51\1\35\1\52\1\0\1\30\1\115\1\16\1\122\1\117\1\107"+
    "\1\120\2\27\1\112\2\27\1\116\1\27\1\113\1\110\1\124\2\27\1\111\1\123\1\121"+
    "\1\114\4\27\1\43\1\24\1\44\1\37\1\13\1\0\1\54\1\11\1\55\1\71\1\20\1\70\1\76"+
    "\1\26\1\60\1\105\1\64\1\65\1\72\1\66\1\67\1\73\1\56\1\61\1\62\1\63\1\57\1"+
    "\104\1\75\1\15\1\74\1\106\1\45\1\40\1\46\1\34\6\0\1\5\242\0\2\5\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\5"+
    "\1\1\1\6\1\7\1\6\1\10\2\1\1\11\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\1\23\6\1\34\1\0\1\35\1\36"+
    "\1\37\1\40\1\0\3\6\1\41\3\6\1\42\1\43"+
    "\1\0\1\44\1\0\1\45\2\0\2\46\1\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\6\1\66"+
    "\11\6\1\67\1\70\26\6\1\71\14\6\1\0\1\72"+
    "\4\6\1\73\4\6\1\0\1\74\1\75\1\76\14\6"+
    "\1\77\17\6\1\100\1\6\1\101\1\102\10\6\1\103"+
    "\17\6\1\104\4\6\1\105\1\6\1\106\1\0\4\6"+
    "\1\107\1\6\1\110\1\111\1\46\1\112\3\6\1\113"+
    "\1\114\13\6\1\115\1\116\16\6\1\117\2\6\1\120"+
    "\3\6\1\121\10\6\1\122\14\6\1\123\1\124\3\6"+
    "\1\125\2\6\1\72\1\0\1\6\1\126\13\6\1\127"+
    "\1\6\1\130\3\6\1\131\1\132\2\6\1\133\1\134"+
    "\1\135\1\6\1\136\1\137\11\6\1\140\1\141\1\6"+
    "\1\142\1\143\7\6\1\144\5\6\1\145\13\6\1\146"+
    "\7\6\1\147\2\6\1\150\13\6\1\151\1\152\1\153"+
    "\2\6\1\154\1\6\1\155\1\156\1\6\1\157\1\160"+
    "\1\161\1\162\1\6\1\163\1\6\1\164\1\6\1\165"+
    "\7\6\1\166\3\6\1\167\2\6\1\170\1\171\7\6"+
    "\1\172\2\6\1\173\1\6\1\174\1\175\1\176\1\6"+
    "\1\177\1\200\1\201\7\6\1\202\1\203\3\6\1\204"+
    "\1\6\1\205\1\206\1\207\1\210\1\211\2\6\1\212"+
    "\1\213\1\6\1\214\1\215\1\216\3\6\1\217\1\220"+
    "\1\221\1\222\1\223\1\224\1\6\1\225\1\226\2\6"+
    "\1\227\1\230\1\231\3\6\1\232\2\6\1\233\1\234"+
    "\1\235\1\6\1\236\1\237\2\6\1\240\3\6\1\241"+
    "\4\6\1\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[518];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6\0\u04fb"+
    "\0\u02fd\0\u0550\0\u05a5\0\u05fa\0\125\0\u064f\0\u06a4\0\u06f9"+
    "\0\u074e\0\125\0\125\0\125\0\125\0\125\0\125\0\125"+
    "\0\125\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1"+
    "\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49"+
    "\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\u0e9c\0\u0ef1"+
    "\0\u0f46\0\125\0\125\0\u0f9b\0\u0ff0\0\u1045\0\u109a\0\u10ef"+
    "\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\125\0\125\0\u0451"+
    "\0\u0451\0\u04a6\0\125\0\u12ed\0\u04fb\0\u1342\0\125\0\u1397"+
    "\0\125\0\125\0\125\0\125\0\125\0\125\0\125\0\125"+
    "\0\125\0\125\0\125\0\u13ec\0\125\0\u1441\0\125\0\u1496"+
    "\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f\0\u1694\0\u16e9\0\u173e"+
    "\0\u1793\0\u17e8\0\u183d\0\u02fd\0\u1892\0\u18e7\0\u193c\0\u1991"+
    "\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4\0\u1c39"+
    "\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1"+
    "\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134\0\u2189"+
    "\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u23dc\0\u2431"+
    "\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da\0\125\0\u262f\0\u2684"+
    "\0\u26d9\0\u272e\0\u2783\0\125\0\125\0\u27d8\0\u282d\0\u2882"+
    "\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a"+
    "\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2"+
    "\0\u2e27\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a"+
    "\0\u30cf\0\u3124\0\u02fd\0\u3179\0\u02fd\0\u02fd\0\u31ce\0\u3223"+
    "\0\u3278\0\u32cd\0\u3322\0\u3377\0\u33cc\0\u3421\0\u3476\0\u34cb"+
    "\0\u3520\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9\0\u371e\0\u3773"+
    "\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b"+
    "\0\u3a70\0\u3ac5\0\u3b1a\0\u02fd\0\u3b6f\0\u0f46\0\u3bc4\0\u3c19"+
    "\0\u3c6e\0\u3cc3\0\u3d18\0\u02fd\0\u3d6d\0\u02fd\0\u02fd\0\u04fb"+
    "\0\125\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u02fd\0\u3f16\0\u3f6b"+
    "\0\u3fc0\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be\0\u4213"+
    "\0\u4268\0\u02fd\0\u02fd\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411"+
    "\0\u4466\0\u44bb\0\u4510\0\u4565\0\u45ba\0\u460f\0\u4664\0\u46b9"+
    "\0\u470e\0\u02fd\0\u4763\0\u47b8\0\u02fd\0\u480d\0\u4862\0\u48b7"+
    "\0\u02fd\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a"+
    "\0\u4b5f\0\u02fd\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d"+
    "\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1\0\u4f06\0\u4f5b\0\u02fd\0\u02fd"+
    "\0\u4fb0\0\u5005\0\u505a\0\u02fd\0\u50af\0\u5104\0\u5159\0\u5159"+
    "\0\u51ae\0\u02fd\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac"+
    "\0\u5401\0\u5456\0\u54ab\0\u5500\0\u5555\0\u02fd\0\u55aa\0\u02fd"+
    "\0\u55ff\0\u5654\0\u56a9\0\u02fd\0\u02fd\0\u56fe\0\u5753\0\u02fd"+
    "\0\u02fd\0\u02fd\0\u57a8\0\u02fd\0\u02fd\0\u57fd\0\u5852\0\u58a7"+
    "\0\u58fc\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u02fd\0\u02fd"+
    "\0\u5afa\0\u02fd\0\u02fd\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e\0\u5ca3"+
    "\0\u5cf8\0\u5d4d\0\u02fd\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6"+
    "\0\u02fd\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u6149"+
    "\0\u619e\0\u61f3\0\u6248\0\u629d\0\u02fd\0\u62f2\0\u6347\0\u639c"+
    "\0\u63f1\0\u6446\0\u649b\0\u64f0\0\u02fd\0\u6545\0\u659a\0\u02fd"+
    "\0\u65ef\0\u6644\0\u6699\0\u66ee\0\u6743\0\u6798\0\u67ed\0\u6842"+
    "\0\u6897\0\u68ec\0\u6941\0\u02fd\0\u02fd\0\u02fd\0\u6996\0\u69eb"+
    "\0\u02fd\0\u6a40\0\u02fd\0\u02fd\0\u6a95\0\u02fd\0\u02fd\0\u02fd"+
    "\0\u02fd\0\u6aea\0\u02fd\0\u6b3f\0\u02fd\0\u6b94\0\u02fd\0\u6be9"+
    "\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u6de7\0\u02fd\0\u6e3c"+
    "\0\u6e91\0\u6ee6\0\u02fd\0\u6f3b\0\u6f90\0\u02fd\0\u02fd\0\u6fe5"+
    "\0\u703a\0\u708f\0\u70e4\0\u7139\0\u718e\0\u71e3\0\u02fd\0\u7238"+
    "\0\u728d\0\u02fd\0\u72e2\0\u02fd\0\u02fd\0\u02fd\0\u7337\0\u02fd"+
    "\0\u02fd\0\u02fd\0\u738c\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u7535"+
    "\0\u758a\0\u02fd\0\u02fd\0\u75df\0\u7634\0\u7689\0\u02fd\0\u76de"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u7733\0\u7788\0\u02fd"+
    "\0\u02fd\0\u77dd\0\u02fd\0\u02fd\0\u02fd\0\u7832\0\u7887\0\u78dc"+
    "\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u02fd\0\u7931\0\u02fd"+
    "\0\u02fd\0\u7986\0\u79db\0\u02fd\0\u02fd\0\u02fd\0\u7a30\0\u7a85"+
    "\0\u7ada\0\u02fd\0\u7b2f\0\u7b84\0\u02fd\0\u02fd\0\u02fd\0\u7bd9"+
    "\0\u02fd\0\u02fd\0\u7c2e\0\u7c83\0\u02fd\0\u7cd8\0\u7d2d\0\u7d82"+
    "\0\u02fd\0\u7dd7\0\u7e2c\0\u7e81\0\u7ed6\0\u02fd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[518];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\10\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\2\12\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\12\1\47\1\50\1\51\1\52\1\53"+
    "\1\12\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\12\1\63\1\64\5\10\1\65\2\12\1\66\2\12"+
    "\1\67\12\12\126\0\3\3\2\0\1\3\122\0\1\70"+
    "\2\0\1\71\25\0\1\72\124\0\1\73\77\0\1\10"+
    "\1\74\3\10\1\75\1\0\1\76\57\0\5\10\31\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\3\12\1\77"+
    "\1\12\1\100\43\12\10\0\1\10\1\0\3\10\2\0"+
    "\1\76\57\0\5\10\31\0\3\12\1\101\3\12\1\0"+
    "\1\12\5\0\3\12\23\0\51\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\51\12\17\0\1\102\115\0"+
    "\5\12\1\103\1\12\1\0\1\12\5\0\3\12\23\0"+
    "\11\12\1\104\1\105\36\12\21\0\1\106\13\0\1\107"+
    "\67\0\1\110\2\0\2\110\2\0\13\110\1\111\102\110"+
    "\23\112\1\113\1\114\100\112\1\115\1\116\1\117\21\115"+
    "\1\120\100\115\31\0\1\121\3\0\1\122\124\0\1\123"+
    "\124\0\1\124\124\0\1\125\124\0\1\126\1\127\123\0"+
    "\1\130\124\0\1\131\2\0\1\132\121\0\1\133\13\0"+
    "\1\134\110\0\1\135\14\0\1\136\125\0\1\137\61\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\1\12\1\140"+
    "\4\12\1\141\42\12\10\0\7\12\1\0\1\142\5\0"+
    "\1\143\2\12\23\0\1\144\6\12\1\145\3\12\1\146"+
    "\35\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\147\2\12\1\150\1\12\1\151\3\12\1\152"+
    "\36\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\153\1\12\1\154\1\12\1\155\32\12\10\0"+
    "\7\12\1\0\1\156\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\157\5\0\3\12\23\0\4\12\1\160"+
    "\2\12\1\161\1\12\1\162\7\12\1\163\27\12\10\0"+
    "\7\12\1\0\1\12\5\0\1\164\2\12\23\0\1\165"+
    "\4\12\1\166\12\12\1\167\30\12\10\0\7\12\1\0"+
    "\1\170\5\0\3\12\23\0\51\12\10\0\7\12\1\0"+
    "\1\171\5\0\3\12\23\0\1\172\2\12\1\173\45\12"+
    "\10\0\1\12\1\174\5\12\1\0\1\12\5\0\3\12"+
    "\23\0\17\12\1\175\31\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\176\2\12\1\177\1\200\6\12"+
    "\1\201\35\12\10\0\7\12\1\0\1\202\5\0\3\12"+
    "\23\0\13\12\1\203\35\12\10\0\7\12\1\0\1\204"+
    "\5\0\3\12\23\0\51\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\205\2\12\1\206\1\12\1\207"+
    "\43\12\10\0\7\12\1\0\1\12\5\0\1\210\2\12"+
    "\23\0\4\12\1\211\44\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\13\12\1\212\35\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\1\213\3\12\1\214"+
    "\6\12\1\215\35\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\34\12\1\216\14\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\37\12\1\217\11\12\1\70"+
    "\2\0\2\70\2\0\116\70\7\71\1\220\115\71\10\0"+
    "\1\74\1\0\2\74\121\0\5\75\1\0\1\75\1\0"+
    "\1\75\33\0\2\75\12\0\2\75\5\0\5\75\3\0"+
    "\1\75\5\0\1\75\1\0\2\75\1\0\1\75\12\0"+
    "\1\221\1\0\1\221\1\0\1\221\62\0\5\221\31\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\4\12\1\222"+
    "\44\12\10\0\7\12\1\0\1\223\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\224\35\12\1\225\17\0\1\226\115\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\4\12\1\227\12\12"+
    "\1\230\31\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\6\12\1\231\42\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\3\12\1\232\45\12\1\112\2\0"+
    "\2\112\2\0\116\112\2\0\1\117\123\0\1\233\1\115"+
    "\23\0\1\120\133\0\1\234\124\0\1\235\14\0\1\236"+
    "\62\0\7\12\1\0\1\12\5\0\3\12\23\0\2\12"+
    "\1\237\46\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\6\12\1\240\42\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\11\12\1\241\37\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\1\242\50\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\6\12\1\243"+
    "\1\244\41\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\5\12\1\245\43\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\12\12\1\246\36\12\10\0\7\12"+
    "\1\0\1\12\5\0\1\247\2\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\12\12\1\250"+
    "\36\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\4\12\1\251\44\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\4\12\1\252\44\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\7\12\1\253\41\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\17\12\1\254"+
    "\31\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\255\6\12\1\256\41\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\257\15\12\1\260\32\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\32\12\1\261"+
    "\16\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\262\4\12\1\263\5\12\1\264\35\12\10\0\7\12"+
    "\1\0\1\265\5\0\3\12\23\0\51\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\4\12\1\266\44\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\4\12"+
    "\1\267\1\270\43\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\22\12\1\271\26\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\3\12\1\272\14\12\1\273"+
    "\30\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\17\12\1\274\31\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\275\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\21\12\1\276\27\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\7\12\1\277"+
    "\6\12\1\300\32\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\11\12\1\301\37\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\31\12\1\302\17\12\10\0"+
    "\7\12\1\0\1\303\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\11\12\1\304"+
    "\37\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\305\36\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\12\12\1\306\36\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\5\12\1\307\43\12\10\0"+
    "\1\12\1\310\5\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\311\7\12\1\312\2\12\1\313\2\12\1\314"+
    "\31\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\3\12\1\315\45\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\316\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\1\12\1\317\47\12\10\0"+
    "\1\12\1\320\5\12\1\0\1\12\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\321\3\12\1\322\6\12\1\323\35\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\4\12\1\324\44\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\7\12"+
    "\1\325\41\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\7\12\1\326\41\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\5\12\1\327\43\12\10\0\7\12"+
    "\1\0\1\330\5\0\3\12\23\0\5\12\1\331\43\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\4\12"+
    "\1\332\4\12\1\333\37\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\35\12\1\334\13\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\40\12\1\335\10\12"+
    "\4\71\1\336\2\71\1\220\115\71\10\0\1\221\1\0"+
    "\3\221\3\0\1\337\56\0\5\221\31\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\11\12\1\340\37\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\1\341\50\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\3\12"+
    "\1\342\45\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\343\50\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\344\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\11\12\1\345\37\12\10\0"+
    "\7\12\1\0\1\346\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\16\12\1\347"+
    "\32\12\1\115\1\116\1\350\21\115\1\120\100\115\35\0"+
    "\1\351\77\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\3\12\1\352\45\12\10\0\7\12\1\0\1\353\5\0"+
    "\3\12\23\0\51\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\11\12\1\354\37\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\5\12\1\355\43\12\10\0"+
    "\7\12\1\0\1\356\5\0\3\12\23\0\7\12\1\357"+
    "\41\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\360\47\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\11\12\1\361\37\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\6\12\1\362\1\363\41\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\1\364"+
    "\50\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\7\12\1\365\41\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\12\12\1\366\36\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\13\12\1\367\35\12\10\0"+
    "\2\12\1\370\4\12\1\0\1\371\5\0\3\12\23\0"+
    "\12\12\1\372\10\12\1\373\1\374\1\375\23\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\11\12\1\376"+
    "\1\12\1\377\35\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\15\12\1\u0100\33\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\3\12\1\u0101\45\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\11\12\1\u0102"+
    "\37\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\4\12\1\u0103\44\12\10\0\7\12\1\0\1\u0104\5\0"+
    "\3\12\23\0\51\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\u0105\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\3\12\1\u0106\45\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\1\12\1\u0107"+
    "\47\12\10\0\7\12\1\0\1\u0108\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\7\12\1\u0109\41\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\6\12\1\u010a\42\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\13\12\1\u010b\35\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\13\12\1\u010c"+
    "\35\12\10\0\7\12\1\0\1\u010d\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\u010e\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\4\12\1\u010f\44\12\10\0\7\12\1\0\1\u0110\5\0"+
    "\3\12\23\0\51\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\11\12\1\u0111\37\12\10\0\7\12\1\0"+
    "\1\u0112\5\0\3\12\23\0\51\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\5\12\1\u0113\43\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\6\12\1\u0114"+
    "\42\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\u0115\47\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\u0116\50\12\10\0\7\12\1\0\1\u0117"+
    "\5\0\3\12\23\0\21\12\1\u0118\27\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\3\12\1\u0119\45\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\11\12"+
    "\1\u011a\37\12\10\0\7\12\1\0\1\u011b\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\u011c\3\12\1\u011d\44\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\5\12\1\u011e\43\12\10\0"+
    "\1\12\1\u011f\5\12\1\0\1\12\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\1\u0120\2\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\10\12\1\u0121\40\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\11\12\1\u0122\37\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\22\12\1\u0123\26\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\30\12"+
    "\1\u0124\20\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\7\12\1\u0125\41\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\11\12\1\u0126\37\12\10\0\7\12"+
    "\1\0\1\12\5\0\1\u0127\2\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\13\12\1\u0128"+
    "\35\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\4\12\1\u0129\44\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\21\12\1\u012a\27\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\7\12\1\u012b\41\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\15\12\1\u012c"+
    "\33\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\u012d\50\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\41\12\1\u012e\7\12\10\0\1\u012f\1\0\1\u012f"+
    "\1\0\1\u012f\4\0\1\u0130\55\0\5\u012f\31\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\7\12\1\u0131\41\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\10\12"+
    "\1\u0132\40\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\11\12\1\u0133\37\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\21\12\1\u0134\27\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\4\12\1\u0135\44\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\4\12"+
    "\1\u0136\44\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\5\12\1\u0137\43\12\10\0\1\12\1\u0138\5\12"+
    "\1\0\1\12\5\0\3\12\23\0\6\12\1\u0139\7\12"+
    "\1\u013a\32\12\10\0\1\12\1\u013b\5\12\1\0\1\12"+
    "\5\0\3\12\23\0\16\12\1\u013c\32\12\10\0\3\12"+
    "\1\u013d\3\12\1\0\1\12\5\0\3\12\23\0\51\12"+
    "\10\0\7\12\1\0\1\12\5\0\1\u013e\2\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\u013f\47\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\u0140\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\4\12\1\u0141\44\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\5\12\1\u0142"+
    "\43\12\10\0\2\12\1\u0143\4\12\1\0\1\12\5\0"+
    "\3\12\23\0\12\12\1\u0144\10\12\1\u0145\1\u0146\1\u0147"+
    "\23\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\22\12\1\u0148\26\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\12\12\1\u0149\36\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\24\12\1\u014a\24\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\5\12\1\u014b"+
    "\43\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\27\12\1\u014c\21\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\26\12\1\u014d\22\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\4\12\1\u014e\44\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\5\12\1\u014f"+
    "\43\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\13\12\1\u0150\35\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\5\12\1\u0151\43\12\10\0\7\12\1\0"+
    "\1\u0152\5\0\3\12\23\0\51\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\1\12\1\u0153\47\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\13\12\1\u0154"+
    "\35\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\4\12\1\u0155\44\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\12\1\u0156\47\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\10\12\1\u0157\40\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\17\12\1\u0158"+
    "\31\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\u0159\47\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\21\12\1\u015a\27\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\14\12\1\u015b\34\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\6\12\1\u015c"+
    "\4\12\1\u015d\1\12\1\u015e\33\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\30\12\1\u015f\20\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\6\12\1\u0160"+
    "\42\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\12\1\u0161\47\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\u0162\50\12\10\0\7\12\1\0\1\u0163"+
    "\5\0\3\12\23\0\51\12\10\0\7\12\1\0\1\u0164"+
    "\5\0\3\12\23\0\7\12\1\u0165\41\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\11\12\1\u0166\37\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\1\u0167"+
    "\50\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\u0168\50\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\22\12\1\u0169\26\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\7\12\1\u016a\41\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\3\12\1\u016b\45\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\12\12"+
    "\1\u016c\36\12\10\0\7\12\1\0\1\u016d\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\11\12\1\u016e\37\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\13\12\1\u016f\35\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\1\u0170\50\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\4\12\1\u0171"+
    "\44\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\16\12\1\u0172\32\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\u0173\50\12\10\0\7\12\1\0\1\u0174"+
    "\5\0\3\12\23\0\51\12\10\0\7\12\1\0\1\u0175"+
    "\5\0\3\12\23\0\51\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\u0176\50\12\10\0\3\12\1\u0177"+
    "\3\12\1\0\1\12\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\3\12\1\u0178"+
    "\45\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\7\12\1\u0179\41\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\42\12\1\u017a\6\12\10\0\1\u012f\1\0"+
    "\1\u012f\1\0\1\u012f\62\0\5\u012f\31\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\4\12\1\u017b\44\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\11\12\1\u017c"+
    "\37\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\u017d\36\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\12\1\u017e\47\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\5\12\1\u017f\43\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\7\12\1\u0180"+
    "\41\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\4\12\1\u0181\44\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\13\12\1\u0182\35\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\1\u0183\3\12\1\u0184\44\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\4\12"+
    "\1\u0185\44\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\u0186\3\12\1\u0187\44\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\7\12\1\u0188\41\12\10\0"+
    "\7\12\1\0\1\12\5\0\1\u0189\2\12\23\0\51\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\12\12"+
    "\1\u018a\36\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\16\12\1\u018b\32\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\24\12\1\u018c\24\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\27\12\1\u018d\21\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\26\12"+
    "\1\u018e\22\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\14\12\1\u018f\34\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\12\1\u0190\47\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\7\12\1\u0191\41\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\12\12"+
    "\1\u0192\36\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\12\12\1\u0193\36\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\15\12\1\u0194\33\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\13\12\1\u0195\35\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\14\12"+
    "\1\u0196\34\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\12\1\u0197\47\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\7\12\1\u0198\41\12\10\0\7\12"+
    "\1\0\1\12\5\0\1\u0199\2\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\u019a\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\14\12\1\u019b"+
    "\34\12\10\0\7\12\1\0\1\u019c\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\u019d\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\17\12\1\u019e\31\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\u019f\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\7\12\1\u01a0\41\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\12\12\1\u01a1"+
    "\36\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\u01a2\3\12\1\u01a3\44\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\11\12\1\u01a4\37\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\1\12\1\u01a5\47\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\5\12"+
    "\1\u01a6\43\12\10\0\7\12\1\0\1\u01a7\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\11\12\1\u01a8\37\12\10\0\7\12\1\0\1\u01a9"+
    "\5\0\3\12\23\0\51\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\12\1\u01aa\47\12\10\0\7\12"+
    "\1\0\1\u01ab\5\0\3\12\23\0\51\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\15\12\1\u01ac\33\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\22\12"+
    "\1\u01ad\26\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\12\1\u01ae\47\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\u01af\50\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\7\12\1\u01b0\41\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\1\12\1\u01b1"+
    "\47\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\u01b2\36\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\u01b3\50\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\u01b4\50\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\4\12\1\u01b5\44\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\36\12\1\u01b6"+
    "\12\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\u01b7\36\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\1\u01b8\50\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\4\12\1\u01b9\44\12\10\0\7\12"+
    "\1\0\1\u01ba\5\0\3\12\23\0\51\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\7\12\1\u01bb\41\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\14\12"+
    "\1\u01bc\34\12\10\0\5\12\1\u01bd\1\12\1\0\1\12"+
    "\5\0\3\12\23\0\51\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\12\12\1\u01be\36\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\7\12\1\u01bf\41\12"+
    "\10\0\5\12\1\u01c0\1\12\1\0\1\12\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\12\12\1\u01c1\36\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\13\12\1\u01c2\35\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\1\u01c3\50\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\3\12\1\u01c4"+
    "\45\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\1\u01c5\50\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\u01c6\50\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\4\12\1\u01c7\44\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\11\12\1\u01c8\37\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\11\12\1\u01c9"+
    "\37\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\7\12\1\u01ca\41\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\14\12\1\u01cb\34\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\1\u01cc\50\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\13\12\1\u01cd\35\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\3\12"+
    "\1\u01ce\45\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\22\12\1\u01cf\26\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\13\12\1\u01d0\35\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\20\12\1\u01d1\30\12"+
    "\10\0\7\12\1\0\1\12\5\0\1\u01d2\2\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\15\12\1\u01d3\33\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\7\12\1\u01d4\41\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\15\12\1\u01d5\33\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\1\u01d6\50\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\16\12"+
    "\1\u01d7\32\12\10\0\7\12\1\0\1\u01d8\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\u01d9\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\7\12\1\u01da\41\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\7\12\1\u01db\41\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\6\12\1\u01dc\42\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\11\12"+
    "\1\u01dd\37\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\11\12\1\u01de\37\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\43\12\1\u01df\5\12\10\0\1\12"+
    "\1\u01e0\5\12\1\0\1\12\5\0\3\12\23\0\51\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\7\12"+
    "\1\u01e1\41\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\6\12\1\u01e2\42\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\6\12\1\u01e3\42\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\5\12\1\u01e4\43\12"+
    "\10\0\7\12\1\0\1\u01e5\5\0\3\12\23\0\51\12"+
    "\10\0\5\12\1\u01e6\1\12\1\0\1\12\5\0\3\12"+
    "\23\0\51\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\12\1\u01e7\47\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\7\12\1\u01e8\41\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\20\12\1\u01e9\30\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\13\12"+
    "\1\u01ea\35\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\1\12\1\u01eb\47\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\5\12\1\u01ec\43\12\10\0\7\12"+
    "\1\0\1\12\5\0\3\12\23\0\16\12\1\u01ed\32\12"+
    "\10\0\7\12\1\0\1\12\5\0\3\12\23\0\12\12"+
    "\1\u01ee\36\12\10\0\7\12\1\0\1\12\5\0\3\12"+
    "\23\0\7\12\1\u01ef\41\12\10\0\7\12\1\0\1\12"+
    "\5\0\3\12\23\0\1\u01f0\50\12\10\0\7\12\1\0"+
    "\1\u01f1\5\0\3\12\23\0\51\12\10\0\7\12\1\0"+
    "\1\u01f2\5\0\3\12\23\0\51\12\10\0\3\12\1\u01f3"+
    "\3\12\1\0\1\12\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\11\12\1\u01f4"+
    "\37\12\10\0\7\12\1\0\1\u01f5\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\12\12\1\u01f6\36\12\10\0\7\12\1\0\1\u01f7\5\0"+
    "\3\12\23\0\51\12\10\0\7\12\1\0\1\u01f8\5\0"+
    "\3\12\23\0\51\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\17\12\1\u01f9\31\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\15\12\1\u01fa\33\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\44\12\1\u01fb"+
    "\4\12\10\0\7\12\1\0\1\u01fc\5\0\3\12\23\0"+
    "\51\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\15\12\1\u01fd\33\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\45\12\1\u01fe\3\12\10\0\3\12\1\u01ff"+
    "\3\12\1\0\1\12\5\0\3\12\23\0\51\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\37\12\1\u0200"+
    "\11\12\10\0\3\12\1\u0201\3\12\1\0\1\12\5\0"+
    "\3\12\23\0\51\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\46\12\1\u0202\2\12\10\0\7\12\1\0"+
    "\1\12\5\0\3\12\23\0\47\12\1\u0203\1\12\10\0"+
    "\7\12\1\0\1\12\5\0\3\12\23\0\36\12\1\u0204"+
    "\12\12\10\0\7\12\1\0\1\12\5\0\3\12\23\0"+
    "\34\12\1\u0205\14\12\10\0\7\12\1\0\1\12\5\0"+
    "\3\12\23\0\37\12\1\u0206\11\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32555];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\4\1\10\11\27\1\1\0"+
    "\2\11\2\1\1\0\7\1\2\11\1\0\1\1\1\0"+
    "\1\11\2\0\1\1\1\11\1\0\13\11\1\1\1\11"+
    "\1\1\1\11\60\1\1\0\5\1\1\11\4\1\1\0"+
    "\2\11\101\1\1\0\11\1\1\11\106\1\1\0\326\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[518];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _SourcePawnLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SourcePawnLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 163: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 164: break;
          case 3: 
            { return SLASH;
            }
          case 165: break;
          case 4: 
            { return ASTERISK;
            }
          case 166: break;
          case 5: 
            { return DECIMAL_LITERAL;
            }
          case 167: break;
          case 6: 
            { return IDENTIFIER;
            }
          case 168: break;
          case 7: 
            { return PERIOD;
            }
          case 169: break;
          case 8: 
            { return MINUS;
            }
          case 170: break;
          case 9: 
            { return HASH;
            }
          case 171: break;
          case 10: 
            { return PLUS;
            }
          case 172: break;
          case 11: 
            { return PERCENT;
            }
          case 173: break;
          case 12: 
            { return EXCLAMATION;
            }
          case 174: break;
          case 13: 
            { return TILDE;
            }
          case 175: break;
          case 14: 
            { return ASSIGN;
            }
          case 176: break;
          case 15: 
            { return AMPERSAND;
            }
          case 177: break;
          case 16: 
            { return CARET;
            }
          case 178: break;
          case 17: 
            { return VERTICAL_BAR;
            }
          case 179: break;
          case 18: 
            { return COMMA;
            }
          case 180: break;
          case 19: 
            { return SEMICOLON;
            }
          case 181: break;
          case 20: 
            { return LBRACKET;
            }
          case 182: break;
          case 21: 
            { return RBRACKET;
            }
          case 183: break;
          case 22: 
            { return LBRACE;
            }
          case 184: break;
          case 23: 
            { return RBRACE;
            }
          case 185: break;
          case 24: 
            { return LPAREN;
            }
          case 186: break;
          case 25: 
            { return RPAREN;
            }
          case 187: break;
          case 26: 
            { return LT;
            }
          case 188: break;
          case 27: 
            { return GT;
            }
          case 189: break;
          case 28: 
            { return LINE_COMMENT;
            }
          case 190: break;
          case 29: 
            { return DIVEQ;
            }
          case 191: break;
          case 30: 
            { return MULEQ;
            }
          case 192: break;
          case 31: 
            { return BINARY_LITERAL;
            }
          case 193: break;
          case 32: 
            { return HEXADECIMAL_LITERAL;
            }
          case 194: break;
          case 33: 
            { return RANGE;
            }
          case 195: break;
          case 34: 
            { return DECREMENT;
            }
          case 196: break;
          case 35: 
            { return SUBEQ;
            }
          case 197: break;
          case 36: 
            { return CHARACTER_STRING;
            }
          case 198: break;
          case 37: 
            { return STRING_LITERAL;
            }
          case 199: break;
          case 38: 
            { return PREPROCESSOR_DIRECTIVE;
            }
          case 200: break;
          case 39: 
            { return INCREMENT;
            }
          case 201: break;
          case 40: 
            { return ADDEQ;
            }
          case 202: break;
          case 41: 
            { return MODEQ;
            }
          case 203: break;
          case 42: 
            { return NEQUALTO;
            }
          case 204: break;
          case 43: 
            { return EQUALTO;
            }
          case 205: break;
          case 44: 
            { return ANDEQ;
            }
          case 206: break;
          case 45: 
            { return AND;
            }
          case 207: break;
          case 46: 
            { return XOREQ;
            }
          case 208: break;
          case 47: 
            { return OREQ;
            }
          case 209: break;
          case 48: 
            { return OR;
            }
          case 210: break;
          case 49: 
            { return LTEQ;
            }
          case 211: break;
          case 50: 
            { return SL;
            }
          case 212: break;
          case 51: 
            { return GTEQ;
            }
          case 213: break;
          case 52: 
            { return SRA;
            }
          case 214: break;
          case 53: 
            { return SCOPE_RESOLUTION;
            }
          case 215: break;
          case 54: 
            { return AS;
            }
          case 216: break;
          case 55: 
            { return IN;
            }
          case 217: break;
          case 56: 
            { return IF;
            }
          case 218: break;
          case 57: 
            { return DO;
            }
          case 219: break;
          case 58: 
            { return RATIONAL_LITERAL;
            }
          case 220: break;
          case 59: 
            { return ELLIPSIS;
            }
          case 221: break;
          case 60: 
            { return SLEQ;
            }
          case 222: break;
          case 61: 
            { return SRAEQ;
            }
          case 223: break;
          case 62: 
            { return SRL;
            }
          case 224: break;
          case 63: 
            { return INT;
            }
          case 225: break;
          case 64: 
            { return TRY;
            }
          case 226: break;
          case 65: 
            { return LET;
            }
          case 227: break;
          case 66: 
            { return NEW;
            }
          case 228: break;
          case 67: 
            { return FOR;
            }
          case 229: break;
          case 68: 
            { return VAR;
            }
          case 230: break;
          case 69: 
            { return EOS;
            }
          case 231: break;
          case 70: 
            { return BLOCK_COMMENT;
            }
          case 232: break;
          case 71: 
            { return EXIT;
            }
          case 233: break;
          case 72: 
            { return ELSE;
            }
          case 234: break;
          case 73: 
            { return ENUM;
            }
          case 235: break;
          case 74: 
            { return SRLEQ;
            }
          case 236: break;
          case 75: 
            { return CHAR;
            }
          case 237: break;
          case 76: 
            { return CASE;
            }
          case 238: break;
          case 77: 
            { return INTN;
            }
          case 239: break;
          case 78: 
            { return INT8;
            }
          case 240: break;
          case 79: 
            { return THIS;
            }
          case 241: break;
          case 80: 
            { return TRUE;
            }
          case 242: break;
          case 81: 
            { return NULL;
            }
          case 243: break;
          case 82: 
            { return DECL;
            }
          case 244: break;
          case 83: 
            { return WITH;
            }
          case 245: break;
          case 84: 
            { return GOTO;
            }
          case 246: break;
          case 85: 
            { return VOID;
            }
          case 247: break;
          case 86: 
            { return BREAK;
            }
          case 248: break;
          case 87: 
            { return CATCH;
            }
          case 249: break;
          case 88: 
            { return CONST;
            }
          case 250: break;
          case 89: 
            { return UINTN;
            }
          case 251: break;
          case 90: 
            { return UINT8;
            }
          case 252: break;
          case 91: 
            { return USING;
            }
          case 253: break;
          case 92: 
            { return UNION;
            }
          case 254: break;
          case 93: 
            { return INT16;
            }
          case 255: break;
          case 94: 
            { return INT64;
            }
          case 256: break;
          case 95: 
            { return INT32;
            }
          case 257: break;
          case 96: 
            { return STOCK;
            }
          case 258: break;
          case 97: 
            { return SLEEP;
            }
          case 259: break;
          case 98: 
            { return THROW;
            }
          case 260: break;
          case 99: 
            { return TAGOF;
            }
          case 261: break;
          case 100: 
            { return FALSE;
            }
          case 262: break;
          case 101: 
            { return DEBUG;
            }
          case 263: break;
          case 102: 
            { return WHILE;
            }
          case 264: break;
          case 103: 
            { return SP_VERSION;
            }
          case 265: break;
          case 104: 
            { return ASSERT;
            }
          case 266: break;
          case 105: 
            { return UINT16;
            }
          case 267: break;
          case 106: 
            { return UINT64;
            }
          case 268: break;
          case 107: 
            { return UINT32;
            }
          case 269: break;
          case 108: 
            { return IMPORT;
            }
          case 270: break;
          case 109: 
            { return RETURN;
            }
          case 271: break;
          case 110: 
            { return SEALED;
            }
          case 272: break;
          case 111: 
            { return SIZEOF;
            }
          case 273: break;
          case 112: 
            { return STATIC;
            }
          case 274: break;
          case 113: 
            { return STRUCT;
            }
          case 275: break;
          case 114: 
            { return SWITCH;
            }
          case 276: break;
          case 115: 
            { return TYPEOF;
            }
          case 277: break;
          case 116: 
            { return NATIVE;
            }
          case 278: break;
          case 117: 
            { return OBJECT;
            }
          case 279: break;
          case 118: 
            { return DELETE;
            }
          case 280: break;
          case 119: 
            { return DOUBLE;
            }
          case 281: break;
          case 120: 
            { return PUBLIC;
            }
          case 282: break;
          case 121: 
            { return PRAGMA;
            }
          case 283: break;
          case 122: 
            { return BUILTIN;
            }
          case 284: break;
          case 123: 
            { return ACQUIRE;
            }
          case 285: break;
          case 124: 
            { return CELLSOF;
            }
          case 286: break;
          case 125: 
            { return CELLMAX;
            }
          case 287: break;
          case 126: 
            { return CELLMIN;
            }
          case 288: break;
          case 127: 
            { return CHARMAX;
            }
          case 289: break;
          case 128: 
            { return CHARMIN;
            }
          case 290: break;
          case 129: 
            { return CAST_TO;
            }
          case 291: break;
          case 130: 
            { return TYPESET;
            }
          case 292: break;
          case 131: 
            { return TYPEDEF;
            }
          case 293: break;
          case 132: 
            { return FUNCTAG;
            }
          case 294: break;
          case 133: 
            { return FINALLY;
            }
          case 295: break;
          case 134: 
            { return FOREACH;
            }
          case 296: break;
          case 135: 
            { return FORWARD;
            }
          case 297: break;
          case 136: 
            { return DEFAULT;
            }
          case 298: break;
          case 137: 
            { return DEFINED;
            }
          case 299: break;
          case 138: 
            { return PACKAGE;
            }
          case 300: break;
          case 139: 
            { return PRIVATE;
            }
          case 301: break;
          case 140: 
            { return VARIANT;
            }
          case 302: break;
          case 141: 
            { return VIEW_AS;
            }
          case 303: break;
          case 142: 
            { return VIRTUAL;
            }
          case 304: break;
          case 143: 
            { return EXPLICIT;
            }
          case 305: break;
          case 144: 
            { return CELLBITS;
            }
          case 306: break;
          case 145: 
            { return CHARBITS;
            }
          case 307: break;
          case 146: 
            { return PRAGMA_CTRLCHAR;
            }
          case 308: break;
          case 147: 
            { return CONTINUE;
            }
          case 309: break;
          case 148: 
            { return UCHARMAX;
            }
          case 310: break;
          case 149: 
            { return IMPLICIT;
            }
          case 311: break;
          case 150: 
            { return READONLY;
            }
          case 312: break;
          case 151: 
            { return OPERATOR;
            }
          case 313: break;
          case 152: 
            { return FUNCENUM;
            }
          case 314: break;
          case 153: 
            { return FUNCTION;
            }
          case 315: break;
          case 154: 
            { return VOLATILE;
            }
          case 316: break;
          case 155: 
            { return INTERFACE;
            }
          case 317: break;
          case 156: 
            { return PRAGMA_SEMICOLON;
            }
          case 318: break;
          case 157: 
            { return NAMESPACE;
            }
          case 319: break;
          case 158: 
            { return METHODMAP;
            }
          case 320: break;
          case 159: 
            { return PROTECTED;
            }
          case 321: break;
          case 160: 
            { return PRAGMA_DEPRECATED;
            }
          case 322: break;
          case 161: 
            { return NULLABLE;
            }
          case 323: break;
          case 162: 
            { return INVALID_FUNCTION;
            }
          case 324: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
